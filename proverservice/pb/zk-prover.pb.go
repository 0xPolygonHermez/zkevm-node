// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: zk-prover.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetStatusResponse_StatusProver int32

const (
	GetStatusResponse_STATUS_PROVER_UNSPECIFIED GetStatusResponse_StatusProver = 0
	GetStatusResponse_STATUS_PROVER_BOOTING     GetStatusResponse_StatusProver = 1
	GetStatusResponse_STATUS_PROVER_COMPUTING   GetStatusResponse_StatusProver = 2
	GetStatusResponse_STATUS_PROVER_IDLE        GetStatusResponse_StatusProver = 3
	GetStatusResponse_STATUS_PROVER_HALT        GetStatusResponse_StatusProver = 4
)

// Enum value maps for GetStatusResponse_StatusProver.
var (
	GetStatusResponse_StatusProver_name = map[int32]string{
		0: "STATUS_PROVER_UNSPECIFIED",
		1: "STATUS_PROVER_BOOTING",
		2: "STATUS_PROVER_COMPUTING",
		3: "STATUS_PROVER_IDLE",
		4: "STATUS_PROVER_HALT",
	}
	GetStatusResponse_StatusProver_value = map[string]int32{
		"STATUS_PROVER_UNSPECIFIED": 0,
		"STATUS_PROVER_BOOTING":     1,
		"STATUS_PROVER_COMPUTING":   2,
		"STATUS_PROVER_IDLE":        3,
		"STATUS_PROVER_HALT":        4,
	}
)

func (x GetStatusResponse_StatusProver) Enum() *GetStatusResponse_StatusProver {
	p := new(GetStatusResponse_StatusProver)
	*p = x
	return p
}

func (x GetStatusResponse_StatusProver) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetStatusResponse_StatusProver) Descriptor() protoreflect.EnumDescriptor {
	return file_zk_prover_proto_enumTypes[0].Descriptor()
}

func (GetStatusResponse_StatusProver) Type() protoreflect.EnumType {
	return &file_zk_prover_proto_enumTypes[0]
}

func (x GetStatusResponse_StatusProver) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetStatusResponse_StatusProver.Descriptor instead.
func (GetStatusResponse_StatusProver) EnumDescriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{7, 0}
}

type GenProofResponse_ResultGenProof int32

const (
	GenProofResponse_RESULT_GEN_PROOF_UNSPECIFIED    GenProofResponse_ResultGenProof = 0
	GenProofResponse_RESULT_GEN_PROOF_OK             GenProofResponse_ResultGenProof = 1
	GenProofResponse_RESULT_GEN_PROOF_ERROR          GenProofResponse_ResultGenProof = 2
	GenProofResponse_RESULT_GEN_PROOF_INTERNAL_ERROR GenProofResponse_ResultGenProof = 3
)

// Enum value maps for GenProofResponse_ResultGenProof.
var (
	GenProofResponse_ResultGenProof_name = map[int32]string{
		0: "RESULT_GEN_PROOF_UNSPECIFIED",
		1: "RESULT_GEN_PROOF_OK",
		2: "RESULT_GEN_PROOF_ERROR",
		3: "RESULT_GEN_PROOF_INTERNAL_ERROR",
	}
	GenProofResponse_ResultGenProof_value = map[string]int32{
		"RESULT_GEN_PROOF_UNSPECIFIED":    0,
		"RESULT_GEN_PROOF_OK":             1,
		"RESULT_GEN_PROOF_ERROR":          2,
		"RESULT_GEN_PROOF_INTERNAL_ERROR": 3,
	}
)

func (x GenProofResponse_ResultGenProof) Enum() *GenProofResponse_ResultGenProof {
	p := new(GenProofResponse_ResultGenProof)
	*p = x
	return p
}

func (x GenProofResponse_ResultGenProof) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenProofResponse_ResultGenProof) Descriptor() protoreflect.EnumDescriptor {
	return file_zk_prover_proto_enumTypes[1].Descriptor()
}

func (GenProofResponse_ResultGenProof) Type() protoreflect.EnumType {
	return &file_zk_prover_proto_enumTypes[1]
}

func (x GenProofResponse_ResultGenProof) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenProofResponse_ResultGenProof.Descriptor instead.
func (GenProofResponse_ResultGenProof) EnumDescriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{8, 0}
}

type CancelResponse_ResultCancel int32

const (
	CancelResponse_RESULT_CANCEL_UNSPECIFIED CancelResponse_ResultCancel = 0
	CancelResponse_RESULT_CANCEL_OK          CancelResponse_ResultCancel = 1
	CancelResponse_RESULT_CANCEL_ERROR       CancelResponse_ResultCancel = 2
)

// Enum value maps for CancelResponse_ResultCancel.
var (
	CancelResponse_ResultCancel_name = map[int32]string{
		0: "RESULT_CANCEL_UNSPECIFIED",
		1: "RESULT_CANCEL_OK",
		2: "RESULT_CANCEL_ERROR",
	}
	CancelResponse_ResultCancel_value = map[string]int32{
		"RESULT_CANCEL_UNSPECIFIED": 0,
		"RESULT_CANCEL_OK":          1,
		"RESULT_CANCEL_ERROR":       2,
	}
)

func (x CancelResponse_ResultCancel) Enum() *CancelResponse_ResultCancel {
	p := new(CancelResponse_ResultCancel)
	*p = x
	return p
}

func (x CancelResponse_ResultCancel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelResponse_ResultCancel) Descriptor() protoreflect.EnumDescriptor {
	return file_zk_prover_proto_enumTypes[2].Descriptor()
}

func (CancelResponse_ResultCancel) Type() protoreflect.EnumType {
	return &file_zk_prover_proto_enumTypes[2]
}

func (x CancelResponse_ResultCancel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelResponse_ResultCancel.Descriptor instead.
func (CancelResponse_ResultCancel) EnumDescriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{9, 0}
}

type GetProofResponse_ResultGetProof int32

const (
	GetProofResponse_RESULT_GET_PROOF_UNSPECIFIED     GetProofResponse_ResultGetProof = 0
	GetProofResponse_RESULT_GET_PROOF_COMPLETED_OK    GetProofResponse_ResultGetProof = 1
	GetProofResponse_RESULT_GET_PROOF_ERROR           GetProofResponse_ResultGetProof = 2
	GetProofResponse_RESULT_GET_PROOF_COMPLETED_ERROR GetProofResponse_ResultGetProof = 3
	GetProofResponse_RESULT_GET_PROOF_PENDING         GetProofResponse_ResultGetProof = 4
	GetProofResponse_RESULT_GET_PROOF_INTERNAL_ERROR  GetProofResponse_ResultGetProof = 5
	GetProofResponse_RESULT_GET_PROOF_CANCEL          GetProofResponse_ResultGetProof = 6
)

// Enum value maps for GetProofResponse_ResultGetProof.
var (
	GetProofResponse_ResultGetProof_name = map[int32]string{
		0: "RESULT_GET_PROOF_UNSPECIFIED",
		1: "RESULT_GET_PROOF_COMPLETED_OK",
		2: "RESULT_GET_PROOF_ERROR",
		3: "RESULT_GET_PROOF_COMPLETED_ERROR",
		4: "RESULT_GET_PROOF_PENDING",
		5: "RESULT_GET_PROOF_INTERNAL_ERROR",
		6: "RESULT_GET_PROOF_CANCEL",
	}
	GetProofResponse_ResultGetProof_value = map[string]int32{
		"RESULT_GET_PROOF_UNSPECIFIED":     0,
		"RESULT_GET_PROOF_COMPLETED_OK":    1,
		"RESULT_GET_PROOF_ERROR":           2,
		"RESULT_GET_PROOF_COMPLETED_ERROR": 3,
		"RESULT_GET_PROOF_PENDING":         4,
		"RESULT_GET_PROOF_INTERNAL_ERROR":  5,
		"RESULT_GET_PROOF_CANCEL":          6,
	}
)

func (x GetProofResponse_ResultGetProof) Enum() *GetProofResponse_ResultGetProof {
	p := new(GetProofResponse_ResultGetProof)
	*p = x
	return p
}

func (x GetProofResponse_ResultGetProof) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetProofResponse_ResultGetProof) Descriptor() protoreflect.EnumDescriptor {
	return file_zk_prover_proto_enumTypes[3].Descriptor()
}

func (GetProofResponse_ResultGetProof) Type() protoreflect.EnumType {
	return &file_zk_prover_proto_enumTypes[3]
}

func (x GetProofResponse_ResultGetProof) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetProofResponse_ResultGetProof.Descriptor instead.
func (GetProofResponse_ResultGetProof) EnumDescriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{10, 0}
}

type ExecuteResponse_ResultExecute int32

const (
	ExecuteResponse_RESULT_EXECUTE_UNSPECIFIED    ExecuteResponse_ResultExecute = 0
	ExecuteResponse_RESULT_EXECUTE_COMPLETED_OK   ExecuteResponse_ResultExecute = 1
	ExecuteResponse_RESULT_EXECUTE_ERROR          ExecuteResponse_ResultExecute = 2
	ExecuteResponse_RESULT_EXECUTE_COMPLETED_ERR  ExecuteResponse_ResultExecute = 3
	ExecuteResponse_RESULT_EXECUTE_INTERNAL_ERROR ExecuteResponse_ResultExecute = 4
	ExecuteResponse_RESULT_EXECUTE_CANCEL         ExecuteResponse_ResultExecute = 5
)

// Enum value maps for ExecuteResponse_ResultExecute.
var (
	ExecuteResponse_ResultExecute_name = map[int32]string{
		0: "RESULT_EXECUTE_UNSPECIFIED",
		1: "RESULT_EXECUTE_COMPLETED_OK",
		2: "RESULT_EXECUTE_ERROR",
		3: "RESULT_EXECUTE_COMPLETED_ERR",
		4: "RESULT_EXECUTE_INTERNAL_ERROR",
		5: "RESULT_EXECUTE_CANCEL",
	}
	ExecuteResponse_ResultExecute_value = map[string]int32{
		"RESULT_EXECUTE_UNSPECIFIED":    0,
		"RESULT_EXECUTE_COMPLETED_OK":   1,
		"RESULT_EXECUTE_ERROR":          2,
		"RESULT_EXECUTE_COMPLETED_ERR":  3,
		"RESULT_EXECUTE_INTERNAL_ERROR": 4,
		"RESULT_EXECUTE_CANCEL":         5,
	}
)

func (x ExecuteResponse_ResultExecute) Enum() *ExecuteResponse_ResultExecute {
	p := new(ExecuteResponse_ResultExecute)
	*p = x
	return p
}

func (x ExecuteResponse_ResultExecute) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecuteResponse_ResultExecute) Descriptor() protoreflect.EnumDescriptor {
	return file_zk_prover_proto_enumTypes[4].Descriptor()
}

func (ExecuteResponse_ResultExecute) Type() protoreflect.EnumType {
	return &file_zk_prover_proto_enumTypes[4]
}

func (x ExecuteResponse_ResultExecute) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecuteResponse_ResultExecute.Descriptor instead.
func (ExecuteResponse_ResultExecute) EnumDescriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{11, 0}
}

type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V0_0_1 string `protobuf:"bytes,1,opt,name=v0_0_1,json=v001,proto3" json:"v0_0_1,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zk_prover_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_zk_prover_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{0}
}

func (x *Version) GetV0_0_1() string {
	if x != nil {
		return x.V0_0_1
	}
	return ""
}

//*
// @dev GetStatusRequest
type GetStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetStatusRequest) Reset() {
	*x = GetStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zk_prover_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusRequest) ProtoMessage() {}

func (x *GetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zk_prover_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusRequest.ProtoReflect.Descriptor instead.
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{1}
}

//*
// @dev GenProofRequest
// @param {input} - input prover
type GenProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input *InputProver `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *GenProofRequest) Reset() {
	*x = GenProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zk_prover_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenProofRequest) ProtoMessage() {}

func (x *GenProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zk_prover_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenProofRequest.ProtoReflect.Descriptor instead.
func (*GenProofRequest) Descriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{2}
}

func (x *GenProofRequest) GetInput() *InputProver {
	if x != nil {
		return x.Input
	}
	return nil
}

//*
// @dev CancelRequest
// @param {id} - proof identifier
type CancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CancelRequest) Reset() {
	*x = CancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zk_prover_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRequest) ProtoMessage() {}

func (x *CancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zk_prover_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRequest.ProtoReflect.Descriptor instead.
func (*CancelRequest) Descriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{3}
}

func (x *CancelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//*
// @dev Request GetProof
// @param {id} - proof identifier
// @param {timeout} - time to wait until the service responds
type GetProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Timeout uint64 `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *GetProofRequest) Reset() {
	*x = GetProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zk_prover_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProofRequest) ProtoMessage() {}

func (x *GetProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zk_prover_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProofRequest.ProtoReflect.Descriptor instead.
func (*GetProofRequest) Descriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{4}
}

func (x *GetProofRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetProofRequest) GetTimeout() uint64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

//*
// @dev ExecuteRequest
// @param {input} - input prover
type ExecuteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input *InputProver `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *ExecuteRequest) Reset() {
	*x = ExecuteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zk_prover_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteRequest) ProtoMessage() {}

func (x *ExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zk_prover_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteRequest.ProtoReflect.Descriptor instead.
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{5}
}

func (x *ExecuteRequest) GetInput() *InputProver {
	if x != nil {
		return x.Input
	}
	return nil
}

//*
// @dev SynchronizeBatchProposalRequest
// @param {batch_l2_data} - batch hash data
// @param {state_root} - smt state root
type SynchronizeBatchProposalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchL2Data []byte `protobuf:"bytes,1,opt,name=batch_l2_data,json=batchL2Data,proto3" json:"batch_l2_data,omitempty"`
	StateRoot   []byte `protobuf:"bytes,2,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
}

func (x *SynchronizeBatchProposalRequest) Reset() {
	*x = SynchronizeBatchProposalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zk_prover_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynchronizeBatchProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynchronizeBatchProposalRequest) ProtoMessage() {}

func (x *SynchronizeBatchProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zk_prover_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynchronizeBatchProposalRequest.ProtoReflect.Descriptor instead.
func (*SynchronizeBatchProposalRequest) Descriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{6}
}

func (x *SynchronizeBatchProposalRequest) GetBatchL2Data() []byte {
	if x != nil {
		return x.BatchL2Data
	}
	return nil
}

func (x *SynchronizeBatchProposalRequest) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

//*
// @dev Response GetStatus
// @param {state} - server state
// - BOOTING: being ready to compute proofs
// - COMPUTING: busy computing a proof
// - IDLE: waiting for a proof to compute
// - HALT: stop
// @param {last_computed_request_id} - last proof identifier that has been computed
// @param {last_computed_end_time} - last proof timestamp when it was finished
// @param {current_computing_request_id} - current proof identifier that ius being computed
// @param {current_computing_start_time} - current proof timestamp when it was started
// @param {version_proto} - .proto verion
// @param {version_server} - server version
// @param {pending_request_queue_ids} - list of pending proof identifier that are in the queue
type GetStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State                     GetStatusResponse_StatusProver `protobuf:"varint,1,opt,name=state,proto3,enum=zkprover.v1.GetStatusResponse_StatusProver" json:"state,omitempty"`
	LastComputedRequestId     string                         `protobuf:"bytes,2,opt,name=last_computed_request_id,json=lastComputedRequestId,proto3" json:"last_computed_request_id,omitempty"`
	LastComputedEndTime       uint64                         `protobuf:"varint,3,opt,name=last_computed_end_time,json=lastComputedEndTime,proto3" json:"last_computed_end_time,omitempty"`
	CurrentComputingRequestId string                         `protobuf:"bytes,4,opt,name=current_computing_request_id,json=currentComputingRequestId,proto3" json:"current_computing_request_id,omitempty"`
	CurrentComputingStartTime uint64                         `protobuf:"varint,5,opt,name=current_computing_start_time,json=currentComputingStartTime,proto3" json:"current_computing_start_time,omitempty"`
	VersionProto              string                         `protobuf:"bytes,6,opt,name=version_proto,json=versionProto,proto3" json:"version_proto,omitempty"`
	VersionServer             string                         `protobuf:"bytes,7,opt,name=version_server,json=versionServer,proto3" json:"version_server,omitempty"`
	PendingRequestQueueIds    []string                       `protobuf:"bytes,8,rep,name=pending_request_queue_ids,json=pendingRequestQueueIds,proto3" json:"pending_request_queue_ids,omitempty"`
}

func (x *GetStatusResponse) Reset() {
	*x = GetStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zk_prover_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusResponse) ProtoMessage() {}

func (x *GetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zk_prover_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusResponse.ProtoReflect.Descriptor instead.
func (*GetStatusResponse) Descriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{7}
}

func (x *GetStatusResponse) GetState() GetStatusResponse_StatusProver {
	if x != nil {
		return x.State
	}
	return GetStatusResponse_STATUS_PROVER_UNSPECIFIED
}

func (x *GetStatusResponse) GetLastComputedRequestId() string {
	if x != nil {
		return x.LastComputedRequestId
	}
	return ""
}

func (x *GetStatusResponse) GetLastComputedEndTime() uint64 {
	if x != nil {
		return x.LastComputedEndTime
	}
	return 0
}

func (x *GetStatusResponse) GetCurrentComputingRequestId() string {
	if x != nil {
		return x.CurrentComputingRequestId
	}
	return ""
}

func (x *GetStatusResponse) GetCurrentComputingStartTime() uint64 {
	if x != nil {
		return x.CurrentComputingStartTime
	}
	return 0
}

func (x *GetStatusResponse) GetVersionProto() string {
	if x != nil {
		return x.VersionProto
	}
	return ""
}

func (x *GetStatusResponse) GetVersionServer() string {
	if x != nil {
		return x.VersionServer
	}
	return ""
}

func (x *GetStatusResponse) GetPendingRequestQueueIds() []string {
	if x != nil {
		return x.PendingRequestQueueIds
	}
	return nil
}

//*
// @dev Response GenProof
// @param {id} - proof identifier
// @param {result} - response result
//  - OK: succesfull response
//  - ERROR: request is not correct
//  - INTERNAL_ERROR: server error when delivering the response
type GenProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Result GenProofResponse_ResultGenProof `protobuf:"varint,2,opt,name=result,proto3,enum=zkprover.v1.GenProofResponse_ResultGenProof" json:"result,omitempty"`
}

func (x *GenProofResponse) Reset() {
	*x = GenProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zk_prover_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenProofResponse) ProtoMessage() {}

func (x *GenProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zk_prover_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenProofResponse.ProtoReflect.Descriptor instead.
func (*GenProofResponse) Descriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{8}
}

func (x *GenProofResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GenProofResponse) GetResult() GenProofResponse_ResultGenProof {
	if x != nil {
		return x.Result
	}
	return GenProofResponse_RESULT_GEN_PROOF_UNSPECIFIED
}

//*
// @dev CancelResponse
// @param {result} - request result
//  - OK: proof has been cancelled
//  - ERROR: proof has not been cancelled
type CancelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result CancelResponse_ResultCancel `protobuf:"varint,1,opt,name=result,proto3,enum=zkprover.v1.CancelResponse_ResultCancel" json:"result,omitempty"`
}

func (x *CancelResponse) Reset() {
	*x = CancelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zk_prover_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelResponse) ProtoMessage() {}

func (x *CancelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zk_prover_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelResponse.ProtoReflect.Descriptor instead.
func (*CancelResponse) Descriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{9}
}

func (x *CancelResponse) GetResult() CancelResponse_ResultCancel {
	if x != nil {
		return x.Result
	}
	return CancelResponse_RESULT_CANCEL_UNSPECIFIED
}

//*
// @dev GetProofResponse
// @param {id} - proof identifier
// @param {proof} - groth16 proof
// @param {public} - public circuit inputs
// @param {result} - response result
//  - COMPLETED_OK: proof has been computed successfully and it is valid
//  - ERROR: request error
//  - COMPLETED_ERROR: proof has been computed successfully and it is not valid
//  - PENDING: proof is being computed
//  - INTERNAL_ERROR: server error during proof computation
//  - CANCEL: proof has been cancelled
// @param {result_string} - extends result information
type GetProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Proof        *Proof                          `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
	Public       *PublicInputsExtended           `protobuf:"bytes,3,opt,name=public,proto3" json:"public,omitempty"`
	Result       GetProofResponse_ResultGetProof `protobuf:"varint,4,opt,name=result,proto3,enum=zkprover.v1.GetProofResponse_ResultGetProof" json:"result,omitempty"`
	ResultString string                          `protobuf:"bytes,5,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
}

func (x *GetProofResponse) Reset() {
	*x = GetProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zk_prover_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProofResponse) ProtoMessage() {}

func (x *GetProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zk_prover_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProofResponse.ProtoReflect.Descriptor instead.
func (*GetProofResponse) Descriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{10}
}

func (x *GetProofResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetProofResponse) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *GetProofResponse) GetPublic() *PublicInputsExtended {
	if x != nil {
		return x.Public
	}
	return nil
}

func (x *GetProofResponse) GetResult() GetProofResponse_ResultGetProof {
	if x != nil {
		return x.Result
	}
	return GetProofResponse_RESULT_GET_PROOF_UNSPECIFIED
}

func (x *GetProofResponse) GetResultString() string {
	if x != nil {
		return x.ResultString
	}
	return ""
}

//*
// @dev ExecuteResponse
// @param {result} - response result
//  - COMPLETED_OK: proof has been computed successfully and it is valid
//  - ERROR: request error
//  - COMPLETED_ERROR: proof has been computed successfully and it is not valid
//  - PENDING: proof is being computed
//  - INTERNAL_ERROR: server error during proof computation
//  - CANCEL: proof has been cancelled
// @param {diff_keys_values} - modified keys-values in the smt
// @param {new_state_root} - smt new state root
// @param {counters} - group all necesarry circuit counters
// @param {receipts} - ethereum receipts
// @param {logs} - ethereum logs
type ExecuteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result         ExecuteResponse_ResultExecute `protobuf:"varint,1,opt,name=result,proto3,enum=zkprover.v1.ExecuteResponse_ResultExecute" json:"result,omitempty"`
	DiffKeysValues map[string]string             `protobuf:"bytes,2,rep,name=diff_keys_values,json=diffKeysValues,proto3" json:"diff_keys_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NewStateRoot   string                        `protobuf:"bytes,3,opt,name=new_state_root,json=newStateRoot,proto3" json:"new_state_root,omitempty"`
	Counters       *ZkCounters                   `protobuf:"bytes,4,opt,name=counters,proto3" json:"counters,omitempty"`
	Receipts       []string                      `protobuf:"bytes,5,rep,name=receipts,proto3" json:"receipts,omitempty"`
	Logs           []string                      `protobuf:"bytes,6,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *ExecuteResponse) Reset() {
	*x = ExecuteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zk_prover_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResponse) ProtoMessage() {}

func (x *ExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zk_prover_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResponse.ProtoReflect.Descriptor instead.
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{11}
}

func (x *ExecuteResponse) GetResult() ExecuteResponse_ResultExecute {
	if x != nil {
		return x.Result
	}
	return ExecuteResponse_RESULT_EXECUTE_UNSPECIFIED
}

func (x *ExecuteResponse) GetDiffKeysValues() map[string]string {
	if x != nil {
		return x.DiffKeysValues
	}
	return nil
}

func (x *ExecuteResponse) GetNewStateRoot() string {
	if x != nil {
		return x.NewStateRoot
	}
	return ""
}

func (x *ExecuteResponse) GetCounters() *ZkCounters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *ExecuteResponse) GetReceipts() []string {
	if x != nil {
		return x.Receipts
	}
	return nil
}

func (x *ExecuteResponse) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

//*
// @dev ZkCounters
// @param {ecrecover} - total ecrecover made by the circuit
// @param {hash_poseidon} - total poseidon hashes made by the circuit
// @param {hash_keccak} - total hash_keccak made by the circuit
// @param {arith} - total arith made by the circuit
type ZkCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ecrecover    uint32 `protobuf:"varint,1,opt,name=ecrecover,proto3" json:"ecrecover,omitempty"`
	HashPoseidon uint32 `protobuf:"varint,2,opt,name=hash_poseidon,json=hashPoseidon,proto3" json:"hash_poseidon,omitempty"`
	HashKeccak   uint32 `protobuf:"varint,3,opt,name=hash_keccak,json=hashKeccak,proto3" json:"hash_keccak,omitempty"`
	Arith        uint32 `protobuf:"varint,4,opt,name=arith,proto3" json:"arith,omitempty"`
}

func (x *ZkCounters) Reset() {
	*x = ZkCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zk_prover_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkCounters) ProtoMessage() {}

func (x *ZkCounters) ProtoReflect() protoreflect.Message {
	mi := &file_zk_prover_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkCounters.ProtoReflect.Descriptor instead.
func (*ZkCounters) Descriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{12}
}

func (x *ZkCounters) GetEcrecover() uint32 {
	if x != nil {
		return x.Ecrecover
	}
	return 0
}

func (x *ZkCounters) GetHashPoseidon() uint32 {
	if x != nil {
		return x.HashPoseidon
	}
	return 0
}

func (x *ZkCounters) GetHashKeccak() uint32 {
	if x != nil {
		return x.HashKeccak
	}
	return 0
}

func (x *ZkCounters) GetArith() uint32 {
	if x != nil {
		return x.Arith
	}
	return 0
}

//
// @dev PublicInputs
// @param {old_state_root}
// @param {old_local_exit_root}
// @param {new_state_root}
// @param {new_local_exit_root}
// @param {sequencer_addr}
// @param {batch_hash_data}
// @param {chain_id}
// @param {batch_num}
// @param {block_num}
// @param {eth_timestamp}
type PublicInputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldStateRoot     string `protobuf:"bytes,1,opt,name=old_state_root,json=oldStateRoot,proto3" json:"old_state_root,omitempty"`
	OldLocalExitRoot string `protobuf:"bytes,2,opt,name=old_local_exit_root,json=oldLocalExitRoot,proto3" json:"old_local_exit_root,omitempty"`
	NewStateRoot     string `protobuf:"bytes,3,opt,name=new_state_root,json=newStateRoot,proto3" json:"new_state_root,omitempty"`
	NewLocalExitRoot string `protobuf:"bytes,4,opt,name=new_local_exit_root,json=newLocalExitRoot,proto3" json:"new_local_exit_root,omitempty"`
	SequencerAddr    string `protobuf:"bytes,5,opt,name=sequencer_addr,json=sequencerAddr,proto3" json:"sequencer_addr,omitempty"`
	BatchHashData    string `protobuf:"bytes,6,opt,name=batch_hash_data,json=batchHashData,proto3" json:"batch_hash_data,omitempty"`
	ChainId          uint32 `protobuf:"varint,7,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	BatchNum         uint32 `protobuf:"varint,8,opt,name=batch_num,json=batchNum,proto3" json:"batch_num,omitempty"`
	BlockNum         uint32 `protobuf:"varint,9,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	EthTimestamp     uint64 `protobuf:"varint,10,opt,name=eth_timestamp,json=ethTimestamp,proto3" json:"eth_timestamp,omitempty"`
}

func (x *PublicInputs) Reset() {
	*x = PublicInputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zk_prover_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicInputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicInputs) ProtoMessage() {}

func (x *PublicInputs) ProtoReflect() protoreflect.Message {
	mi := &file_zk_prover_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicInputs.ProtoReflect.Descriptor instead.
func (*PublicInputs) Descriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{13}
}

func (x *PublicInputs) GetOldStateRoot() string {
	if x != nil {
		return x.OldStateRoot
	}
	return ""
}

func (x *PublicInputs) GetOldLocalExitRoot() string {
	if x != nil {
		return x.OldLocalExitRoot
	}
	return ""
}

func (x *PublicInputs) GetNewStateRoot() string {
	if x != nil {
		return x.NewStateRoot
	}
	return ""
}

func (x *PublicInputs) GetNewLocalExitRoot() string {
	if x != nil {
		return x.NewLocalExitRoot
	}
	return ""
}

func (x *PublicInputs) GetSequencerAddr() string {
	if x != nil {
		return x.SequencerAddr
	}
	return ""
}

func (x *PublicInputs) GetBatchHashData() string {
	if x != nil {
		return x.BatchHashData
	}
	return ""
}

func (x *PublicInputs) GetChainId() uint32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *PublicInputs) GetBatchNum() uint32 {
	if x != nil {
		return x.BatchNum
	}
	return 0
}

func (x *PublicInputs) GetBlockNum() uint32 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *PublicInputs) GetEthTimestamp() uint64 {
	if x != nil {
		return x.EthTimestamp
	}
	return 0
}

//*
// @dev ProofB
// @param {proofs} - two elliptic curves points
type ProofB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proofs []string `protobuf:"bytes,1,rep,name=proofs,proto3" json:"proofs,omitempty"`
}

func (x *ProofB) Reset() {
	*x = ProofB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zk_prover_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofB) ProtoMessage() {}

func (x *ProofB) ProtoReflect() protoreflect.Message {
	mi := &file_zk_prover_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofB.ProtoReflect.Descriptor instead.
func (*ProofB) Descriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{14}
}

func (x *ProofB) GetProofs() []string {
	if x != nil {
		return x.Proofs
	}
	return nil
}

//*
// @dev Proof
// @param {proof_a} - elliptic curve point
// @param {proof_b} - two elliptic curves points
// @param {proof_c} - elliptic curve point
type Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofA []string  `protobuf:"bytes,1,rep,name=proof_a,json=proofA,proto3" json:"proof_a,omitempty"`
	ProofB []*ProofB `protobuf:"bytes,2,rep,name=proof_b,json=proofB,proto3" json:"proof_b,omitempty"`
	ProofC []string  `protobuf:"bytes,3,rep,name=proof_c,json=proofC,proto3" json:"proof_c,omitempty"`
}

func (x *Proof) Reset() {
	*x = Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zk_prover_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proof) ProtoMessage() {}

func (x *Proof) ProtoReflect() protoreflect.Message {
	mi := &file_zk_prover_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proof.ProtoReflect.Descriptor instead.
func (*Proof) Descriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{15}
}

func (x *Proof) GetProofA() []string {
	if x != nil {
		return x.ProofA
	}
	return nil
}

func (x *Proof) GetProofB() []*ProofB {
	if x != nil {
		return x.ProofB
	}
	return nil
}

func (x *Proof) GetProofC() []string {
	if x != nil {
		return x.ProofC
	}
	return nil
}

//*
// @dev InputProver
// @param {public_inputs} - public inputs
// @param {global_exit_root} - bridge global exit root
// @param {batch_l2_data} - contract calldata
// @param {db} - database containing all key-values in smt matching the old state root
// @param {contracts_bytecode} - key is the hash(contractBytecode), value is the bytecode itself
type InputProver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicInputs      *PublicInputs     `protobuf:"bytes,1,opt,name=public_inputs,json=publicInputs,proto3" json:"public_inputs,omitempty"`
	GlobalExitRoot    string            `protobuf:"bytes,2,opt,name=global_exit_root,json=globalExitRoot,proto3" json:"global_exit_root,omitempty"`
	BatchL2Data       string            `protobuf:"bytes,3,opt,name=batch_l2_data,json=batchL2Data,proto3" json:"batch_l2_data,omitempty"`
	Db                map[string]string `protobuf:"bytes,4,rep,name=db,proto3" json:"db,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ContractsBytecode map[string]string `protobuf:"bytes,5,rep,name=contracts_bytecode,json=contractsBytecode,proto3" json:"contracts_bytecode,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InputProver) Reset() {
	*x = InputProver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zk_prover_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputProver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputProver) ProtoMessage() {}

func (x *InputProver) ProtoReflect() protoreflect.Message {
	mi := &file_zk_prover_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputProver.ProtoReflect.Descriptor instead.
func (*InputProver) Descriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{16}
}

func (x *InputProver) GetPublicInputs() *PublicInputs {
	if x != nil {
		return x.PublicInputs
	}
	return nil
}

func (x *InputProver) GetGlobalExitRoot() string {
	if x != nil {
		return x.GlobalExitRoot
	}
	return ""
}

func (x *InputProver) GetBatchL2Data() string {
	if x != nil {
		return x.BatchL2Data
	}
	return ""
}

func (x *InputProver) GetDb() map[string]string {
	if x != nil {
		return x.Db
	}
	return nil
}

func (x *InputProver) GetContractsBytecode() map[string]string {
	if x != nil {
		return x.ContractsBytecode
	}
	return nil
}

//*
// @dev PublicInputsExtended
// @param {public_inputs} - public inputs
// @param {input_hash} - global hash of all public inputs. Used as a sanity check.
type PublicInputsExtended struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicInputs *PublicInputs `protobuf:"bytes,1,opt,name=public_inputs,json=publicInputs,proto3" json:"public_inputs,omitempty"`
	InputHash    string        `protobuf:"bytes,2,opt,name=input_hash,json=inputHash,proto3" json:"input_hash,omitempty"`
}

func (x *PublicInputsExtended) Reset() {
	*x = PublicInputsExtended{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zk_prover_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicInputsExtended) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicInputsExtended) ProtoMessage() {}

func (x *PublicInputsExtended) ProtoReflect() protoreflect.Message {
	mi := &file_zk_prover_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicInputsExtended.ProtoReflect.Descriptor instead.
func (*PublicInputsExtended) Descriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{17}
}

func (x *PublicInputsExtended) GetPublicInputs() *PublicInputs {
	if x != nil {
		return x.PublicInputs
	}
	return nil
}

func (x *PublicInputsExtended) GetInputHash() string {
	if x != nil {
		return x.InputHash
	}
	return ""
}

//*
// @dev SynchronizeBatchProposalResponse
// @param {receipts} - all receipts generated by the batch execution
type SynchronizeBatchProposalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receipts []*Receipt `protobuf:"bytes,1,rep,name=receipts,proto3" json:"receipts,omitempty"`
}

func (x *SynchronizeBatchProposalResponse) Reset() {
	*x = SynchronizeBatchProposalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zk_prover_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynchronizeBatchProposalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynchronizeBatchProposalResponse) ProtoMessage() {}

func (x *SynchronizeBatchProposalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zk_prover_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynchronizeBatchProposalResponse.ProtoReflect.Descriptor instead.
func (*SynchronizeBatchProposalResponse) Descriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{18}
}

func (x *SynchronizeBatchProposalResponse) GetReceipts() []*Receipt {
	if x != nil {
		return x.Receipts
	}
	return nil
}

//*
// @dev Receipt - zkEVM receipt
// @param {type}
// @param {post_state}
// @param {status} - if the transaction was reverted or not
// @param {cumulative_gas_used} - sum of gasUsed by this transaction and all preceding transactions in the same block
// @param {bloom} - bloom filter
// @param {logs} - log list
// @param {tx_hash} - transaction hash
// @param {contract_address} - contract associated with the transaction
// @param {gas_used} - total fees paid
// @param {transaction_index} - transactions index position in the block
// @param {from} - address of the sender
// @param {to} - address of the receiver
type Receipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	PostState         []byte `protobuf:"bytes,2,opt,name=post_state,json=postState,proto3" json:"post_state,omitempty"`
	Status            uint64 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	CumulativeGasUsed uint64 `protobuf:"varint,4,opt,name=cumulative_gas_used,json=cumulativeGasUsed,proto3" json:"cumulative_gas_used,omitempty"`
	Bloom             []byte `protobuf:"bytes,5,opt,name=bloom,proto3" json:"bloom,omitempty"`
	Logs              []*Log `protobuf:"bytes,6,rep,name=logs,proto3" json:"logs,omitempty"`
	TxHash            []byte `protobuf:"bytes,7,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	ContractAddress   string `protobuf:"bytes,8,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	GasUsed           uint64 `protobuf:"varint,9,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	TransactionIndex  uint32 `protobuf:"varint,12,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
	From              string `protobuf:"bytes,13,opt,name=from,proto3" json:"from,omitempty"`
	To                string `protobuf:"bytes,14,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *Receipt) Reset() {
	*x = Receipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zk_prover_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Receipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Receipt) ProtoMessage() {}

func (x *Receipt) ProtoReflect() protoreflect.Message {
	mi := &file_zk_prover_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Receipt.ProtoReflect.Descriptor instead.
func (*Receipt) Descriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{19}
}

func (x *Receipt) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Receipt) GetPostState() []byte {
	if x != nil {
		return x.PostState
	}
	return nil
}

func (x *Receipt) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Receipt) GetCumulativeGasUsed() uint64 {
	if x != nil {
		return x.CumulativeGasUsed
	}
	return 0
}

func (x *Receipt) GetBloom() []byte {
	if x != nil {
		return x.Bloom
	}
	return nil
}

func (x *Receipt) GetLogs() []*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *Receipt) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Receipt) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *Receipt) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *Receipt) GetTransactionIndex() uint32 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

func (x *Receipt) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Receipt) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

//*
// @dev Log - zkEVM log
// @param {address} - address that generated the log
// @param {topics} - list of topics (indexed properties) for this log
// @param {data} - data included in the log
// @param {tx_hash} - The transaction hash of the transaction of this log
// @param {tx_index} - The index of the transaction in the block of the transaction of this log
// @param {index} - The index of this log across all logs in the entire block
// @param {removed} - During a re-org, if a transaction is orphaned, this will be set to true to indicate the Log entry has been removed
type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Topics  [][]byte `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	Data    []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	TxHash  []byte   `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	TxIndex uint32   `protobuf:"varint,6,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	Index   uint32   `protobuf:"varint,8,opt,name=index,proto3" json:"index,omitempty"`
	Removed bool     `protobuf:"varint,9,opt,name=removed,proto3" json:"removed,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zk_prover_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_zk_prover_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_zk_prover_proto_rawDescGZIP(), []int{20}
}

func (x *Log) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Log) GetTopics() [][]byte {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Log) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Log) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Log) GetTxIndex() uint32 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *Log) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Log) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

var File_zk_prover_proto protoreflect.FileDescriptor

var file_zk_prover_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x7a, 0x6b, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0b, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x22, 0x1f,
	0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x06, 0x76, 0x30, 0x5f,
	0x30, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x30, 0x30, 0x31, 0x22,
	0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x1f, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x22, 0x40, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x64, 0x0a, 0x1f, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72,
	0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6c, 0x32, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x32, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0xe5, 0x04, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x73, 0x22, 0x95, 0x01, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x42, 0x4f,
	0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x48, 0x41,
	0x4c, 0x54, 0x10, 0x04, 0x22, 0xf7, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x7a, 0x6b, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x47,
	0x65, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x8c, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x47, 0x65, 0x6e, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x47, 0x45, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x47,
	0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x4f,
	0x46, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0xb0,
	0x01, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x5c, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x22, 0xec, 0x03, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x39, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x44, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x7a, 0x6b,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xf7, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x4f, 0x46, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03,
	0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x23,
	0x0a, 0x1f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x4f, 0x46, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x06,
	0x22, 0xcc, 0x04, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5a, 0x0a, 0x10, 0x64, 0x69, 0x66, 0x66,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x69, 0x66, 0x66, 0x4b, 0x65, 0x79, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x64, 0x69, 0x66, 0x66, 0x4b, 0x65, 0x79, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a,
	0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x5a, 0x6b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x6f, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x1a,
	0x41, 0x0a, 0x13, 0x44, 0x69, 0x66, 0x66, 0x4b, 0x65, 0x79, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xca, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x58, 0x45, 0x43,
	0x55, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x05, 0x22,
	0x86, 0x01, 0x0a, 0x0a, 0x5a, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x65, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x69, 0x64, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x65, 0x69, 0x64, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x4b, 0x65, 0x63, 0x63,
	0x61, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x69, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x72, 0x69, 0x74, 0x68, 0x22, 0x81, 0x03, 0x0a, 0x0c, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x6c, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x2d, 0x0a, 0x13, 0x6f, 0x6c, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x69,
	0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x6c,
	0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x48, 0x61, 0x73, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x74, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x65, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x20, 0x0a, 0x06,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x22, 0x67,
	0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x5f, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x41,
	0x12, 0x2c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x62, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x63, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x22, 0xaa, 0x03, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x32, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x32, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x62, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x02, 0x64, 0x62, 0x12, 0x5e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42,
	0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x35, 0x0a, 0x07, 0x44, 0x62, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44,
	0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79, 0x74, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x75, 0x0a, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x0c,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x54, 0x0a, 0x20, 0x53,
	0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x73, 0x22, 0xf0, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x6f,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x24,
	0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x7a,
	0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x74, 0x6f, 0x22, 0xaf, 0x01, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74,
	0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x32, 0x85, 0x04, 0x0a, 0x0f, 0x5a, 0x4b, 0x50, 0x72, 0x6f,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x08, 0x47, 0x65, 0x6e, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1c, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x1a, 0x2e,
	0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x7a, 0x6b, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1c, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4a, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x12, 0x1b, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x79, 0x0a, 0x18, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69,
	0x7a, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12,
	0x2c, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x10,
	0x5a, 0x0e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zk_prover_proto_rawDescOnce sync.Once
	file_zk_prover_proto_rawDescData = file_zk_prover_proto_rawDesc
)

func file_zk_prover_proto_rawDescGZIP() []byte {
	file_zk_prover_proto_rawDescOnce.Do(func() {
		file_zk_prover_proto_rawDescData = protoimpl.X.CompressGZIP(file_zk_prover_proto_rawDescData)
	})
	return file_zk_prover_proto_rawDescData
}

var file_zk_prover_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_zk_prover_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_zk_prover_proto_goTypes = []interface{}{
	(GetStatusResponse_StatusProver)(0),      // 0: zkprover.v1.GetStatusResponse.StatusProver
	(GenProofResponse_ResultGenProof)(0),     // 1: zkprover.v1.GenProofResponse.ResultGenProof
	(CancelResponse_ResultCancel)(0),         // 2: zkprover.v1.CancelResponse.ResultCancel
	(GetProofResponse_ResultGetProof)(0),     // 3: zkprover.v1.GetProofResponse.ResultGetProof
	(ExecuteResponse_ResultExecute)(0),       // 4: zkprover.v1.ExecuteResponse.ResultExecute
	(*Version)(nil),                          // 5: zkprover.v1.Version
	(*GetStatusRequest)(nil),                 // 6: zkprover.v1.GetStatusRequest
	(*GenProofRequest)(nil),                  // 7: zkprover.v1.GenProofRequest
	(*CancelRequest)(nil),                    // 8: zkprover.v1.CancelRequest
	(*GetProofRequest)(nil),                  // 9: zkprover.v1.GetProofRequest
	(*ExecuteRequest)(nil),                   // 10: zkprover.v1.ExecuteRequest
	(*SynchronizeBatchProposalRequest)(nil),  // 11: zkprover.v1.SynchronizeBatchProposalRequest
	(*GetStatusResponse)(nil),                // 12: zkprover.v1.GetStatusResponse
	(*GenProofResponse)(nil),                 // 13: zkprover.v1.GenProofResponse
	(*CancelResponse)(nil),                   // 14: zkprover.v1.CancelResponse
	(*GetProofResponse)(nil),                 // 15: zkprover.v1.GetProofResponse
	(*ExecuteResponse)(nil),                  // 16: zkprover.v1.ExecuteResponse
	(*ZkCounters)(nil),                       // 17: zkprover.v1.ZkCounters
	(*PublicInputs)(nil),                     // 18: zkprover.v1.PublicInputs
	(*ProofB)(nil),                           // 19: zkprover.v1.ProofB
	(*Proof)(nil),                            // 20: zkprover.v1.Proof
	(*InputProver)(nil),                      // 21: zkprover.v1.InputProver
	(*PublicInputsExtended)(nil),             // 22: zkprover.v1.PublicInputsExtended
	(*SynchronizeBatchProposalResponse)(nil), // 23: zkprover.v1.SynchronizeBatchProposalResponse
	(*Receipt)(nil),                          // 24: zkprover.v1.Receipt
	(*Log)(nil),                              // 25: zkprover.v1.Log
	nil,                                      // 26: zkprover.v1.ExecuteResponse.DiffKeysValuesEntry
	nil,                                      // 27: zkprover.v1.InputProver.DbEntry
	nil,                                      // 28: zkprover.v1.InputProver.ContractsBytecodeEntry
}
var file_zk_prover_proto_depIdxs = []int32{
	21, // 0: zkprover.v1.GenProofRequest.input:type_name -> zkprover.v1.InputProver
	21, // 1: zkprover.v1.ExecuteRequest.input:type_name -> zkprover.v1.InputProver
	0,  // 2: zkprover.v1.GetStatusResponse.state:type_name -> zkprover.v1.GetStatusResponse.StatusProver
	1,  // 3: zkprover.v1.GenProofResponse.result:type_name -> zkprover.v1.GenProofResponse.ResultGenProof
	2,  // 4: zkprover.v1.CancelResponse.result:type_name -> zkprover.v1.CancelResponse.ResultCancel
	20, // 5: zkprover.v1.GetProofResponse.proof:type_name -> zkprover.v1.Proof
	22, // 6: zkprover.v1.GetProofResponse.public:type_name -> zkprover.v1.PublicInputsExtended
	3,  // 7: zkprover.v1.GetProofResponse.result:type_name -> zkprover.v1.GetProofResponse.ResultGetProof
	4,  // 8: zkprover.v1.ExecuteResponse.result:type_name -> zkprover.v1.ExecuteResponse.ResultExecute
	26, // 9: zkprover.v1.ExecuteResponse.diff_keys_values:type_name -> zkprover.v1.ExecuteResponse.DiffKeysValuesEntry
	17, // 10: zkprover.v1.ExecuteResponse.counters:type_name -> zkprover.v1.ZkCounters
	19, // 11: zkprover.v1.Proof.proof_b:type_name -> zkprover.v1.ProofB
	18, // 12: zkprover.v1.InputProver.public_inputs:type_name -> zkprover.v1.PublicInputs
	27, // 13: zkprover.v1.InputProver.db:type_name -> zkprover.v1.InputProver.DbEntry
	28, // 14: zkprover.v1.InputProver.contracts_bytecode:type_name -> zkprover.v1.InputProver.ContractsBytecodeEntry
	18, // 15: zkprover.v1.PublicInputsExtended.public_inputs:type_name -> zkprover.v1.PublicInputs
	24, // 16: zkprover.v1.SynchronizeBatchProposalResponse.receipts:type_name -> zkprover.v1.Receipt
	25, // 17: zkprover.v1.Receipt.logs:type_name -> zkprover.v1.Log
	6,  // 18: zkprover.v1.ZKProverService.GetStatus:input_type -> zkprover.v1.GetStatusRequest
	7,  // 19: zkprover.v1.ZKProverService.GenProof:input_type -> zkprover.v1.GenProofRequest
	8,  // 20: zkprover.v1.ZKProverService.Cancel:input_type -> zkprover.v1.CancelRequest
	9,  // 21: zkprover.v1.ZKProverService.GetProof:input_type -> zkprover.v1.GetProofRequest
	10, // 22: zkprover.v1.ZKProverService.Execute:input_type -> zkprover.v1.ExecuteRequest
	11, // 23: zkprover.v1.ZKProverService.SynchronizeBatchProposal:input_type -> zkprover.v1.SynchronizeBatchProposalRequest
	12, // 24: zkprover.v1.ZKProverService.GetStatus:output_type -> zkprover.v1.GetStatusResponse
	13, // 25: zkprover.v1.ZKProverService.GenProof:output_type -> zkprover.v1.GenProofResponse
	14, // 26: zkprover.v1.ZKProverService.Cancel:output_type -> zkprover.v1.CancelResponse
	15, // 27: zkprover.v1.ZKProverService.GetProof:output_type -> zkprover.v1.GetProofResponse
	16, // 28: zkprover.v1.ZKProverService.Execute:output_type -> zkprover.v1.ExecuteResponse
	23, // 29: zkprover.v1.ZKProverService.SynchronizeBatchProposal:output_type -> zkprover.v1.SynchronizeBatchProposalResponse
	24, // [24:30] is the sub-list for method output_type
	18, // [18:24] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_zk_prover_proto_init() }
func file_zk_prover_proto_init() {
	if File_zk_prover_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zk_prover_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zk_prover_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zk_prover_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zk_prover_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zk_prover_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zk_prover_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zk_prover_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynchronizeBatchProposalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zk_prover_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zk_prover_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zk_prover_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zk_prover_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zk_prover_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zk_prover_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zk_prover_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicInputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zk_prover_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zk_prover_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zk_prover_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputProver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zk_prover_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicInputsExtended); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zk_prover_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynchronizeBatchProposalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zk_prover_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Receipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zk_prover_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zk_prover_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zk_prover_proto_goTypes,
		DependencyIndexes: file_zk_prover_proto_depIdxs,
		EnumInfos:         file_zk_prover_proto_enumTypes,
		MessageInfos:      file_zk_prover_proto_msgTypes,
	}.Build()
	File_zk_prover_proto = out.File
	file_zk_prover_proto_rawDesc = nil
	file_zk_prover_proto_goTypes = nil
	file_zk_prover_proto_depIdxs = nil
}
