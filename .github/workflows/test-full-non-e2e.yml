---
name: Test non-e2e
on:
  push:
    branches:
      - main
      - master
      - develop
      - update-external-dependencies
      - 'release/**'
  pull_request:
  repository_dispatch:
    types: [ok-to-test-command]

jobs:
  trusted-test-full-non-e2e:
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    strategy:
      matrix:
        go-version: [ 1.19.x ]
        goarch: [ "amd64" ]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ matrix.go-version }}
      env:
        GOARCH: ${{ matrix.goarch }}

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Compile SCs
      run: make compile-scs
      working-directory: test

    - name: Test
      env:
        ZKPROVER_URI: 127.0.0.1
      run: make test-full-non-e2e
      working-directory: test

  from-fork-test-full-non-e2e:
    if:
      github.event_name == 'repository_dispatch' &&
      github.event.client_payload.slash_command.sha != '' &&
      contains(github.event.client_payload.pull_request.head.sha, github.event.client_payload.slash_command.sha)
    strategy:
      matrix:
        go-version: [ 1.19.x ]
        goarch: [ "amd64" ]
    runs-on: ubuntu-latest
    steps:
    - name: Fork based /ok-to-test checkout
      uses: actions/checkout@v3
      with:
        ref: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'

    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ matrix.go-version }}
      env:
        GOARCH: ${{ matrix.goarch }}

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker
      run: make build-docker

    - name: Compile SCs
      run: make compile-scs
      working-directory: test

    - name: Test
      env:
        ZKPROVER_URI: 127.0.0.1
      run: make test-full-non-e2e
      working-directory: test

    # Update check run
    - uses: actions/github-script@v5
      id: update-check-run
      if: ${{ always() }}
      env:
        number: ${{ github.event.client_payload.pull_request.number }}
        job: ${{ github.job }}
        conclusion: ${{ job.status }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: pull } = await github.rest.pulls.get({
            ...context.repo,
            pull_number: process.env.number
          });
          const ref = pull.head.sha;
          const { data: checks } = await github.rest.checks.listForRef({
            ...context.repo,
            ref
          });
          const check = checks.check_runs.filter(c => c.name === process.env.job);
          const { data: result } = await github.rest.checks.update({
            ...context.repo,
            check_run_id: check[0].id,
            status: 'completed',
            conclusion: process.env.conclusion
          });
          return result;
