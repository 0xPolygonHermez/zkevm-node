package compilesc_test

import (
	"testing"

	"github.com/hermeznetwork/hermez-core/scripts/cmd/compilesc"
	"github.com/hermeznetwork/hermez-core/test/utils"
	"github.com/spf13/afero"
	"github.com/stretchr/testify/require"
)

func Test_Compile(t *testing.T) {
	aferoFs := afero.NewMemMapFs()

	subject := compilesc.NewManager(aferoFs)

	tcs := []struct {
		description    string
		files          map[string]string
		input          string
		expected       *compilesc.Output
		expectedErr    bool
		expectedErrMsg string
	}{
		{
			description: "basic smart contract",
			files: map[string]string{
				"/a/b/contract.sol": `// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract Double {
  function double(int a) public pure returns(int) {
	  return 2*a;
	}
}`,
			},
			input: "/a/b/contract.sol",
			expected: &compilesc.Output{
				Contracts: compilesc.Contracts{
					"<stdin>:Double": compilesc.Result{
						Bin: "608060405234801561001057600080fd5b50610284806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636ffa1caa14610030575b600080fd5b61004a600480360381019061004591906100b1565b610060565b60405161005791906100ed565b60405180910390f35b600081600261006f9190610137565b9050919050565b600080fd5b6000819050919050565b61008e8161007b565b811461009957600080fd5b50565b6000813590506100ab81610085565b92915050565b6000602082840312156100c7576100c6610076565b5b60006100d58482850161009c565b91505092915050565b6100e78161007b565b82525050565b600060208201905061010260008301846100de565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101428261007b565b915061014d8361007b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561018c5761018b610108565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156101c9576101c8610108565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561020657610205610108565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561024357610242610108565b5b82820290509291505056fea2646970667358221220a86778e766ae1f261dff14b15d99d99b7606646b1128bda6c80e061cce70dc8d64736f6c634300080c0033",
					},
				},
			},
		},
		{
			description:    "unexisting file gives error",
			input:          "/a/b/contract.sol",
			expectedErr:    true,
			expectedErrMsg: "open /a/b/contract.sol: file does not exist",
		},
		{
			description: "bad solidity gives error",
			files: map[string]string{
				"/a/b/contract.sol": "not really a solidity file",
			},
			input:          "/a/b/contract.sol",
			expectedErr:    true,
			expectedErrMsg: "exit status 1",
		},
	}

	for _, tc := range tcs {
		tc := tc

		require.NoError(t, utils.CreateTestFiles(aferoFs, tc.files))

		actual, err := subject.Compile(tc.input)
		require.NoError(t, utils.CheckError(err, tc.expectedErr, tc.expectedErrMsg))

		require.Equal(t, tc.expected, actual)

		require.NoError(t, aferoFs.RemoveAll("/a/b"))
	}
}

func Test_Run(t *testing.T) {
	aferoFs := afero.NewMemMapFs()

	subject := compilesc.NewManager(aferoFs)

	tcs := []struct {
		description    string
		initialFiles   map[string]string
		input          string
		expectedFiles  map[string]string
		expectedErr    bool
		expectedErrMsg string
	}{
		{
			description: "valid single file with one contract as input",
			initialFiles: map[string]string{
				"/a/b/contract.sol": `// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract Double {
  function double(int a) public pure returns(int) {
	  return 2*a;
	}
}`,
			},
			input: "/a/b/contract.sol",
			expectedFiles: map[string]string{
				"/a/b/double.bin": "608060405234801561001057600080fd5b50610284806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636ffa1caa14610030575b600080fd5b61004a600480360381019061004591906100b1565b610060565b60405161005791906100ed565b60405180910390f35b600081600261006f9190610137565b9050919050565b600080fd5b6000819050919050565b61008e8161007b565b811461009957600080fd5b50565b6000813590506100ab81610085565b92915050565b6000602082840312156100c7576100c6610076565b5b60006100d58482850161009c565b91505092915050565b6100e78161007b565b82525050565b600060208201905061010260008301846100de565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101428261007b565b915061014d8361007b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561018c5761018b610108565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156101c9576101c8610108565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561020657610205610108565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561024357610242610108565b5b82820290509291505056fea2646970667358221220a86778e766ae1f261dff14b15d99d99b7606646b1128bda6c80e061cce70dc8d64736f6c634300080c0033",
			},
		},
		{
			description: "valid single file with multiple contracts as input",
			initialFiles: map[string]string{
				"/a/b/contract.sol": `// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract Double {
  function double(int a) public pure returns(int) {
	  return 2*a;
	}
}
contract Counter {
    uint public count;

    function increment() external {
        count += 1;
    }
}`,
			},
			input: "/a/b/contract.sol",
			expectedFiles: map[string]string{
				"/a/b/double.bin":  "608060405234801561001057600080fd5b50610284806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636ffa1caa14610030575b600080fd5b61004a600480360381019061004591906100b1565b610060565b60405161005791906100ed565b60405180910390f35b600081600261006f9190610137565b9050919050565b600080fd5b6000819050919050565b61008e8161007b565b811461009957600080fd5b50565b6000813590506100ab81610085565b92915050565b6000602082840312156100c7576100c6610076565b5b60006100d58482850161009c565b91505092915050565b6100e78161007b565b82525050565b600060208201905061010260008301846100de565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101428261007b565b915061014d8361007b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561018c5761018b610108565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156101c9576101c8610108565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561020657610205610108565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561024357610242610108565b5b82820290509291505056fea264697066735822122062b666c663eb3bdd1efc5015ca9575a4ac8ff8e3689bfe67a25038f93ac52ee464736f6c634300080c0033",
				"/a/b/counter.bin": "608060405234801561001057600080fd5b50610173806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306661abd1461003b578063d09de08a14610059575b600080fd5b610043610063565b604051610050919061009d565b60405180910390f35b610061610069565b005b60005481565b600160008082825461007b91906100e7565b92505081905550565b6000819050919050565b61009781610084565b82525050565b60006020820190506100b2600083018461008e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006100f282610084565b91506100fd83610084565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610132576101316100b8565b5b82820190509291505056fea2646970667358221220991ed8a840de407124ef79aad24ae98f0024fe607ecda1fef9523bc270e085bf64736f6c634300080c0033",
			},
		},
		{
			description:    "unexisting single file as input causes error",
			input:          "/a/b/contract.sol",
			expectedErr:    true,
			expectedErrMsg: "open /a/b/contract.sol: file does not exist",
		},
		{
			description: "invalid single file as input causes error",
			initialFiles: map[string]string{
				"/a/b/contract.sol": "not really a solidity file...",
			},
			input:          "/a/b/contract.sol",
			expectedErr:    true,
			expectedErrMsg: "exit status 1",
		},
		{
			description: "directory as input with valid files",
			initialFiles: map[string]string{
				"/a/b/contract1.sol": `// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract Double {
  function double(int a) public pure returns(int) {
	  return 2*a;
	}
}`,
				"/a/b/subdir/contract2.sol": `contract Counter {
    uint public count;

    function increment() external {
        count += 1;
    }
}`,
			},
			input: "/a/b",
			expectedFiles: map[string]string{
				"/a/b/double.bin":         "608060405234801561001057600080fd5b50610284806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636ffa1caa14610030575b600080fd5b61004a600480360381019061004591906100b1565b610060565b60405161005791906100ed565b60405180910390f35b600081600261006f9190610137565b9050919050565b600080fd5b6000819050919050565b61008e8161007b565b811461009957600080fd5b50565b6000813590506100ab81610085565b92915050565b6000602082840312156100c7576100c6610076565b5b60006100d58482850161009c565b91505092915050565b6100e78161007b565b82525050565b600060208201905061010260008301846100de565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101428261007b565b915061014d8361007b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561018c5761018b610108565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156101c9576101c8610108565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561020657610205610108565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561024357610242610108565b5b82820290509291505056fea2646970667358221220a86778e766ae1f261dff14b15d99d99b7606646b1128bda6c80e061cce70dc8d64736f6c634300080c0033",
				"/a/b/subdir/counter.bin": "608060405234801561001057600080fd5b50610173806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306661abd1461003b578063d09de08a14610059575b600080fd5b610043610063565b604051610050919061009d565b60405180910390f35b610061610069565b005b60005481565b600160008082825461007b91906100e7565b92505081905550565b6000819050919050565b61009781610084565b82525050565b60006020820190506100b2600083018461008e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006100f282610084565b91506100fd83610084565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610132576101316100b8565b5b82820190509291505056fea264697066735822122043e2da8f7e7a87fd63252e66fbd313aa476d53876103fc40572b6aec9532395564736f6c634300080c0033",
			},
		},
		{
			description: "directory as input with one invalid file",
			initialFiles: map[string]string{
				"/a/b/contract1.sol": `// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract Double {
  function double(int a) public pure returns(int) {
	  return 2*a;
	}
}`,
				"/a/b/subdir1/contract2.sol": "not a valid file",
				"/a/b/subdir2/contract3.sol": `contract Counter {
    uint public count;

    function increment() external {
        count += 1;
    }
}`,
			},
			input: "/a/b",
			expectedFiles: map[string]string{
				"/a/b/double.bin": "608060405234801561001057600080fd5b50610284806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636ffa1caa14610030575b600080fd5b61004a600480360381019061004591906100b1565b610060565b60405161005791906100ed565b60405180910390f35b600081600261006f9190610137565b9050919050565b600080fd5b6000819050919050565b61008e8161007b565b811461009957600080fd5b50565b6000813590506100ab81610085565b92915050565b6000602082840312156100c7576100c6610076565b5b60006100d58482850161009c565b91505092915050565b6100e78161007b565b82525050565b600060208201905061010260008301846100de565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101428261007b565b915061014d8361007b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561018c5761018b610108565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156101c9576101c8610108565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561020657610205610108565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561024357610242610108565b5b82820290509291505056fea2646970667358221220a86778e766ae1f261dff14b15d99d99b7606646b1128bda6c80e061cce70dc8d64736f6c634300080c0033",
			},
			expectedErr:    true,
			expectedErrMsg: "exit status 1",
		},
		{
			description:    "unexisting directory as input",
			input:          "/a/b",
			expectedErr:    true,
			expectedErrMsg: "open /a/b: file does not exist",
		},
		{
			description: "directory as input with valid camelcased contracts",
			initialFiles: map[string]string{
				"/a/b/contract1.sol": `// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract DoubleBouble {
  function double(int a) public pure returns(int) {
	  return 2*a;
	}
}`,
			},
			input: "/a/b",
			expectedFiles: map[string]string{
				"/a/b/doubleBouble.bin": "608060405234801561001057600080fd5b50610284806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636ffa1caa14610030575b600080fd5b61004a600480360381019061004591906100b1565b610060565b60405161005791906100ed565b60405180910390f35b600081600261006f9190610137565b9050919050565b600080fd5b6000819050919050565b61008e8161007b565b811461009957600080fd5b50565b6000813590506100ab81610085565b92915050565b6000602082840312156100c7576100c6610076565b5b60006100d58482850161009c565b91505092915050565b6100e78161007b565b82525050565b600060208201905061010260008301846100de565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101428261007b565b915061014d8361007b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561018c5761018b610108565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156101c9576101c8610108565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561020657610205610108565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561024357610242610108565b5b82820290509291505056fea26469706673582212202d28d43a21a1bb2f6d0f6268946f64ad0e939c506e83a021c2cb649b429a18e564736f6c634300080c0033",
			},
		},
	}

	for _, tc := range tcs {
		tc := tc

		require.NoError(t, utils.CreateTestFiles(aferoFs, tc.initialFiles))

		err := subject.Run(tc.input)
		require.NoError(t, utils.CheckError(err, tc.expectedErr, tc.expectedErrMsg))

		for path, expectedContent := range tc.expectedFiles {
			actualContent, err := afero.ReadFile(aferoFs, path)
			require.NoError(t, err)
			require.Equal(t, expectedContent, string(actualContent))
		}

		require.NoError(t, aferoFs.RemoveAll("/a/b"))
	}
}
