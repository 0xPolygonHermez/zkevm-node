// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package proofofefficiency

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ProofOfEfficiencyBatchData is an auto generated low-level Go binding around an user-defined struct.
type ProofOfEfficiencyBatchData struct {
	Transactions       []byte
	GlobalExitRoot     [32]byte
	Timestamp          uint64
	MinForcedTimestamp uint64
}

// ProofOfEfficiencyForceBatchData is an auto generated low-level Go binding around an user-defined struct.
type ProofOfEfficiencyForceBatchData struct {
	Transactions       []byte
	GlobalExitRoot     [32]byte
	MinForcedTimestamp uint64
}

// ProofofefficiencyMetaData contains all meta data concerning the Proofofefficiency contract.
var ProofofefficiencyMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyStateActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyStateDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"forceBatchNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"lastGlobalExitRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sequencer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"transactions\",\"type\":\"bytes\"}],\"name\":\"ForceBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"storedStateRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"provedStateRoot\",\"type\":\"bytes32\"}],\"name\":\"ProofDifferentState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"numBatch\",\"type\":\"uint64\"}],\"name\":\"SequenceBatches\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"numBatch\",\"type\":\"uint64\"}],\"name\":\"SequenceForceBatches\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newForceBatchAllowed\",\"type\":\"bool\"}],\"name\":\"SetForceBatchAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSecurityCouncil\",\"type\":\"address\"}],\"name\":\"SetSecurityCouncil\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTrustedSequencer\",\"type\":\"address\"}],\"name\":\"SetTrustedSequencer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newTrustedSequencerURL\",\"type\":\"string\"}],\"name\":\"SetTrustedSequencerURL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"numBatch\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"VerifyBatches\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FORCE_BATCH_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BATCH_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRUSTED_SEQUENCER_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateEmergencyState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"batchNumToStateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeAddress\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateForceProverFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateRewardPerBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainID\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateEmergencyState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"transactions\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maticAmount\",\"type\":\"uint256\"}],\"name\":\"forceBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceBatchAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"forcedBatches\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"initNumBatch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"finalNewBatch\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"newLocalExitRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newStateRoot\",\"type\":\"bytes32\"}],\"name\":\"getInputSnarkBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalExitRootManager\",\"outputs\":[{\"internalType\":\"contractIGlobalExitRootManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIGlobalExitRootManager\",\"name\":\"_globalExitRootManager\",\"type\":\"address\"},{\"internalType\":\"contractIERC20Upgradeable\",\"name\":\"_matic\",\"type\":\"address\"},{\"internalType\":\"contractIVerifierRollup\",\"name\":\"_rollupVerifier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"genesisRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_trustedSequencer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_forceBatchAllowed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_trustedSequencerURL\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_chainID\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"_networkName\",\"type\":\"string\"},{\"internalType\":\"contractIBridge\",\"name\":\"_bridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_securityCouncil\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEmergencyState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBatchSequenced\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastForceBatch\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastForceBatchSequenced\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastVerifiedBatch\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matic\",\"outputs\":[{\"internalType\":\"contractIERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"initNumBatch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"finalNewBatch\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"newLocalExitRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newStateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"proofA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"proofB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"proofC\",\"type\":\"uint256[2]\"}],\"name\":\"proofDifferentState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupVerifier\",\"outputs\":[{\"internalType\":\"contractIVerifierRollup\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"securityCouncil\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"transactions\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"globalExitRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minForcedTimestamp\",\"type\":\"uint64\"}],\"internalType\":\"structProofOfEfficiency.BatchData[]\",\"name\":\"batches\",\"type\":\"tuple[]\"}],\"name\":\"sequenceBatches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"transactions\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"globalExitRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"minForcedTimestamp\",\"type\":\"uint64\"}],\"internalType\":\"structProofOfEfficiency.ForceBatchData[]\",\"name\":\"batches\",\"type\":\"tuple[]\"}],\"name\":\"sequenceForceBatches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"sequencedBatches\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newForceBatchAllowed\",\"type\":\"bool\"}],\"name\":\"setForceBatchAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSecurityCouncil\",\"type\":\"address\"}],\"name\":\"setSecurityCouncil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTrustedSequencer\",\"type\":\"address\"}],\"name\":\"setTrustedSequencer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newTrustedSequencerURL\",\"type\":\"string\"}],\"name\":\"setTrustedSequencerURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedSequencer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedSequencerURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"initNumBatch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"finalNewBatch\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"newLocalExitRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newStateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"proofA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"proofB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"proofC\",\"type\":\"uint256[2]\"}],\"name\":\"verifyBatches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50614f4e806100206000396000f3fe608060405234801561001057600080fd5b50600436106102c85760003560e01c80638c4a0af71161017b578063cfa8ed47116100d8578063e7a7ed021161008c578063eaeb077b11610071578063eaeb077b14610687578063f2fde38b1461069a578063f7552761146106ad57600080fd5b8063e7a7ed0214610637578063e8bf92ed1461066757600080fd5b8063d8d1091b116100bd578063d8d1091b146105ef578063d8f54db014610602578063dbc169761461062f57600080fd5b8063cfa8ed47146105a3578063d02103ca146105cf57600080fd5b8063adc879e91161012f578063b4d63f5811610114578063b4d63f581461054b578063b6b0b0971461056b578063c89e42df1461059057600080fd5b8063adc879e91461052e578063b02286c01461054257600080fd5b806399f5634e1161016057806399f5634e146104fc578063a3c573eb14610504578063ab9fc5ef1461052457600080fd5b80638c4a0af7146104cb5780638da5cb5b146104de57600080fd5b8063542028d511610229578063715018a6116101dd57806379847057116101c2578063798470571461049c5780637fcb3653146104a457806381df7d3f146104b857600080fd5b8063715018a6146104815780637152facf1461048957600080fd5b80636766f09d1161020e5780636766f09d1461043b5780636b8616ce1461044e5780636ff512cc1461046e57600080fd5b8063542028d51461042057806355b925e61461042857600080fd5b806327eb6c0f11610280578063423fa85611610265578063423fa856146103aa57806345605267146103ca5780635392c5e0146103f257600080fd5b806327eb6c0f146103525780633c1582671461039757600080fd5b806319d8ac61116102b157806319d8ac61146103085780631c1083e2146103355780632072f6c51461034a57600080fd5b8063107bf28c146102cd57806315064c96146102eb575b600080fd5b6102d56106bc565b6040516102e29190614399565b60405180910390f35b6065546102f89060ff1681565b60405190151581526020016102e2565b60685461031c9067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016102e2565b6103486103433660046143de565b61074a565b005b610348610870565b6070546103729073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102e2565b6103486103a536600461458f565b61093b565b60685461031c9068010000000000000000900467ffffffffffffffff1681565b60685461031c90700100000000000000000000000000000000900467ffffffffffffffff1681565b6104126104003660046146c4565b606b6020526000908152604090205481565b6040519081526020016102e2565b6102d5611320565b6103486104363660046146f6565b61132d565b6103486104493660046146f6565b611978565b61041261045c3660046146c4565b60666020526000908152604090205481565b61034861047c3660046143de565b612078565b6103486121ac565b6102d5610497366004614779565b6121be565b610412612428565b60695461031c9067ffffffffffffffff1681565b6103486104c63660046147d4565b6124a2565b6103486104d93660046148ce565b612815565b60335473ffffffffffffffffffffffffffffffffffffffff16610372565b610412612949565b6071546103729073ffffffffffffffffffffffffffffffffffffffff1681565b61031c62093a8081565b606e5461031c9067ffffffffffffffff1681565b61041261ea6081565b6104126105593660046146c4565b60676020526000908152604090205481565b60655461037290610100900473ffffffffffffffffffffffffffffffffffffffff1681565b61034861059e3660046148eb565b612a7a565b6069546103729068010000000000000000900473ffffffffffffffffffffffffffffffffffffffff1681565b606a546103729073ffffffffffffffffffffffffffffffffffffffff1681565b6103486105fd366004614928565b612b69565b6069546102f8907c0100000000000000000000000000000000000000000000000000000000900460ff1681565b6103486132c8565b60685461031c907801000000000000000000000000000000000000000000000000900467ffffffffffffffff1681565b606c546103729073ffffffffffffffffffffffffffffffffffffffff1681565b610348610695366004614a39565b61348b565b6103486106a83660046143de565b613a11565b61041267016345785d8a000081565b606f80546106c990614a7e565b80601f01602080910402602001604051908101604052809291908181526020018280546106f590614a7e565b80156107425780601f1061071757610100808354040283529160200191610742565b820191906000526020600020905b81548152906001019060200180831161072557829003601f168201915b505050505081565b60705473ffffffffffffffffffffffffffffffffffffffff1633146107f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f50726f6f664f66456666696369656e63793a3a6f6e6c7953656375726974794360448201527f6f756e63696c3a206f6e6c7920736563757269747920636f756e63696c00000060648201526084015b60405180910390fd5b607080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f373a9d1d60f01a33ff86d540991f09f5c5d7482656794de80be077c5eb9693d9906020015b60405180910390a150565b60655460ff1615610929576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f456d657267656e63794d616e616765723a3a69664e6f74456d657267656e637960448201527f53746174653a206f6e6c79206966206e6f7420656d657267656e63792073746160648201527f7465000000000000000000000000000000000000000000000000000000000000608482015260a4016107ed565b610931613ac8565b610939613b49565b565b60655460ff16156109f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f456d657267656e63794d616e616765723a3a69664e6f74456d657267656e637960448201527f53746174653a206f6e6c79206966206e6f7420656d657267656e63792073746160648201527f7465000000000000000000000000000000000000000000000000000000000000608482015260a4016107ed565b60695468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff163314610aa7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f50726f6f664f66456666696369656e63793a3a6f6e6c7954727573746564536560448201527f7175656e6365723a206f6e6c7920747275737465642073657175656e6365720060648201526084016107ed565b805160685467ffffffffffffffff680100000000000000008204811660008181526067602052604081205483851694929370010000000000000000000000000000000090930490921691905b858110156110f7576000878281518110610b0f57610b0f614ad1565b602002602001015190506000816060015167ffffffffffffffff161115610d7a5783610b3a81614b2f565b945050600081600001518051906020012082602001518360600151604051602001610b9d93929190928352602083019190915260c01b7fffffffffffffffff00000000000000000000000000000000000000000000000016604082015260480190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152815160209283012067ffffffffffffffff8816600090815260669093529120549091508114610ca2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f50726f6f664f66456666696369656e63793a3a73657175656e6365426174636860448201527f65733a20466f7263656420626174636865732064617461206d757374206d617460648201527f6368000000000000000000000000000000000000000000000000000000000000608482015260a4016107ed565b816060015167ffffffffffffffff16826040015167ffffffffffffffff161015610d74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605d60248201527f50726f6f664f66456666696369656e63793a3a73657175656e6365426174636860448201527f65733a20466f7263656420626174636865732074696d657374616d70206d757360648201527f7420626520626967676572206f7220657175616c207468616e206d696e000000608482015260a4016107ed565b50610f48565b60208101511580610e295750606a5460208201516040517f257b363200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9092169163257b363291610de39160040190815260200190565b6020604051808303816000875af1158015610e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e269190614b56565b15155b610eb5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f50726f6f664f66456666696369656e63793a3a73657175656e6365426174636860448201527f65733a20476c6f62616c206578697420726f6f74206d7573742065786973740060648201526084016107ed565b80515161ea6011610f48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f50726f6f664f66456666696369656e63793a3a73657175656e6365426174636860448201527f65733a205472616e73616374696f6e73206279746573206f766572666c6f770060648201526084016107ed565b8567ffffffffffffffff16816040015167ffffffffffffffff1610158015610f7e575042816040015167ffffffffffffffff1611155b611030576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f50726f6f664f66456666696369656e63793a3a73657175656e6365426174636860448201527f65733a2054696d657374616d70206d75737420626520696e736964652072616e60648201527f6765000000000000000000000000000000000000000000000000000000000000608482015260a4016107ed565b805180516020918201208183015160408085015181519485018890529084019290925260608084019190915260c09190911b7fffffffffffffffff00000000000000000000000000000000000000000000000016608083015233901b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166088820152609c0160405160208183030381529060405280519060200120925084806110d990614b2f565b955050806040015195505080806110ef90614b6f565b915050610af3565b5060685467ffffffffffffffff7801000000000000000000000000000000000000000000000000909104811690831611156111b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f50726f6f664f66456666696369656e63793a3a73657175656e6365426174636860448201527f65733a20466f7263652062617463686573206f766572666c6f7700000000000060648201526084016107ed565b6068546000906111e290700100000000000000000000000000000000900467ffffffffffffffff1684614ba7565b6111f69067ffffffffffffffff1687614bd0565b6068805467ffffffffffffffff868116700100000000000000000000000000000000027fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff8983166801000000000000000081027fffffffffffffffffffffffffffffffff00000000000000000000000000000000909516938c1693909317939093179290921691909117909155600090815260676020526040902083905590506112d333306112ad8467016345785d8a0000614be7565b606554610100900473ffffffffffffffffffffffffffffffffffffffff16929190613bd3565b6068546040516801000000000000000090910467ffffffffffffffff16907f303446e6a8cb73c83dff421c0b1d5e5ce0719dab1bff13660fc254e58cc17fce90600090a250505050505050565b606d80546106c990614a7e565b60655460ff16156113e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f456d657267656e63794d616e616765723a3a69664e6f74456d657267656e637960448201527f53746174653a206f6e6c79206966206e6f7420656d657267656e63792073746160648201527f7465000000000000000000000000000000000000000000000000000000000000608482015260a4016107ed565b60695467ffffffffffffffff90811690881611156114ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605b60248201527f50726f6f664f66456666696369656e63793a3a7665726966794261746368657360448201527f3a20696e69744e756d4261746368206d757374206265206c657373206f72206560648201527f7175616c207468616e206c617374566572696669656442617463680000000000608482015260a4016107ed565b60695467ffffffffffffffff90811690871611611571576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605560248201527f50726f6f664f66456666696369656e63793a3a7665726966794261746368657360448201527f3a2066696e616c4e65774261746368206d75737420626520626967676572207460648201527f68616e206c617374566572696669656442617463680000000000000000000000608482015260a4016107ed565b67ffffffffffffffff87166000908152606b602052604090205461163d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604860248201527f50726f6f664f66456666696369656e63793a3a7665726966794261746368657360448201527f3a20696e69744e756d426174636820737461746520726f6f7420646f6573206e60648201527f6f74206578697374000000000000000000000000000000000000000000000000608482015260a4016107ed565b600061164b888888886121be565b905060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016002836040516116809190614c24565b602060405180830381855afa15801561169d573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906116c09190614b56565b6116ca9190614c6f565b606c546040805160208101825283815290517f43753b4d00000000000000000000000000000000000000000000000000000000815292935073ffffffffffffffffffffffffffffffffffffffff909116916343753b4d916117349189918991899190600401614c83565b602060405180830381865afa158015611751573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117759190614cfd565b611801576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f50726f6f664f66456666696369656e63793a3a7665726966794261746368657360448201527f3a20494e56414c49445f50524f4f46000000000000000000000000000000000060648201526084016107ed565b60695461185f90339061181e9067ffffffffffffffff168b614ba7565b67ffffffffffffffff16611830612949565b61183a9190614be7565b606554610100900473ffffffffffffffffffffffffffffffffffffffff169190613caf565b606980547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff8a169081179091556000908152606b602052604090819020879055606a5490517f33d6247d0000000000000000000000000000000000000000000000000000000081526004810189905273ffffffffffffffffffffffffffffffffffffffff909116906333d6247d90602401600060405180830381600087803b15801561191457600080fd5b505af1158015611928573d6000803e3d6000fd5b505060405188815233925067ffffffffffffffff8b1691507f9c72852172521097ba7e1482e6b44b351323df0155f97f4ea18fcec28e1f59669060200160405180910390a3505050505050505050565b60655460ff1615611a31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f456d657267656e63794d616e616765723a3a69664e6f74456d657267656e637960448201527f53746174653a206f6e6c79206966206e6f7420656d657267656e63792073746160648201527f7465000000000000000000000000000000000000000000000000000000000000608482015260a4016107ed565b8567ffffffffffffffff168767ffffffffffffffff1610611afa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605660248201527f50726f6f664f66456666696369656e63793a3a70726f6f66446966666572656e60448201527f7453746174653a2066696e616c4e65774261746368206d75737420626520626960648201527f67676572207468616e20696e69744e756d426174636800000000000000000000608482015260a4016107ed565b60695467ffffffffffffffff9081169087161115611be6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152606260248201527f50726f6f664f66456666696369656e63793a3a70726f6f66446966666572656e60448201527f7453746174653a2066696e616c4e65774261746368206d757374206265206c6560648201527f7373206f7220657175616c207468616e206c617374566572696669656442617460848201527f636800000000000000000000000000000000000000000000000000000000000060a482015260c4016107ed565b67ffffffffffffffff87166000908152606b6020526040902054611cb2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604e60248201527f50726f6f664f66456666696369656e63793a3a70726f6f66446966666572656e60448201527f7453746174653a20696e69744e756d426174636820737461746520726f6f742060648201527f646f6573206e6f74206578697374000000000000000000000000000000000000608482015260a4016107ed565b67ffffffffffffffff86166000908152606b6020526040902054611d7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604f60248201527f50726f6f664f66456666696369656e63793a3a70726f6f66446966666572656e60448201527f7453746174653a2066696e616c4e6577426174636820737461746520726f6f7460648201527f20646f6573206e6f742065786973740000000000000000000000000000000000608482015260a4016107ed565b6000611d8c888888886121be565b905060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001600283604051611dc19190614c24565b602060405180830381855afa158015611dde573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611e019190614b56565b611e0b9190614c6f565b606c546040805160208101825283815290517f43753b4d00000000000000000000000000000000000000000000000000000000815292935073ffffffffffffffffffffffffffffffffffffffff909116916343753b4d91611e759189918991899190600401614c83565b602060405180830381865afa158015611e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb69190614cfd565b611f42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f50726f6f664f66456666696369656e63793a3a70726f6f66446966666572656e60448201527f7453746174653a20494e56414c49445f50524f4f46000000000000000000000060648201526084016107ed565b67ffffffffffffffff88166000908152606b6020526040902054869003612011576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605960248201527f50726f6f664f66456666696369656e63793a3a70726f6f66446966666572656e60448201527f7453746174653a2073746f72656420726f6f74206d757374206265206469666660648201527f6572656e74207468616e206e657720737461746520726f6f7400000000000000608482015260a4016107ed565b67ffffffffffffffff88166000908152606b60209081526040918290205482519081529081018890527fe579d6d18f02941e1d0f59bff70f1b2c894edc991badab38343786df2846fe55910160405180910390a161206d613b49565b505050505050505050565b60695468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff16331461212b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f50726f6f664f66456666696369656e63793a3a6f6e6c7954727573746564536560448201527f7175656e6365723a206f6e6c7920747275737465642073657175656e6365720060648201526084016107ed565b606980547fffffffff0000000000000000000000000000000000000000ffffffffffffffff166801000000000000000073ffffffffffffffffffffffffffffffffffffffff8416908102919091179091556040519081527ff54144f9611984021529f814a1cb6a41e22c58351510a0d9f7e822618abb9cc090602001610865565b6121b4613ac8565b6109396000613d0a565b67ffffffffffffffff8085166000818152606760205260408082205493871682529020546060929115806121f157508115155b6122a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604560248201527f50726f6f664f66456666696369656e63793a3a676574496e707574536e61726b60448201527f42797465733a206f6c64416363496e7075744861736820646f6573206e6f742060648201527f6578697374000000000000000000000000000000000000000000000000000000608482015260a4016107ed565b80612356576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604560248201527f50726f6f664f66456666696369656e63793a3a676574496e707574536e61726b60448201527f42797465733a206e6577416363496e7075744861736820646f6573206e6f742060648201527f6578697374000000000000000000000000000000000000000000000000000000608482015260a4016107ed565b67ffffffffffffffff87166000908152606b602090815260409182902054606e5492517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b16928101929092526034820152605481018490527fffffffffffffffff00000000000000000000000000000000000000000000000060c08a811b8216607484015292831b8116607c8301526084820187905260a4820184905260c482018890529188901b90911660e482015260ec0160405160208183030381529060405292505050949350505050565b60685460009067ffffffffffffffff7001000000000000000000000000000000008204811691612477917801000000000000000000000000000000000000000000000000909104166001614d1a565b6124819190614ba7565b61249d9067ffffffffffffffff16670de0b6b3a7640000614be7565b905090565b600054610100900460ff16158080156124c25750600054600160ff909116105b806124dc5750303b1580156124dc575060005460ff166001145b612568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107ed565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156125c657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b606a80547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff8f811691909117909255606580547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101008f851602179055606c80549091168c831617905560008052606b6020527fc8cc8bda7ad4886bea3ebbdafa02e79d37c39bf4011696b26a31a0802fd9458b8a9055606980547fffffff000000000000000000000000000000000000000000ffffffffffffffff1668010000000000000000928b16929092027fffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffff16919091177c010000000000000000000000000000000000000000000000000000000089151502179055606d6127058782614d94565b50606e80547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff8716179055606f6127468582614d94565b506071805473ffffffffffffffffffffffffffffffffffffffff8086167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560708054928516929091169190911790556127a4613d81565b801561280757600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050505050565b60695468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff1633146128c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f50726f6f664f66456666696369656e63793a3a6f6e6c7954727573746564536560448201527f7175656e6365723a206f6e6c7920747275737465642073657175656e6365720060648201526084016107ed565b606980548215157c0100000000000000000000000000000000000000000000000000000000027fffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffff9091161790556040517fbacda50a4a8575be1d91a7ebe29ee45056f3a94f12a2281eb6b43afa33bcefe69061086590831515815260200190565b6065546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600091829161010090910473ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156129c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e49190614b56565b60695460685491925060009167ffffffffffffffff91821691680100000000000000008204811691612a499170010000000000000000000000000000000082048116917801000000000000000000000000000000000000000000000000900416614ba7565b612a539190614d1a565b612a5d9190614ba7565b67ffffffffffffffff169050612a738183614eae565b9250505090565b60695468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff163314612b2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f50726f6f664f66456666696369656e63793a3a6f6e6c7954727573746564536560448201527f7175656e6365723a206f6e6c7920747275737465642073657175656e6365720060648201526084016107ed565b606d612b398282614d94565b507f6b8f723a4c7a5335cafae8a598a0aa0301be1387c037dccc085b62add6448b20816040516108659190614399565b60655460ff1615612c22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f456d657267656e63794d616e616765723a3a69664e6f74456d657267656e637960448201527f53746174653a206f6e6c79206966206e6f7420656d657267656e63792073746160648201527f7465000000000000000000000000000000000000000000000000000000000000608482015260a4016107ed565b6069547c0100000000000000000000000000000000000000000000000000000000900460ff161515600114612cff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604860248201527f50726f6f664f66456666696369656e63793a3a6973466f72636542617463684160448201527f6c6c6f7765643a206f6e6c7920696620666f726365206261746368206973206160648201527f7661696c61626c65000000000000000000000000000000000000000000000000608482015260a4016107ed565b805180612db4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f50726f6f664f66456666696369656e63793a3a73657175656e6365466f72636560448201527f42617463683a204d75737420666f726365206174206c6561737420312062617460648201527f6368000000000000000000000000000000000000000000000000000000000000608482015260a4016107ed565b60685467ffffffffffffffff78010000000000000000000000000000000000000000000000008204811691612dff918491700100000000000000000000000000000000900416614ec2565b1115612e8d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f50726f6f664f66456666696369656e63793a3a73657175656e6365466f72636560448201527f42617463683a20466f72636520626174636820696e76616c696400000000000060648201526084016107ed565b60685467ffffffffffffffff680100000000000000008204811660008181526067602052604081205491937001000000000000000000000000000000009004909216915b848110156131f8576000868281518110612eed57612eed614ad1565b602002602001015190508380612f0290614b2f565b825180516020918201208185015160408087015181519485019390935283015260c01b7fffffffffffffffff00000000000000000000000000000000000000000000000016606082015290955060009150606801604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152815160209283012067ffffffffffffffff881660009081526066909352912054909150811461305b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604760248201527f50726f6f664f66456666696369656e63793a3a73657175656e6365466f72636560448201527f426174636865733a20466f7263656420626174636865732064617461206d757360648201527f74206d6174636800000000000000000000000000000000000000000000000000608482015260a4016107ed565b613066600188614bd0565b830361313e574262093a8083604001516130809190614d1a565b67ffffffffffffffff16111561313e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604c60248201527f50726f6f664f66456666696369656e63793a3a73657175656e6365466f72636560448201527f42617463683a20466f72636564206261746368206973206e6f7420696e20746960648201527f6d656f757420706572696f640000000000000000000000000000000000000000608482015260a4016107ed565b8151805160209182012081840151604080519384018890528301919091526060808301919091524260c01b7fffffffffffffffff00000000000000000000000000000000000000000000000016608083015233901b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166088820152609c0160405160208183030381529060405280519060200120935085806131e090614b2f565b965050505080806131f090614b6f565b915050612ed1565b50606880544267ffffffffffffffff9081167fffffffffffffffffffffffffffffffff000000000000000000000000000000009092169190911768010000000000000000868316818102929092177fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff1670010000000000000000000000000000000087851602178455600091825260676020526040808320869055935493519304909116917f648a61dd2438f072f5a1960939abd30f37aea80d2e94c9792ad142d3e0a490a49190a25050505050565b60655460ff1661335a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f456d657267656e63794d616e616765723a3a6966456d657267656e637953746160448201527f74653a206f6e6c7920696620656d657267656e6379207374617465000000000060648201526084016107ed565b60705473ffffffffffffffffffffffffffffffffffffffff163314613401576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f50726f6f664f66456666696369656e63793a3a6f6e6c7953656375726974794360448201527f6f756e63696c3a206f6e6c7920736563757269747920636f756e63696c00000060648201526084016107ed565b607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dbc169766040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561346b57600080fd5b505af115801561347f573d6000803e3d6000fd5b50505050610939613e21565b60655460ff1615613544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f456d657267656e63794d616e616765723a3a69664e6f74456d657267656e637960448201527f53746174653a206f6e6c79206966206e6f7420656d657267656e63792073746160648201527f7465000000000000000000000000000000000000000000000000000000000000608482015260a4016107ed565b6069547c0100000000000000000000000000000000000000000000000000000000900460ff161515600114613621576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604860248201527f50726f6f664f66456666696369656e63793a3a6973466f72636542617463684160448201527f6c6c6f7765643a206f6e6c7920696620666f726365206261746368206973206160648201527f7661696c61626c65000000000000000000000000000000000000000000000000608482015260a4016107ed565b600061362b612428565b9050818111156136bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f50726f6f664f66456666696369656e63793a3a666f72636542617463683a206e60448201527f6f7420656e6f756768206d61746963000000000000000000000000000000000060648201526084016107ed565b61ea6083511061374f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f50726f6f664f66456666696369656e63793a3a666f72636542617463683a205460448201527f72616e73616374696f6e73206279746573206f766572666c6f7700000000000060648201526084016107ed565b60655461377990610100900473ffffffffffffffffffffffffffffffffffffffff16333084613bd3565b606a54604080517f3ed691ef000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691633ed691ef9160048083019260209291908290030181865afa1580156137e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061380d9190614b56565b60688054919250780100000000000000000000000000000000000000000000000090910467ffffffffffffffff1690601861384783614b2f565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050838051906020012081426040516020016138c093929190928352602083019190915260c01b7fffffffffffffffff00000000000000000000000000000000000000000000000016604082015260480190565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815291815281516020928301206068547801000000000000000000000000000000000000000000000000900467ffffffffffffffff16600090815260669093529120553233036139ae57606854604080518381523360208201526060918101829052600091810191909152780100000000000000000000000000000000000000000000000090910467ffffffffffffffff16907ff94bb37db835f1ab585ee00041849a09b12cd081d77fa15ca070757619cbc9319060800160405180910390a2613a0b565b606860189054906101000a900467ffffffffffffffff1667ffffffffffffffff167ff94bb37db835f1ab585ee00041849a09b12cd081d77fa15ca070757619cbc931823387604051613a0293929190614eda565b60405180910390a25b50505050565b613a19613ac8565b73ffffffffffffffffffffffffffffffffffffffff8116613abc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107ed565b613ac581613d0a565b50565b60335473ffffffffffffffffffffffffffffffffffffffff163314610939576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ed565b607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632072f6c56040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613bb357600080fd5b505af1158015613bc7573d6000803e3d6000fd5b50505050610939613f06565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052613a0b9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614015565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052613d059084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401613c2d565b505050565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16613e18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107ed565b61093933613d0a565b60655460ff16613eb3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f456d657267656e63794d616e616765723a3a6966456d657267656e637953746160448201527f74653a206f6e6c7920696620656d657267656e6379207374617465000000000060648201526084016107ed565b606580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556040517f1e5e34eea33501aecf2ebec9fe0e884a40804275ea7fe10b2ba084c8374308b390600090a1565b60655460ff1615613fbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f456d657267656e63794d616e616765723a3a69664e6f74456d657267656e637960448201527f53746174653a206f6e6c79206966206e6f7420656d657267656e63792073746160648201527f7465000000000000000000000000000000000000000000000000000000000000608482015260a4016107ed565b606580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556040517f2261efe5aef6fedc1fd1550b25facc9181745623049c7901287030b9ad1a549790600090a1565b6000614077826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166141219092919063ffffffff16565b805190915015613d0557808060200190518101906140959190614cfd565b613d05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107ed565b6060614130848460008561413a565b90505b9392505050565b6060824710156141cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016107ed565b73ffffffffffffffffffffffffffffffffffffffff85163b61424a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107ed565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516142739190614c24565b60006040518083038185875af1925050503d80600081146142b0576040519150601f19603f3d011682016040523d82523d6000602084013e6142b5565b606091505b50915091506142c58282866142d0565b979650505050505050565b606083156142df575081614133565b8251156142ef5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ed9190614399565b60005b8381101561433e578181015183820152602001614326565b83811115613a0b5750506000910152565b60008151808452614367816020860160208601614323565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000614133602083018461434f565b73ffffffffffffffffffffffffffffffffffffffff81168114613ac557600080fd5b80356143d9816143ac565b919050565b6000602082840312156143f057600080fd5b8135614133816143ac565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561444d5761444d6143fb565b60405290565b6040516060810167ffffffffffffffff8111828210171561444d5761444d6143fb565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156144bd576144bd6143fb565b604052919050565b600067ffffffffffffffff8211156144df576144df6143fb565b5060051b60200190565b600082601f8301126144fa57600080fd5b813567ffffffffffffffff811115614514576145146143fb565b61454560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601614476565b81815284602083860101111561455a57600080fd5b816020850160208301376000918101602001919091529392505050565b803567ffffffffffffffff811681146143d957600080fd5b600060208083850312156145a257600080fd5b823567ffffffffffffffff808211156145ba57600080fd5b818501915085601f8301126145ce57600080fd5b81356145e16145dc826144c5565b614476565b81815260059190911b8301840190848101908883111561460057600080fd5b8585015b838110156146b75780358581111561461c5760008081fd5b86016080818c037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018113156146525760008081fd5b61465a61442a565b898301358881111561466c5760008081fd5b61467a8e8c838701016144e9565b8252506040808401358b8301526060614694818601614577565b828401526146a3848601614577565b908301525085525050918601918601614604565b5098975050505050505050565b6000602082840312156146d657600080fd5b61413382614577565b80604081018310156146f057600080fd5b92915050565b6000806000806000806000610180888a03121561471257600080fd5b61471b88614577565b965061472960208901614577565b955060408801359450606088013593506147468960808a016146df565b925061014088018981111561475a57600080fd5b60c08901925061476a8a826146df565b91505092959891949750929550565b6000806000806080858703121561478f57600080fd5b61479885614577565b93506147a660208601614577565b93969395505050506040820135916060013590565b8015158114613ac557600080fd5b80356143d9816147bb565b60008060008060008060008060008060006101608c8e0312156147f657600080fd5b6147ff8c6143ce565b9a5061480d60208d016143ce565b995061481b60408d016143ce565b985060608c0135975061483060808d016143ce565b965061483e60a08d016147c9565b955067ffffffffffffffff8060c08e0135111561485a57600080fd5b61486a8e60c08f01358f016144e9565b955061487860e08e01614577565b9450806101008e0135111561488c57600080fd5b5061489e8d6101008e01358e016144e9565b92506148ad6101208d016143ce565b91506148bc6101408d016143ce565b90509295989b509295989b9093969950565b6000602082840312156148e057600080fd5b8135614133816147bb565b6000602082840312156148fd57600080fd5b813567ffffffffffffffff81111561491457600080fd5b614920848285016144e9565b949350505050565b6000602080838503121561493b57600080fd5b823567ffffffffffffffff8082111561495357600080fd5b818501915085601f83011261496757600080fd5b81356149756145dc826144c5565b81815260059190911b8301840190848101908883111561499457600080fd5b8585015b838110156146b7578035858111156149b05760008081fd5b86016060818c037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018113156149e65760008081fd5b6149ee614453565b8983013588811115614a005760008081fd5b614a0e8e8c838701016144e9565b8252506040808401358b830152614a26838501614577565b9082015285525050918601918601614998565b60008060408385031215614a4c57600080fd5b823567ffffffffffffffff811115614a6357600080fd5b614a6f858286016144e9565b95602094909401359450505050565b600181811c90821680614a9257607f821691505b602082108103614acb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600067ffffffffffffffff808316818103614b4c57614b4c614b00565b6001019392505050565b600060208284031215614b6857600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614ba057614ba0614b00565b5060010190565b600067ffffffffffffffff83811690831681811015614bc857614bc8614b00565b039392505050565b600082821015614be257614be2614b00565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614c1f57614c1f614b00565b500290565b60008251614c36818460208701614323565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082614c7e57614c7e614c40565b500690565b61012081016040808784376000838201818152879190815b6002811015614cbb57848483379084018281529284019290600101614c9b565b5050828760c0870137610100850181815286935091505b6001811015614cf1578251825260209283019290910190600101614cd2565b50505095945050505050565b600060208284031215614d0f57600080fd5b8151614133816147bb565b600067ffffffffffffffff808316818516808303821115614d3d57614d3d614b00565b01949350505050565b601f821115613d0557600081815260208120601f850160051c81016020861015614d6d5750805b601f850160051c820191505b81811015614d8c57828155600101614d79565b505050505050565b815167ffffffffffffffff811115614dae57614dae6143fb565b614dc281614dbc8454614a7e565b84614d46565b602080601f831160018114614e155760008415614ddf5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555614d8c565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015614e6257888601518255948401946001909101908401614e43565b5085821015614e9e57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b600082614ebd57614ebd614c40565b500490565b60008219821115614ed557614ed5614b00565b500190565b83815273ffffffffffffffffffffffffffffffffffffffff83166020820152606060408201526000614f0f606083018461434f565b9594505050505056fea2646970667358221220ddc9fadd292902261dc9ae528f3ed9df97dd863f634c0f241b811a47a3e6b69b64736f6c634300080f0033",
}

// ProofofefficiencyABI is the input ABI used to generate the binding from.
// Deprecated: Use ProofofefficiencyMetaData.ABI instead.
var ProofofefficiencyABI = ProofofefficiencyMetaData.ABI

// ProofofefficiencyBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ProofofefficiencyMetaData.Bin instead.
var ProofofefficiencyBin = ProofofefficiencyMetaData.Bin

// DeployProofofefficiency deploys a new Ethereum contract, binding an instance of Proofofefficiency to it.
func DeployProofofefficiency(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Proofofefficiency, error) {
	parsed, err := ProofofefficiencyMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ProofofefficiencyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Proofofefficiency{ProofofefficiencyCaller: ProofofefficiencyCaller{contract: contract}, ProofofefficiencyTransactor: ProofofefficiencyTransactor{contract: contract}, ProofofefficiencyFilterer: ProofofefficiencyFilterer{contract: contract}}, nil
}

// Proofofefficiency is an auto generated Go binding around an Ethereum contract.
type Proofofefficiency struct {
	ProofofefficiencyCaller     // Read-only binding to the contract
	ProofofefficiencyTransactor // Write-only binding to the contract
	ProofofefficiencyFilterer   // Log filterer for contract events
}

// ProofofefficiencyCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProofofefficiencyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProofofefficiencyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProofofefficiencyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProofofefficiencyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProofofefficiencyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProofofefficiencySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProofofefficiencySession struct {
	Contract     *Proofofefficiency // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ProofofefficiencyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProofofefficiencyCallerSession struct {
	Contract *ProofofefficiencyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ProofofefficiencyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProofofefficiencyTransactorSession struct {
	Contract     *ProofofefficiencyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ProofofefficiencyRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProofofefficiencyRaw struct {
	Contract *Proofofefficiency // Generic contract binding to access the raw methods on
}

// ProofofefficiencyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProofofefficiencyCallerRaw struct {
	Contract *ProofofefficiencyCaller // Generic read-only contract binding to access the raw methods on
}

// ProofofefficiencyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProofofefficiencyTransactorRaw struct {
	Contract *ProofofefficiencyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProofofefficiency creates a new instance of Proofofefficiency, bound to a specific deployed contract.
func NewProofofefficiency(address common.Address, backend bind.ContractBackend) (*Proofofefficiency, error) {
	contract, err := bindProofofefficiency(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Proofofefficiency{ProofofefficiencyCaller: ProofofefficiencyCaller{contract: contract}, ProofofefficiencyTransactor: ProofofefficiencyTransactor{contract: contract}, ProofofefficiencyFilterer: ProofofefficiencyFilterer{contract: contract}}, nil
}

// NewProofofefficiencyCaller creates a new read-only instance of Proofofefficiency, bound to a specific deployed contract.
func NewProofofefficiencyCaller(address common.Address, caller bind.ContractCaller) (*ProofofefficiencyCaller, error) {
	contract, err := bindProofofefficiency(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencyCaller{contract: contract}, nil
}

// NewProofofefficiencyTransactor creates a new write-only instance of Proofofefficiency, bound to a specific deployed contract.
func NewProofofefficiencyTransactor(address common.Address, transactor bind.ContractTransactor) (*ProofofefficiencyTransactor, error) {
	contract, err := bindProofofefficiency(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencyTransactor{contract: contract}, nil
}

// NewProofofefficiencyFilterer creates a new log filterer instance of Proofofefficiency, bound to a specific deployed contract.
func NewProofofefficiencyFilterer(address common.Address, filterer bind.ContractFilterer) (*ProofofefficiencyFilterer, error) {
	contract, err := bindProofofefficiency(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencyFilterer{contract: contract}, nil
}

// bindProofofefficiency binds a generic wrapper to an already deployed contract.
func bindProofofefficiency(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ProofofefficiencyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Proofofefficiency *ProofofefficiencyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Proofofefficiency.Contract.ProofofefficiencyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Proofofefficiency *ProofofefficiencyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.ProofofefficiencyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Proofofefficiency *ProofofefficiencyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.ProofofefficiencyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Proofofefficiency *ProofofefficiencyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Proofofefficiency.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Proofofefficiency *ProofofefficiencyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Proofofefficiency *ProofofefficiencyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.contract.Transact(opts, method, params...)
}

// FORCEBATCHTIMEOUT is a free data retrieval call binding the contract method 0xab9fc5ef.
//
// Solidity: function FORCE_BATCH_TIMEOUT() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCaller) FORCEBATCHTIMEOUT(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "FORCE_BATCH_TIMEOUT")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FORCEBATCHTIMEOUT is a free data retrieval call binding the contract method 0xab9fc5ef.
//
// Solidity: function FORCE_BATCH_TIMEOUT() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencySession) FORCEBATCHTIMEOUT() (uint64, error) {
	return _Proofofefficiency.Contract.FORCEBATCHTIMEOUT(&_Proofofefficiency.CallOpts)
}

// FORCEBATCHTIMEOUT is a free data retrieval call binding the contract method 0xab9fc5ef.
//
// Solidity: function FORCE_BATCH_TIMEOUT() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCallerSession) FORCEBATCHTIMEOUT() (uint64, error) {
	return _Proofofefficiency.Contract.FORCEBATCHTIMEOUT(&_Proofofefficiency.CallOpts)
}

// MAXBATCHLENGTH is a free data retrieval call binding the contract method 0xb02286c0.
//
// Solidity: function MAX_BATCH_LENGTH() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencyCaller) MAXBATCHLENGTH(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "MAX_BATCH_LENGTH")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXBATCHLENGTH is a free data retrieval call binding the contract method 0xb02286c0.
//
// Solidity: function MAX_BATCH_LENGTH() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencySession) MAXBATCHLENGTH() (*big.Int, error) {
	return _Proofofefficiency.Contract.MAXBATCHLENGTH(&_Proofofefficiency.CallOpts)
}

// MAXBATCHLENGTH is a free data retrieval call binding the contract method 0xb02286c0.
//
// Solidity: function MAX_BATCH_LENGTH() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencyCallerSession) MAXBATCHLENGTH() (*big.Int, error) {
	return _Proofofefficiency.Contract.MAXBATCHLENGTH(&_Proofofefficiency.CallOpts)
}

// TRUSTEDSEQUENCERFEE is a free data retrieval call binding the contract method 0xf7552761.
//
// Solidity: function TRUSTED_SEQUENCER_FEE() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencyCaller) TRUSTEDSEQUENCERFEE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "TRUSTED_SEQUENCER_FEE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TRUSTEDSEQUENCERFEE is a free data retrieval call binding the contract method 0xf7552761.
//
// Solidity: function TRUSTED_SEQUENCER_FEE() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencySession) TRUSTEDSEQUENCERFEE() (*big.Int, error) {
	return _Proofofefficiency.Contract.TRUSTEDSEQUENCERFEE(&_Proofofefficiency.CallOpts)
}

// TRUSTEDSEQUENCERFEE is a free data retrieval call binding the contract method 0xf7552761.
//
// Solidity: function TRUSTED_SEQUENCER_FEE() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencyCallerSession) TRUSTEDSEQUENCERFEE() (*big.Int, error) {
	return _Proofofefficiency.Contract.TRUSTEDSEQUENCERFEE(&_Proofofefficiency.CallOpts)
}

// BatchNumToStateRoot is a free data retrieval call binding the contract method 0x5392c5e0.
//
// Solidity: function batchNumToStateRoot(uint64 ) view returns(bytes32)
func (_Proofofefficiency *ProofofefficiencyCaller) BatchNumToStateRoot(opts *bind.CallOpts, arg0 uint64) ([32]byte, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "batchNumToStateRoot", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BatchNumToStateRoot is a free data retrieval call binding the contract method 0x5392c5e0.
//
// Solidity: function batchNumToStateRoot(uint64 ) view returns(bytes32)
func (_Proofofefficiency *ProofofefficiencySession) BatchNumToStateRoot(arg0 uint64) ([32]byte, error) {
	return _Proofofefficiency.Contract.BatchNumToStateRoot(&_Proofofefficiency.CallOpts, arg0)
}

// BatchNumToStateRoot is a free data retrieval call binding the contract method 0x5392c5e0.
//
// Solidity: function batchNumToStateRoot(uint64 ) view returns(bytes32)
func (_Proofofefficiency *ProofofefficiencyCallerSession) BatchNumToStateRoot(arg0 uint64) ([32]byte, error) {
	return _Proofofefficiency.Contract.BatchNumToStateRoot(&_Proofofefficiency.CallOpts, arg0)
}

// BridgeAddress is a free data retrieval call binding the contract method 0xa3c573eb.
//
// Solidity: function bridgeAddress() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCaller) BridgeAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "bridgeAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BridgeAddress is a free data retrieval call binding the contract method 0xa3c573eb.
//
// Solidity: function bridgeAddress() view returns(address)
func (_Proofofefficiency *ProofofefficiencySession) BridgeAddress() (common.Address, error) {
	return _Proofofefficiency.Contract.BridgeAddress(&_Proofofefficiency.CallOpts)
}

// BridgeAddress is a free data retrieval call binding the contract method 0xa3c573eb.
//
// Solidity: function bridgeAddress() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCallerSession) BridgeAddress() (common.Address, error) {
	return _Proofofefficiency.Contract.BridgeAddress(&_Proofofefficiency.CallOpts)
}

// CalculateForceProverFee is a free data retrieval call binding the contract method 0x79847057.
//
// Solidity: function calculateForceProverFee() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencyCaller) CalculateForceProverFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "calculateForceProverFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculateForceProverFee is a free data retrieval call binding the contract method 0x79847057.
//
// Solidity: function calculateForceProverFee() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencySession) CalculateForceProverFee() (*big.Int, error) {
	return _Proofofefficiency.Contract.CalculateForceProverFee(&_Proofofefficiency.CallOpts)
}

// CalculateForceProverFee is a free data retrieval call binding the contract method 0x79847057.
//
// Solidity: function calculateForceProverFee() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencyCallerSession) CalculateForceProverFee() (*big.Int, error) {
	return _Proofofefficiency.Contract.CalculateForceProverFee(&_Proofofefficiency.CallOpts)
}

// CalculateRewardPerBatch is a free data retrieval call binding the contract method 0x99f5634e.
//
// Solidity: function calculateRewardPerBatch() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencyCaller) CalculateRewardPerBatch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "calculateRewardPerBatch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculateRewardPerBatch is a free data retrieval call binding the contract method 0x99f5634e.
//
// Solidity: function calculateRewardPerBatch() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencySession) CalculateRewardPerBatch() (*big.Int, error) {
	return _Proofofefficiency.Contract.CalculateRewardPerBatch(&_Proofofefficiency.CallOpts)
}

// CalculateRewardPerBatch is a free data retrieval call binding the contract method 0x99f5634e.
//
// Solidity: function calculateRewardPerBatch() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencyCallerSession) CalculateRewardPerBatch() (*big.Int, error) {
	return _Proofofefficiency.Contract.CalculateRewardPerBatch(&_Proofofefficiency.CallOpts)
}

// ChainID is a free data retrieval call binding the contract method 0xadc879e9.
//
// Solidity: function chainID() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCaller) ChainID(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "chainID")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ChainID is a free data retrieval call binding the contract method 0xadc879e9.
//
// Solidity: function chainID() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencySession) ChainID() (uint64, error) {
	return _Proofofefficiency.Contract.ChainID(&_Proofofefficiency.CallOpts)
}

// ChainID is a free data retrieval call binding the contract method 0xadc879e9.
//
// Solidity: function chainID() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCallerSession) ChainID() (uint64, error) {
	return _Proofofefficiency.Contract.ChainID(&_Proofofefficiency.CallOpts)
}

// ForceBatchAllowed is a free data retrieval call binding the contract method 0xd8f54db0.
//
// Solidity: function forceBatchAllowed() view returns(bool)
func (_Proofofefficiency *ProofofefficiencyCaller) ForceBatchAllowed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "forceBatchAllowed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ForceBatchAllowed is a free data retrieval call binding the contract method 0xd8f54db0.
//
// Solidity: function forceBatchAllowed() view returns(bool)
func (_Proofofefficiency *ProofofefficiencySession) ForceBatchAllowed() (bool, error) {
	return _Proofofefficiency.Contract.ForceBatchAllowed(&_Proofofefficiency.CallOpts)
}

// ForceBatchAllowed is a free data retrieval call binding the contract method 0xd8f54db0.
//
// Solidity: function forceBatchAllowed() view returns(bool)
func (_Proofofefficiency *ProofofefficiencyCallerSession) ForceBatchAllowed() (bool, error) {
	return _Proofofefficiency.Contract.ForceBatchAllowed(&_Proofofefficiency.CallOpts)
}

// ForcedBatches is a free data retrieval call binding the contract method 0x6b8616ce.
//
// Solidity: function forcedBatches(uint64 ) view returns(bytes32)
func (_Proofofefficiency *ProofofefficiencyCaller) ForcedBatches(opts *bind.CallOpts, arg0 uint64) ([32]byte, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "forcedBatches", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ForcedBatches is a free data retrieval call binding the contract method 0x6b8616ce.
//
// Solidity: function forcedBatches(uint64 ) view returns(bytes32)
func (_Proofofefficiency *ProofofefficiencySession) ForcedBatches(arg0 uint64) ([32]byte, error) {
	return _Proofofefficiency.Contract.ForcedBatches(&_Proofofefficiency.CallOpts, arg0)
}

// ForcedBatches is a free data retrieval call binding the contract method 0x6b8616ce.
//
// Solidity: function forcedBatches(uint64 ) view returns(bytes32)
func (_Proofofefficiency *ProofofefficiencyCallerSession) ForcedBatches(arg0 uint64) ([32]byte, error) {
	return _Proofofefficiency.Contract.ForcedBatches(&_Proofofefficiency.CallOpts, arg0)
}

// GetInputSnarkBytes is a free data retrieval call binding the contract method 0x7152facf.
//
// Solidity: function getInputSnarkBytes(uint64 initNumBatch, uint64 finalNewBatch, bytes32 newLocalExitRoot, bytes32 newStateRoot) view returns(bytes)
func (_Proofofefficiency *ProofofefficiencyCaller) GetInputSnarkBytes(opts *bind.CallOpts, initNumBatch uint64, finalNewBatch uint64, newLocalExitRoot [32]byte, newStateRoot [32]byte) ([]byte, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "getInputSnarkBytes", initNumBatch, finalNewBatch, newLocalExitRoot, newStateRoot)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetInputSnarkBytes is a free data retrieval call binding the contract method 0x7152facf.
//
// Solidity: function getInputSnarkBytes(uint64 initNumBatch, uint64 finalNewBatch, bytes32 newLocalExitRoot, bytes32 newStateRoot) view returns(bytes)
func (_Proofofefficiency *ProofofefficiencySession) GetInputSnarkBytes(initNumBatch uint64, finalNewBatch uint64, newLocalExitRoot [32]byte, newStateRoot [32]byte) ([]byte, error) {
	return _Proofofefficiency.Contract.GetInputSnarkBytes(&_Proofofefficiency.CallOpts, initNumBatch, finalNewBatch, newLocalExitRoot, newStateRoot)
}

// GetInputSnarkBytes is a free data retrieval call binding the contract method 0x7152facf.
//
// Solidity: function getInputSnarkBytes(uint64 initNumBatch, uint64 finalNewBatch, bytes32 newLocalExitRoot, bytes32 newStateRoot) view returns(bytes)
func (_Proofofefficiency *ProofofefficiencyCallerSession) GetInputSnarkBytes(initNumBatch uint64, finalNewBatch uint64, newLocalExitRoot [32]byte, newStateRoot [32]byte) ([]byte, error) {
	return _Proofofefficiency.Contract.GetInputSnarkBytes(&_Proofofefficiency.CallOpts, initNumBatch, finalNewBatch, newLocalExitRoot, newStateRoot)
}

// GlobalExitRootManager is a free data retrieval call binding the contract method 0xd02103ca.
//
// Solidity: function globalExitRootManager() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCaller) GlobalExitRootManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "globalExitRootManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GlobalExitRootManager is a free data retrieval call binding the contract method 0xd02103ca.
//
// Solidity: function globalExitRootManager() view returns(address)
func (_Proofofefficiency *ProofofefficiencySession) GlobalExitRootManager() (common.Address, error) {
	return _Proofofefficiency.Contract.GlobalExitRootManager(&_Proofofefficiency.CallOpts)
}

// GlobalExitRootManager is a free data retrieval call binding the contract method 0xd02103ca.
//
// Solidity: function globalExitRootManager() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCallerSession) GlobalExitRootManager() (common.Address, error) {
	return _Proofofefficiency.Contract.GlobalExitRootManager(&_Proofofefficiency.CallOpts)
}

// IsEmergencyState is a free data retrieval call binding the contract method 0x15064c96.
//
// Solidity: function isEmergencyState() view returns(bool)
func (_Proofofefficiency *ProofofefficiencyCaller) IsEmergencyState(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "isEmergencyState")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsEmergencyState is a free data retrieval call binding the contract method 0x15064c96.
//
// Solidity: function isEmergencyState() view returns(bool)
func (_Proofofefficiency *ProofofefficiencySession) IsEmergencyState() (bool, error) {
	return _Proofofefficiency.Contract.IsEmergencyState(&_Proofofefficiency.CallOpts)
}

// IsEmergencyState is a free data retrieval call binding the contract method 0x15064c96.
//
// Solidity: function isEmergencyState() view returns(bool)
func (_Proofofefficiency *ProofofefficiencyCallerSession) IsEmergencyState() (bool, error) {
	return _Proofofefficiency.Contract.IsEmergencyState(&_Proofofefficiency.CallOpts)
}

// LastBatchSequenced is a free data retrieval call binding the contract method 0x423fa856.
//
// Solidity: function lastBatchSequenced() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCaller) LastBatchSequenced(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "lastBatchSequenced")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastBatchSequenced is a free data retrieval call binding the contract method 0x423fa856.
//
// Solidity: function lastBatchSequenced() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencySession) LastBatchSequenced() (uint64, error) {
	return _Proofofefficiency.Contract.LastBatchSequenced(&_Proofofefficiency.CallOpts)
}

// LastBatchSequenced is a free data retrieval call binding the contract method 0x423fa856.
//
// Solidity: function lastBatchSequenced() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCallerSession) LastBatchSequenced() (uint64, error) {
	return _Proofofefficiency.Contract.LastBatchSequenced(&_Proofofefficiency.CallOpts)
}

// LastForceBatch is a free data retrieval call binding the contract method 0xe7a7ed02.
//
// Solidity: function lastForceBatch() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCaller) LastForceBatch(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "lastForceBatch")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastForceBatch is a free data retrieval call binding the contract method 0xe7a7ed02.
//
// Solidity: function lastForceBatch() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencySession) LastForceBatch() (uint64, error) {
	return _Proofofefficiency.Contract.LastForceBatch(&_Proofofefficiency.CallOpts)
}

// LastForceBatch is a free data retrieval call binding the contract method 0xe7a7ed02.
//
// Solidity: function lastForceBatch() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCallerSession) LastForceBatch() (uint64, error) {
	return _Proofofefficiency.Contract.LastForceBatch(&_Proofofefficiency.CallOpts)
}

// LastForceBatchSequenced is a free data retrieval call binding the contract method 0x45605267.
//
// Solidity: function lastForceBatchSequenced() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCaller) LastForceBatchSequenced(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "lastForceBatchSequenced")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastForceBatchSequenced is a free data retrieval call binding the contract method 0x45605267.
//
// Solidity: function lastForceBatchSequenced() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencySession) LastForceBatchSequenced() (uint64, error) {
	return _Proofofefficiency.Contract.LastForceBatchSequenced(&_Proofofefficiency.CallOpts)
}

// LastForceBatchSequenced is a free data retrieval call binding the contract method 0x45605267.
//
// Solidity: function lastForceBatchSequenced() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCallerSession) LastForceBatchSequenced() (uint64, error) {
	return _Proofofefficiency.Contract.LastForceBatchSequenced(&_Proofofefficiency.CallOpts)
}

// LastTimestamp is a free data retrieval call binding the contract method 0x19d8ac61.
//
// Solidity: function lastTimestamp() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCaller) LastTimestamp(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "lastTimestamp")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastTimestamp is a free data retrieval call binding the contract method 0x19d8ac61.
//
// Solidity: function lastTimestamp() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencySession) LastTimestamp() (uint64, error) {
	return _Proofofefficiency.Contract.LastTimestamp(&_Proofofefficiency.CallOpts)
}

// LastTimestamp is a free data retrieval call binding the contract method 0x19d8ac61.
//
// Solidity: function lastTimestamp() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCallerSession) LastTimestamp() (uint64, error) {
	return _Proofofefficiency.Contract.LastTimestamp(&_Proofofefficiency.CallOpts)
}

// LastVerifiedBatch is a free data retrieval call binding the contract method 0x7fcb3653.
//
// Solidity: function lastVerifiedBatch() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCaller) LastVerifiedBatch(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "lastVerifiedBatch")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastVerifiedBatch is a free data retrieval call binding the contract method 0x7fcb3653.
//
// Solidity: function lastVerifiedBatch() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencySession) LastVerifiedBatch() (uint64, error) {
	return _Proofofefficiency.Contract.LastVerifiedBatch(&_Proofofefficiency.CallOpts)
}

// LastVerifiedBatch is a free data retrieval call binding the contract method 0x7fcb3653.
//
// Solidity: function lastVerifiedBatch() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCallerSession) LastVerifiedBatch() (uint64, error) {
	return _Proofofefficiency.Contract.LastVerifiedBatch(&_Proofofefficiency.CallOpts)
}

// Matic is a free data retrieval call binding the contract method 0xb6b0b097.
//
// Solidity: function matic() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCaller) Matic(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "matic")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Matic is a free data retrieval call binding the contract method 0xb6b0b097.
//
// Solidity: function matic() view returns(address)
func (_Proofofefficiency *ProofofefficiencySession) Matic() (common.Address, error) {
	return _Proofofefficiency.Contract.Matic(&_Proofofefficiency.CallOpts)
}

// Matic is a free data retrieval call binding the contract method 0xb6b0b097.
//
// Solidity: function matic() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCallerSession) Matic() (common.Address, error) {
	return _Proofofefficiency.Contract.Matic(&_Proofofefficiency.CallOpts)
}

// NetworkName is a free data retrieval call binding the contract method 0x107bf28c.
//
// Solidity: function networkName() view returns(string)
func (_Proofofefficiency *ProofofefficiencyCaller) NetworkName(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "networkName")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NetworkName is a free data retrieval call binding the contract method 0x107bf28c.
//
// Solidity: function networkName() view returns(string)
func (_Proofofefficiency *ProofofefficiencySession) NetworkName() (string, error) {
	return _Proofofefficiency.Contract.NetworkName(&_Proofofefficiency.CallOpts)
}

// NetworkName is a free data retrieval call binding the contract method 0x107bf28c.
//
// Solidity: function networkName() view returns(string)
func (_Proofofefficiency *ProofofefficiencyCallerSession) NetworkName() (string, error) {
	return _Proofofefficiency.Contract.NetworkName(&_Proofofefficiency.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Proofofefficiency *ProofofefficiencySession) Owner() (common.Address, error) {
	return _Proofofefficiency.Contract.Owner(&_Proofofefficiency.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCallerSession) Owner() (common.Address, error) {
	return _Proofofefficiency.Contract.Owner(&_Proofofefficiency.CallOpts)
}

// RollupVerifier is a free data retrieval call binding the contract method 0xe8bf92ed.
//
// Solidity: function rollupVerifier() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCaller) RollupVerifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "rollupVerifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupVerifier is a free data retrieval call binding the contract method 0xe8bf92ed.
//
// Solidity: function rollupVerifier() view returns(address)
func (_Proofofefficiency *ProofofefficiencySession) RollupVerifier() (common.Address, error) {
	return _Proofofefficiency.Contract.RollupVerifier(&_Proofofefficiency.CallOpts)
}

// RollupVerifier is a free data retrieval call binding the contract method 0xe8bf92ed.
//
// Solidity: function rollupVerifier() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCallerSession) RollupVerifier() (common.Address, error) {
	return _Proofofefficiency.Contract.RollupVerifier(&_Proofofefficiency.CallOpts)
}

// SecurityCouncil is a free data retrieval call binding the contract method 0x27eb6c0f.
//
// Solidity: function securityCouncil() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCaller) SecurityCouncil(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "securityCouncil")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SecurityCouncil is a free data retrieval call binding the contract method 0x27eb6c0f.
//
// Solidity: function securityCouncil() view returns(address)
func (_Proofofefficiency *ProofofefficiencySession) SecurityCouncil() (common.Address, error) {
	return _Proofofefficiency.Contract.SecurityCouncil(&_Proofofefficiency.CallOpts)
}

// SecurityCouncil is a free data retrieval call binding the contract method 0x27eb6c0f.
//
// Solidity: function securityCouncil() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCallerSession) SecurityCouncil() (common.Address, error) {
	return _Proofofefficiency.Contract.SecurityCouncil(&_Proofofefficiency.CallOpts)
}

// SequencedBatches is a free data retrieval call binding the contract method 0xb4d63f58.
//
// Solidity: function sequencedBatches(uint64 ) view returns(bytes32)
func (_Proofofefficiency *ProofofefficiencyCaller) SequencedBatches(opts *bind.CallOpts, arg0 uint64) ([32]byte, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "sequencedBatches", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SequencedBatches is a free data retrieval call binding the contract method 0xb4d63f58.
//
// Solidity: function sequencedBatches(uint64 ) view returns(bytes32)
func (_Proofofefficiency *ProofofefficiencySession) SequencedBatches(arg0 uint64) ([32]byte, error) {
	return _Proofofefficiency.Contract.SequencedBatches(&_Proofofefficiency.CallOpts, arg0)
}

// SequencedBatches is a free data retrieval call binding the contract method 0xb4d63f58.
//
// Solidity: function sequencedBatches(uint64 ) view returns(bytes32)
func (_Proofofefficiency *ProofofefficiencyCallerSession) SequencedBatches(arg0 uint64) ([32]byte, error) {
	return _Proofofefficiency.Contract.SequencedBatches(&_Proofofefficiency.CallOpts, arg0)
}

// TrustedSequencer is a free data retrieval call binding the contract method 0xcfa8ed47.
//
// Solidity: function trustedSequencer() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCaller) TrustedSequencer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "trustedSequencer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TrustedSequencer is a free data retrieval call binding the contract method 0xcfa8ed47.
//
// Solidity: function trustedSequencer() view returns(address)
func (_Proofofefficiency *ProofofefficiencySession) TrustedSequencer() (common.Address, error) {
	return _Proofofefficiency.Contract.TrustedSequencer(&_Proofofefficiency.CallOpts)
}

// TrustedSequencer is a free data retrieval call binding the contract method 0xcfa8ed47.
//
// Solidity: function trustedSequencer() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCallerSession) TrustedSequencer() (common.Address, error) {
	return _Proofofefficiency.Contract.TrustedSequencer(&_Proofofefficiency.CallOpts)
}

// TrustedSequencerURL is a free data retrieval call binding the contract method 0x542028d5.
//
// Solidity: function trustedSequencerURL() view returns(string)
func (_Proofofefficiency *ProofofefficiencyCaller) TrustedSequencerURL(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "trustedSequencerURL")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TrustedSequencerURL is a free data retrieval call binding the contract method 0x542028d5.
//
// Solidity: function trustedSequencerURL() view returns(string)
func (_Proofofefficiency *ProofofefficiencySession) TrustedSequencerURL() (string, error) {
	return _Proofofefficiency.Contract.TrustedSequencerURL(&_Proofofefficiency.CallOpts)
}

// TrustedSequencerURL is a free data retrieval call binding the contract method 0x542028d5.
//
// Solidity: function trustedSequencerURL() view returns(string)
func (_Proofofefficiency *ProofofefficiencyCallerSession) TrustedSequencerURL() (string, error) {
	return _Proofofefficiency.Contract.TrustedSequencerURL(&_Proofofefficiency.CallOpts)
}

// ActivateEmergencyState is a paid mutator transaction binding the contract method 0x2072f6c5.
//
// Solidity: function activateEmergencyState() returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) ActivateEmergencyState(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "activateEmergencyState")
}

// ActivateEmergencyState is a paid mutator transaction binding the contract method 0x2072f6c5.
//
// Solidity: function activateEmergencyState() returns()
func (_Proofofefficiency *ProofofefficiencySession) ActivateEmergencyState() (*types.Transaction, error) {
	return _Proofofefficiency.Contract.ActivateEmergencyState(&_Proofofefficiency.TransactOpts)
}

// ActivateEmergencyState is a paid mutator transaction binding the contract method 0x2072f6c5.
//
// Solidity: function activateEmergencyState() returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) ActivateEmergencyState() (*types.Transaction, error) {
	return _Proofofefficiency.Contract.ActivateEmergencyState(&_Proofofefficiency.TransactOpts)
}

// DeactivateEmergencyState is a paid mutator transaction binding the contract method 0xdbc16976.
//
// Solidity: function deactivateEmergencyState() returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) DeactivateEmergencyState(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "deactivateEmergencyState")
}

// DeactivateEmergencyState is a paid mutator transaction binding the contract method 0xdbc16976.
//
// Solidity: function deactivateEmergencyState() returns()
func (_Proofofefficiency *ProofofefficiencySession) DeactivateEmergencyState() (*types.Transaction, error) {
	return _Proofofefficiency.Contract.DeactivateEmergencyState(&_Proofofefficiency.TransactOpts)
}

// DeactivateEmergencyState is a paid mutator transaction binding the contract method 0xdbc16976.
//
// Solidity: function deactivateEmergencyState() returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) DeactivateEmergencyState() (*types.Transaction, error) {
	return _Proofofefficiency.Contract.DeactivateEmergencyState(&_Proofofefficiency.TransactOpts)
}

// ForceBatch is a paid mutator transaction binding the contract method 0xeaeb077b.
//
// Solidity: function forceBatch(bytes transactions, uint256 maticAmount) returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) ForceBatch(opts *bind.TransactOpts, transactions []byte, maticAmount *big.Int) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "forceBatch", transactions, maticAmount)
}

// ForceBatch is a paid mutator transaction binding the contract method 0xeaeb077b.
//
// Solidity: function forceBatch(bytes transactions, uint256 maticAmount) returns()
func (_Proofofefficiency *ProofofefficiencySession) ForceBatch(transactions []byte, maticAmount *big.Int) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.ForceBatch(&_Proofofefficiency.TransactOpts, transactions, maticAmount)
}

// ForceBatch is a paid mutator transaction binding the contract method 0xeaeb077b.
//
// Solidity: function forceBatch(bytes transactions, uint256 maticAmount) returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) ForceBatch(transactions []byte, maticAmount *big.Int) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.ForceBatch(&_Proofofefficiency.TransactOpts, transactions, maticAmount)
}

// Initialize is a paid mutator transaction binding the contract method 0x81df7d3f.
//
// Solidity: function initialize(address _globalExitRootManager, address _matic, address _rollupVerifier, bytes32 genesisRoot, address _trustedSequencer, bool _forceBatchAllowed, string _trustedSequencerURL, uint64 _chainID, string _networkName, address _bridgeAddress, address _securityCouncil) returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) Initialize(opts *bind.TransactOpts, _globalExitRootManager common.Address, _matic common.Address, _rollupVerifier common.Address, genesisRoot [32]byte, _trustedSequencer common.Address, _forceBatchAllowed bool, _trustedSequencerURL string, _chainID uint64, _networkName string, _bridgeAddress common.Address, _securityCouncil common.Address) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "initialize", _globalExitRootManager, _matic, _rollupVerifier, genesisRoot, _trustedSequencer, _forceBatchAllowed, _trustedSequencerURL, _chainID, _networkName, _bridgeAddress, _securityCouncil)
}

// Initialize is a paid mutator transaction binding the contract method 0x81df7d3f.
//
// Solidity: function initialize(address _globalExitRootManager, address _matic, address _rollupVerifier, bytes32 genesisRoot, address _trustedSequencer, bool _forceBatchAllowed, string _trustedSequencerURL, uint64 _chainID, string _networkName, address _bridgeAddress, address _securityCouncil) returns()
func (_Proofofefficiency *ProofofefficiencySession) Initialize(_globalExitRootManager common.Address, _matic common.Address, _rollupVerifier common.Address, genesisRoot [32]byte, _trustedSequencer common.Address, _forceBatchAllowed bool, _trustedSequencerURL string, _chainID uint64, _networkName string, _bridgeAddress common.Address, _securityCouncil common.Address) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.Initialize(&_Proofofefficiency.TransactOpts, _globalExitRootManager, _matic, _rollupVerifier, genesisRoot, _trustedSequencer, _forceBatchAllowed, _trustedSequencerURL, _chainID, _networkName, _bridgeAddress, _securityCouncil)
}

// Initialize is a paid mutator transaction binding the contract method 0x81df7d3f.
//
// Solidity: function initialize(address _globalExitRootManager, address _matic, address _rollupVerifier, bytes32 genesisRoot, address _trustedSequencer, bool _forceBatchAllowed, string _trustedSequencerURL, uint64 _chainID, string _networkName, address _bridgeAddress, address _securityCouncil) returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) Initialize(_globalExitRootManager common.Address, _matic common.Address, _rollupVerifier common.Address, genesisRoot [32]byte, _trustedSequencer common.Address, _forceBatchAllowed bool, _trustedSequencerURL string, _chainID uint64, _networkName string, _bridgeAddress common.Address, _securityCouncil common.Address) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.Initialize(&_Proofofefficiency.TransactOpts, _globalExitRootManager, _matic, _rollupVerifier, genesisRoot, _trustedSequencer, _forceBatchAllowed, _trustedSequencerURL, _chainID, _networkName, _bridgeAddress, _securityCouncil)
}

// ProofDifferentState is a paid mutator transaction binding the contract method 0x6766f09d.
//
// Solidity: function proofDifferentState(uint64 initNumBatch, uint64 finalNewBatch, bytes32 newLocalExitRoot, bytes32 newStateRoot, uint256[2] proofA, uint256[2][2] proofB, uint256[2] proofC) returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) ProofDifferentState(opts *bind.TransactOpts, initNumBatch uint64, finalNewBatch uint64, newLocalExitRoot [32]byte, newStateRoot [32]byte, proofA [2]*big.Int, proofB [2][2]*big.Int, proofC [2]*big.Int) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "proofDifferentState", initNumBatch, finalNewBatch, newLocalExitRoot, newStateRoot, proofA, proofB, proofC)
}

// ProofDifferentState is a paid mutator transaction binding the contract method 0x6766f09d.
//
// Solidity: function proofDifferentState(uint64 initNumBatch, uint64 finalNewBatch, bytes32 newLocalExitRoot, bytes32 newStateRoot, uint256[2] proofA, uint256[2][2] proofB, uint256[2] proofC) returns()
func (_Proofofefficiency *ProofofefficiencySession) ProofDifferentState(initNumBatch uint64, finalNewBatch uint64, newLocalExitRoot [32]byte, newStateRoot [32]byte, proofA [2]*big.Int, proofB [2][2]*big.Int, proofC [2]*big.Int) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.ProofDifferentState(&_Proofofefficiency.TransactOpts, initNumBatch, finalNewBatch, newLocalExitRoot, newStateRoot, proofA, proofB, proofC)
}

// ProofDifferentState is a paid mutator transaction binding the contract method 0x6766f09d.
//
// Solidity: function proofDifferentState(uint64 initNumBatch, uint64 finalNewBatch, bytes32 newLocalExitRoot, bytes32 newStateRoot, uint256[2] proofA, uint256[2][2] proofB, uint256[2] proofC) returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) ProofDifferentState(initNumBatch uint64, finalNewBatch uint64, newLocalExitRoot [32]byte, newStateRoot [32]byte, proofA [2]*big.Int, proofB [2][2]*big.Int, proofC [2]*big.Int) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.ProofDifferentState(&_Proofofefficiency.TransactOpts, initNumBatch, finalNewBatch, newLocalExitRoot, newStateRoot, proofA, proofB, proofC)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Proofofefficiency *ProofofefficiencySession) RenounceOwnership() (*types.Transaction, error) {
	return _Proofofefficiency.Contract.RenounceOwnership(&_Proofofefficiency.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Proofofefficiency.Contract.RenounceOwnership(&_Proofofefficiency.TransactOpts)
}

// SequenceBatches is a paid mutator transaction binding the contract method 0x3c158267.
//
// Solidity: function sequenceBatches((bytes,bytes32,uint64,uint64)[] batches) returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) SequenceBatches(opts *bind.TransactOpts, batches []ProofOfEfficiencyBatchData) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "sequenceBatches", batches)
}

// SequenceBatches is a paid mutator transaction binding the contract method 0x3c158267.
//
// Solidity: function sequenceBatches((bytes,bytes32,uint64,uint64)[] batches) returns()
func (_Proofofefficiency *ProofofefficiencySession) SequenceBatches(batches []ProofOfEfficiencyBatchData) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SequenceBatches(&_Proofofefficiency.TransactOpts, batches)
}

// SequenceBatches is a paid mutator transaction binding the contract method 0x3c158267.
//
// Solidity: function sequenceBatches((bytes,bytes32,uint64,uint64)[] batches) returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) SequenceBatches(batches []ProofOfEfficiencyBatchData) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SequenceBatches(&_Proofofefficiency.TransactOpts, batches)
}

// SequenceForceBatches is a paid mutator transaction binding the contract method 0xd8d1091b.
//
// Solidity: function sequenceForceBatches((bytes,bytes32,uint64)[] batches) returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) SequenceForceBatches(opts *bind.TransactOpts, batches []ProofOfEfficiencyForceBatchData) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "sequenceForceBatches", batches)
}

// SequenceForceBatches is a paid mutator transaction binding the contract method 0xd8d1091b.
//
// Solidity: function sequenceForceBatches((bytes,bytes32,uint64)[] batches) returns()
func (_Proofofefficiency *ProofofefficiencySession) SequenceForceBatches(batches []ProofOfEfficiencyForceBatchData) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SequenceForceBatches(&_Proofofefficiency.TransactOpts, batches)
}

// SequenceForceBatches is a paid mutator transaction binding the contract method 0xd8d1091b.
//
// Solidity: function sequenceForceBatches((bytes,bytes32,uint64)[] batches) returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) SequenceForceBatches(batches []ProofOfEfficiencyForceBatchData) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SequenceForceBatches(&_Proofofefficiency.TransactOpts, batches)
}

// SetForceBatchAllowed is a paid mutator transaction binding the contract method 0x8c4a0af7.
//
// Solidity: function setForceBatchAllowed(bool newForceBatchAllowed) returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) SetForceBatchAllowed(opts *bind.TransactOpts, newForceBatchAllowed bool) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "setForceBatchAllowed", newForceBatchAllowed)
}

// SetForceBatchAllowed is a paid mutator transaction binding the contract method 0x8c4a0af7.
//
// Solidity: function setForceBatchAllowed(bool newForceBatchAllowed) returns()
func (_Proofofefficiency *ProofofefficiencySession) SetForceBatchAllowed(newForceBatchAllowed bool) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SetForceBatchAllowed(&_Proofofefficiency.TransactOpts, newForceBatchAllowed)
}

// SetForceBatchAllowed is a paid mutator transaction binding the contract method 0x8c4a0af7.
//
// Solidity: function setForceBatchAllowed(bool newForceBatchAllowed) returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) SetForceBatchAllowed(newForceBatchAllowed bool) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SetForceBatchAllowed(&_Proofofefficiency.TransactOpts, newForceBatchAllowed)
}

// SetSecurityCouncil is a paid mutator transaction binding the contract method 0x1c1083e2.
//
// Solidity: function setSecurityCouncil(address newSecurityCouncil) returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) SetSecurityCouncil(opts *bind.TransactOpts, newSecurityCouncil common.Address) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "setSecurityCouncil", newSecurityCouncil)
}

// SetSecurityCouncil is a paid mutator transaction binding the contract method 0x1c1083e2.
//
// Solidity: function setSecurityCouncil(address newSecurityCouncil) returns()
func (_Proofofefficiency *ProofofefficiencySession) SetSecurityCouncil(newSecurityCouncil common.Address) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SetSecurityCouncil(&_Proofofefficiency.TransactOpts, newSecurityCouncil)
}

// SetSecurityCouncil is a paid mutator transaction binding the contract method 0x1c1083e2.
//
// Solidity: function setSecurityCouncil(address newSecurityCouncil) returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) SetSecurityCouncil(newSecurityCouncil common.Address) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SetSecurityCouncil(&_Proofofefficiency.TransactOpts, newSecurityCouncil)
}

// SetTrustedSequencer is a paid mutator transaction binding the contract method 0x6ff512cc.
//
// Solidity: function setTrustedSequencer(address newTrustedSequencer) returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) SetTrustedSequencer(opts *bind.TransactOpts, newTrustedSequencer common.Address) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "setTrustedSequencer", newTrustedSequencer)
}

// SetTrustedSequencer is a paid mutator transaction binding the contract method 0x6ff512cc.
//
// Solidity: function setTrustedSequencer(address newTrustedSequencer) returns()
func (_Proofofefficiency *ProofofefficiencySession) SetTrustedSequencer(newTrustedSequencer common.Address) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SetTrustedSequencer(&_Proofofefficiency.TransactOpts, newTrustedSequencer)
}

// SetTrustedSequencer is a paid mutator transaction binding the contract method 0x6ff512cc.
//
// Solidity: function setTrustedSequencer(address newTrustedSequencer) returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) SetTrustedSequencer(newTrustedSequencer common.Address) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SetTrustedSequencer(&_Proofofefficiency.TransactOpts, newTrustedSequencer)
}

// SetTrustedSequencerURL is a paid mutator transaction binding the contract method 0xc89e42df.
//
// Solidity: function setTrustedSequencerURL(string newTrustedSequencerURL) returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) SetTrustedSequencerURL(opts *bind.TransactOpts, newTrustedSequencerURL string) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "setTrustedSequencerURL", newTrustedSequencerURL)
}

// SetTrustedSequencerURL is a paid mutator transaction binding the contract method 0xc89e42df.
//
// Solidity: function setTrustedSequencerURL(string newTrustedSequencerURL) returns()
func (_Proofofefficiency *ProofofefficiencySession) SetTrustedSequencerURL(newTrustedSequencerURL string) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SetTrustedSequencerURL(&_Proofofefficiency.TransactOpts, newTrustedSequencerURL)
}

// SetTrustedSequencerURL is a paid mutator transaction binding the contract method 0xc89e42df.
//
// Solidity: function setTrustedSequencerURL(string newTrustedSequencerURL) returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) SetTrustedSequencerURL(newTrustedSequencerURL string) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SetTrustedSequencerURL(&_Proofofefficiency.TransactOpts, newTrustedSequencerURL)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Proofofefficiency *ProofofefficiencySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.TransferOwnership(&_Proofofefficiency.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.TransferOwnership(&_Proofofefficiency.TransactOpts, newOwner)
}

// VerifyBatches is a paid mutator transaction binding the contract method 0x55b925e6.
//
// Solidity: function verifyBatches(uint64 initNumBatch, uint64 finalNewBatch, bytes32 newLocalExitRoot, bytes32 newStateRoot, uint256[2] proofA, uint256[2][2] proofB, uint256[2] proofC) returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) VerifyBatches(opts *bind.TransactOpts, initNumBatch uint64, finalNewBatch uint64, newLocalExitRoot [32]byte, newStateRoot [32]byte, proofA [2]*big.Int, proofB [2][2]*big.Int, proofC [2]*big.Int) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "verifyBatches", initNumBatch, finalNewBatch, newLocalExitRoot, newStateRoot, proofA, proofB, proofC)
}

// VerifyBatches is a paid mutator transaction binding the contract method 0x55b925e6.
//
// Solidity: function verifyBatches(uint64 initNumBatch, uint64 finalNewBatch, bytes32 newLocalExitRoot, bytes32 newStateRoot, uint256[2] proofA, uint256[2][2] proofB, uint256[2] proofC) returns()
func (_Proofofefficiency *ProofofefficiencySession) VerifyBatches(initNumBatch uint64, finalNewBatch uint64, newLocalExitRoot [32]byte, newStateRoot [32]byte, proofA [2]*big.Int, proofB [2][2]*big.Int, proofC [2]*big.Int) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.VerifyBatches(&_Proofofefficiency.TransactOpts, initNumBatch, finalNewBatch, newLocalExitRoot, newStateRoot, proofA, proofB, proofC)
}

// VerifyBatches is a paid mutator transaction binding the contract method 0x55b925e6.
//
// Solidity: function verifyBatches(uint64 initNumBatch, uint64 finalNewBatch, bytes32 newLocalExitRoot, bytes32 newStateRoot, uint256[2] proofA, uint256[2][2] proofB, uint256[2] proofC) returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) VerifyBatches(initNumBatch uint64, finalNewBatch uint64, newLocalExitRoot [32]byte, newStateRoot [32]byte, proofA [2]*big.Int, proofB [2][2]*big.Int, proofC [2]*big.Int) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.VerifyBatches(&_Proofofefficiency.TransactOpts, initNumBatch, finalNewBatch, newLocalExitRoot, newStateRoot, proofA, proofB, proofC)
}

// ProofofefficiencyEmergencyStateActivatedIterator is returned from FilterEmergencyStateActivated and is used to iterate over the raw logs and unpacked data for EmergencyStateActivated events raised by the Proofofefficiency contract.
type ProofofefficiencyEmergencyStateActivatedIterator struct {
	Event *ProofofefficiencyEmergencyStateActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofofefficiencyEmergencyStateActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofofefficiencyEmergencyStateActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofofefficiencyEmergencyStateActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofofefficiencyEmergencyStateActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofofefficiencyEmergencyStateActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofofefficiencyEmergencyStateActivated represents a EmergencyStateActivated event raised by the Proofofefficiency contract.
type ProofofefficiencyEmergencyStateActivated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEmergencyStateActivated is a free log retrieval operation binding the contract event 0x2261efe5aef6fedc1fd1550b25facc9181745623049c7901287030b9ad1a5497.
//
// Solidity: event EmergencyStateActivated()
func (_Proofofefficiency *ProofofefficiencyFilterer) FilterEmergencyStateActivated(opts *bind.FilterOpts) (*ProofofefficiencyEmergencyStateActivatedIterator, error) {

	logs, sub, err := _Proofofefficiency.contract.FilterLogs(opts, "EmergencyStateActivated")
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencyEmergencyStateActivatedIterator{contract: _Proofofefficiency.contract, event: "EmergencyStateActivated", logs: logs, sub: sub}, nil
}

// WatchEmergencyStateActivated is a free log subscription operation binding the contract event 0x2261efe5aef6fedc1fd1550b25facc9181745623049c7901287030b9ad1a5497.
//
// Solidity: event EmergencyStateActivated()
func (_Proofofefficiency *ProofofefficiencyFilterer) WatchEmergencyStateActivated(opts *bind.WatchOpts, sink chan<- *ProofofefficiencyEmergencyStateActivated) (event.Subscription, error) {

	logs, sub, err := _Proofofefficiency.contract.WatchLogs(opts, "EmergencyStateActivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofofefficiencyEmergencyStateActivated)
				if err := _Proofofefficiency.contract.UnpackLog(event, "EmergencyStateActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEmergencyStateActivated is a log parse operation binding the contract event 0x2261efe5aef6fedc1fd1550b25facc9181745623049c7901287030b9ad1a5497.
//
// Solidity: event EmergencyStateActivated()
func (_Proofofefficiency *ProofofefficiencyFilterer) ParseEmergencyStateActivated(log types.Log) (*ProofofefficiencyEmergencyStateActivated, error) {
	event := new(ProofofefficiencyEmergencyStateActivated)
	if err := _Proofofefficiency.contract.UnpackLog(event, "EmergencyStateActivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProofofefficiencyEmergencyStateDeactivatedIterator is returned from FilterEmergencyStateDeactivated and is used to iterate over the raw logs and unpacked data for EmergencyStateDeactivated events raised by the Proofofefficiency contract.
type ProofofefficiencyEmergencyStateDeactivatedIterator struct {
	Event *ProofofefficiencyEmergencyStateDeactivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofofefficiencyEmergencyStateDeactivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofofefficiencyEmergencyStateDeactivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofofefficiencyEmergencyStateDeactivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofofefficiencyEmergencyStateDeactivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofofefficiencyEmergencyStateDeactivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofofefficiencyEmergencyStateDeactivated represents a EmergencyStateDeactivated event raised by the Proofofefficiency contract.
type ProofofefficiencyEmergencyStateDeactivated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEmergencyStateDeactivated is a free log retrieval operation binding the contract event 0x1e5e34eea33501aecf2ebec9fe0e884a40804275ea7fe10b2ba084c8374308b3.
//
// Solidity: event EmergencyStateDeactivated()
func (_Proofofefficiency *ProofofefficiencyFilterer) FilterEmergencyStateDeactivated(opts *bind.FilterOpts) (*ProofofefficiencyEmergencyStateDeactivatedIterator, error) {

	logs, sub, err := _Proofofefficiency.contract.FilterLogs(opts, "EmergencyStateDeactivated")
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencyEmergencyStateDeactivatedIterator{contract: _Proofofefficiency.contract, event: "EmergencyStateDeactivated", logs: logs, sub: sub}, nil
}

// WatchEmergencyStateDeactivated is a free log subscription operation binding the contract event 0x1e5e34eea33501aecf2ebec9fe0e884a40804275ea7fe10b2ba084c8374308b3.
//
// Solidity: event EmergencyStateDeactivated()
func (_Proofofefficiency *ProofofefficiencyFilterer) WatchEmergencyStateDeactivated(opts *bind.WatchOpts, sink chan<- *ProofofefficiencyEmergencyStateDeactivated) (event.Subscription, error) {

	logs, sub, err := _Proofofefficiency.contract.WatchLogs(opts, "EmergencyStateDeactivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofofefficiencyEmergencyStateDeactivated)
				if err := _Proofofefficiency.contract.UnpackLog(event, "EmergencyStateDeactivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEmergencyStateDeactivated is a log parse operation binding the contract event 0x1e5e34eea33501aecf2ebec9fe0e884a40804275ea7fe10b2ba084c8374308b3.
//
// Solidity: event EmergencyStateDeactivated()
func (_Proofofefficiency *ProofofefficiencyFilterer) ParseEmergencyStateDeactivated(log types.Log) (*ProofofefficiencyEmergencyStateDeactivated, error) {
	event := new(ProofofefficiencyEmergencyStateDeactivated)
	if err := _Proofofefficiency.contract.UnpackLog(event, "EmergencyStateDeactivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProofofefficiencyForceBatchIterator is returned from FilterForceBatch and is used to iterate over the raw logs and unpacked data for ForceBatch events raised by the Proofofefficiency contract.
type ProofofefficiencyForceBatchIterator struct {
	Event *ProofofefficiencyForceBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofofefficiencyForceBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofofefficiencyForceBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofofefficiencyForceBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofofefficiencyForceBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofofefficiencyForceBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofofefficiencyForceBatch represents a ForceBatch event raised by the Proofofefficiency contract.
type ProofofefficiencyForceBatch struct {
	ForceBatchNum      uint64
	LastGlobalExitRoot [32]byte
	Sequencer          common.Address
	Transactions       []byte
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterForceBatch is a free log retrieval operation binding the contract event 0xf94bb37db835f1ab585ee00041849a09b12cd081d77fa15ca070757619cbc931.
//
// Solidity: event ForceBatch(uint64 indexed forceBatchNum, bytes32 lastGlobalExitRoot, address sequencer, bytes transactions)
func (_Proofofefficiency *ProofofefficiencyFilterer) FilterForceBatch(opts *bind.FilterOpts, forceBatchNum []uint64) (*ProofofefficiencyForceBatchIterator, error) {

	var forceBatchNumRule []interface{}
	for _, forceBatchNumItem := range forceBatchNum {
		forceBatchNumRule = append(forceBatchNumRule, forceBatchNumItem)
	}

	logs, sub, err := _Proofofefficiency.contract.FilterLogs(opts, "ForceBatch", forceBatchNumRule)
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencyForceBatchIterator{contract: _Proofofefficiency.contract, event: "ForceBatch", logs: logs, sub: sub}, nil
}

// WatchForceBatch is a free log subscription operation binding the contract event 0xf94bb37db835f1ab585ee00041849a09b12cd081d77fa15ca070757619cbc931.
//
// Solidity: event ForceBatch(uint64 indexed forceBatchNum, bytes32 lastGlobalExitRoot, address sequencer, bytes transactions)
func (_Proofofefficiency *ProofofefficiencyFilterer) WatchForceBatch(opts *bind.WatchOpts, sink chan<- *ProofofefficiencyForceBatch, forceBatchNum []uint64) (event.Subscription, error) {

	var forceBatchNumRule []interface{}
	for _, forceBatchNumItem := range forceBatchNum {
		forceBatchNumRule = append(forceBatchNumRule, forceBatchNumItem)
	}

	logs, sub, err := _Proofofefficiency.contract.WatchLogs(opts, "ForceBatch", forceBatchNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofofefficiencyForceBatch)
				if err := _Proofofefficiency.contract.UnpackLog(event, "ForceBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseForceBatch is a log parse operation binding the contract event 0xf94bb37db835f1ab585ee00041849a09b12cd081d77fa15ca070757619cbc931.
//
// Solidity: event ForceBatch(uint64 indexed forceBatchNum, bytes32 lastGlobalExitRoot, address sequencer, bytes transactions)
func (_Proofofefficiency *ProofofefficiencyFilterer) ParseForceBatch(log types.Log) (*ProofofefficiencyForceBatch, error) {
	event := new(ProofofefficiencyForceBatch)
	if err := _Proofofefficiency.contract.UnpackLog(event, "ForceBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProofofefficiencyInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Proofofefficiency contract.
type ProofofefficiencyInitializedIterator struct {
	Event *ProofofefficiencyInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofofefficiencyInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofofefficiencyInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofofefficiencyInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofofefficiencyInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofofefficiencyInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofofefficiencyInitialized represents a Initialized event raised by the Proofofefficiency contract.
type ProofofefficiencyInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Proofofefficiency *ProofofefficiencyFilterer) FilterInitialized(opts *bind.FilterOpts) (*ProofofefficiencyInitializedIterator, error) {

	logs, sub, err := _Proofofefficiency.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencyInitializedIterator{contract: _Proofofefficiency.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Proofofefficiency *ProofofefficiencyFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ProofofefficiencyInitialized) (event.Subscription, error) {

	logs, sub, err := _Proofofefficiency.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofofefficiencyInitialized)
				if err := _Proofofefficiency.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Proofofefficiency *ProofofefficiencyFilterer) ParseInitialized(log types.Log) (*ProofofefficiencyInitialized, error) {
	event := new(ProofofefficiencyInitialized)
	if err := _Proofofefficiency.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProofofefficiencyOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Proofofefficiency contract.
type ProofofefficiencyOwnershipTransferredIterator struct {
	Event *ProofofefficiencyOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofofefficiencyOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofofefficiencyOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofofefficiencyOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofofefficiencyOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofofefficiencyOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofofefficiencyOwnershipTransferred represents a OwnershipTransferred event raised by the Proofofefficiency contract.
type ProofofefficiencyOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Proofofefficiency *ProofofefficiencyFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ProofofefficiencyOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Proofofefficiency.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencyOwnershipTransferredIterator{contract: _Proofofefficiency.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Proofofefficiency *ProofofefficiencyFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ProofofefficiencyOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Proofofefficiency.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofofefficiencyOwnershipTransferred)
				if err := _Proofofefficiency.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Proofofefficiency *ProofofefficiencyFilterer) ParseOwnershipTransferred(log types.Log) (*ProofofefficiencyOwnershipTransferred, error) {
	event := new(ProofofefficiencyOwnershipTransferred)
	if err := _Proofofefficiency.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProofofefficiencyProofDifferentStateIterator is returned from FilterProofDifferentState and is used to iterate over the raw logs and unpacked data for ProofDifferentState events raised by the Proofofefficiency contract.
type ProofofefficiencyProofDifferentStateIterator struct {
	Event *ProofofefficiencyProofDifferentState // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofofefficiencyProofDifferentStateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofofefficiencyProofDifferentState)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofofefficiencyProofDifferentState)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofofefficiencyProofDifferentStateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofofefficiencyProofDifferentStateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofofefficiencyProofDifferentState represents a ProofDifferentState event raised by the Proofofefficiency contract.
type ProofofefficiencyProofDifferentState struct {
	StoredStateRoot [32]byte
	ProvedStateRoot [32]byte
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterProofDifferentState is a free log retrieval operation binding the contract event 0xe579d6d18f02941e1d0f59bff70f1b2c894edc991badab38343786df2846fe55.
//
// Solidity: event ProofDifferentState(bytes32 storedStateRoot, bytes32 provedStateRoot)
func (_Proofofefficiency *ProofofefficiencyFilterer) FilterProofDifferentState(opts *bind.FilterOpts) (*ProofofefficiencyProofDifferentStateIterator, error) {

	logs, sub, err := _Proofofefficiency.contract.FilterLogs(opts, "ProofDifferentState")
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencyProofDifferentStateIterator{contract: _Proofofefficiency.contract, event: "ProofDifferentState", logs: logs, sub: sub}, nil
}

// WatchProofDifferentState is a free log subscription operation binding the contract event 0xe579d6d18f02941e1d0f59bff70f1b2c894edc991badab38343786df2846fe55.
//
// Solidity: event ProofDifferentState(bytes32 storedStateRoot, bytes32 provedStateRoot)
func (_Proofofefficiency *ProofofefficiencyFilterer) WatchProofDifferentState(opts *bind.WatchOpts, sink chan<- *ProofofefficiencyProofDifferentState) (event.Subscription, error) {

	logs, sub, err := _Proofofefficiency.contract.WatchLogs(opts, "ProofDifferentState")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofofefficiencyProofDifferentState)
				if err := _Proofofefficiency.contract.UnpackLog(event, "ProofDifferentState", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProofDifferentState is a log parse operation binding the contract event 0xe579d6d18f02941e1d0f59bff70f1b2c894edc991badab38343786df2846fe55.
//
// Solidity: event ProofDifferentState(bytes32 storedStateRoot, bytes32 provedStateRoot)
func (_Proofofefficiency *ProofofefficiencyFilterer) ParseProofDifferentState(log types.Log) (*ProofofefficiencyProofDifferentState, error) {
	event := new(ProofofefficiencyProofDifferentState)
	if err := _Proofofefficiency.contract.UnpackLog(event, "ProofDifferentState", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProofofefficiencySequenceBatchesIterator is returned from FilterSequenceBatches and is used to iterate over the raw logs and unpacked data for SequenceBatches events raised by the Proofofefficiency contract.
type ProofofefficiencySequenceBatchesIterator struct {
	Event *ProofofefficiencySequenceBatches // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofofefficiencySequenceBatchesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofofefficiencySequenceBatches)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofofefficiencySequenceBatches)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofofefficiencySequenceBatchesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofofefficiencySequenceBatchesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofofefficiencySequenceBatches represents a SequenceBatches event raised by the Proofofefficiency contract.
type ProofofefficiencySequenceBatches struct {
	NumBatch uint64
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSequenceBatches is a free log retrieval operation binding the contract event 0x303446e6a8cb73c83dff421c0b1d5e5ce0719dab1bff13660fc254e58cc17fce.
//
// Solidity: event SequenceBatches(uint64 indexed numBatch)
func (_Proofofefficiency *ProofofefficiencyFilterer) FilterSequenceBatches(opts *bind.FilterOpts, numBatch []uint64) (*ProofofefficiencySequenceBatchesIterator, error) {

	var numBatchRule []interface{}
	for _, numBatchItem := range numBatch {
		numBatchRule = append(numBatchRule, numBatchItem)
	}

	logs, sub, err := _Proofofefficiency.contract.FilterLogs(opts, "SequenceBatches", numBatchRule)
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencySequenceBatchesIterator{contract: _Proofofefficiency.contract, event: "SequenceBatches", logs: logs, sub: sub}, nil
}

// WatchSequenceBatches is a free log subscription operation binding the contract event 0x303446e6a8cb73c83dff421c0b1d5e5ce0719dab1bff13660fc254e58cc17fce.
//
// Solidity: event SequenceBatches(uint64 indexed numBatch)
func (_Proofofefficiency *ProofofefficiencyFilterer) WatchSequenceBatches(opts *bind.WatchOpts, sink chan<- *ProofofefficiencySequenceBatches, numBatch []uint64) (event.Subscription, error) {

	var numBatchRule []interface{}
	for _, numBatchItem := range numBatch {
		numBatchRule = append(numBatchRule, numBatchItem)
	}

	logs, sub, err := _Proofofefficiency.contract.WatchLogs(opts, "SequenceBatches", numBatchRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofofefficiencySequenceBatches)
				if err := _Proofofefficiency.contract.UnpackLog(event, "SequenceBatches", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSequenceBatches is a log parse operation binding the contract event 0x303446e6a8cb73c83dff421c0b1d5e5ce0719dab1bff13660fc254e58cc17fce.
//
// Solidity: event SequenceBatches(uint64 indexed numBatch)
func (_Proofofefficiency *ProofofefficiencyFilterer) ParseSequenceBatches(log types.Log) (*ProofofefficiencySequenceBatches, error) {
	event := new(ProofofefficiencySequenceBatches)
	if err := _Proofofefficiency.contract.UnpackLog(event, "SequenceBatches", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProofofefficiencySequenceForceBatchesIterator is returned from FilterSequenceForceBatches and is used to iterate over the raw logs and unpacked data for SequenceForceBatches events raised by the Proofofefficiency contract.
type ProofofefficiencySequenceForceBatchesIterator struct {
	Event *ProofofefficiencySequenceForceBatches // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofofefficiencySequenceForceBatchesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofofefficiencySequenceForceBatches)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofofefficiencySequenceForceBatches)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofofefficiencySequenceForceBatchesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofofefficiencySequenceForceBatchesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofofefficiencySequenceForceBatches represents a SequenceForceBatches event raised by the Proofofefficiency contract.
type ProofofefficiencySequenceForceBatches struct {
	NumBatch uint64
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSequenceForceBatches is a free log retrieval operation binding the contract event 0x648a61dd2438f072f5a1960939abd30f37aea80d2e94c9792ad142d3e0a490a4.
//
// Solidity: event SequenceForceBatches(uint64 indexed numBatch)
func (_Proofofefficiency *ProofofefficiencyFilterer) FilterSequenceForceBatches(opts *bind.FilterOpts, numBatch []uint64) (*ProofofefficiencySequenceForceBatchesIterator, error) {

	var numBatchRule []interface{}
	for _, numBatchItem := range numBatch {
		numBatchRule = append(numBatchRule, numBatchItem)
	}

	logs, sub, err := _Proofofefficiency.contract.FilterLogs(opts, "SequenceForceBatches", numBatchRule)
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencySequenceForceBatchesIterator{contract: _Proofofefficiency.contract, event: "SequenceForceBatches", logs: logs, sub: sub}, nil
}

// WatchSequenceForceBatches is a free log subscription operation binding the contract event 0x648a61dd2438f072f5a1960939abd30f37aea80d2e94c9792ad142d3e0a490a4.
//
// Solidity: event SequenceForceBatches(uint64 indexed numBatch)
func (_Proofofefficiency *ProofofefficiencyFilterer) WatchSequenceForceBatches(opts *bind.WatchOpts, sink chan<- *ProofofefficiencySequenceForceBatches, numBatch []uint64) (event.Subscription, error) {

	var numBatchRule []interface{}
	for _, numBatchItem := range numBatch {
		numBatchRule = append(numBatchRule, numBatchItem)
	}

	logs, sub, err := _Proofofefficiency.contract.WatchLogs(opts, "SequenceForceBatches", numBatchRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofofefficiencySequenceForceBatches)
				if err := _Proofofefficiency.contract.UnpackLog(event, "SequenceForceBatches", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSequenceForceBatches is a log parse operation binding the contract event 0x648a61dd2438f072f5a1960939abd30f37aea80d2e94c9792ad142d3e0a490a4.
//
// Solidity: event SequenceForceBatches(uint64 indexed numBatch)
func (_Proofofefficiency *ProofofefficiencyFilterer) ParseSequenceForceBatches(log types.Log) (*ProofofefficiencySequenceForceBatches, error) {
	event := new(ProofofefficiencySequenceForceBatches)
	if err := _Proofofefficiency.contract.UnpackLog(event, "SequenceForceBatches", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProofofefficiencySetForceBatchAllowedIterator is returned from FilterSetForceBatchAllowed and is used to iterate over the raw logs and unpacked data for SetForceBatchAllowed events raised by the Proofofefficiency contract.
type ProofofefficiencySetForceBatchAllowedIterator struct {
	Event *ProofofefficiencySetForceBatchAllowed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofofefficiencySetForceBatchAllowedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofofefficiencySetForceBatchAllowed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofofefficiencySetForceBatchAllowed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofofefficiencySetForceBatchAllowedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofofefficiencySetForceBatchAllowedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofofefficiencySetForceBatchAllowed represents a SetForceBatchAllowed event raised by the Proofofefficiency contract.
type ProofofefficiencySetForceBatchAllowed struct {
	NewForceBatchAllowed bool
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterSetForceBatchAllowed is a free log retrieval operation binding the contract event 0xbacda50a4a8575be1d91a7ebe29ee45056f3a94f12a2281eb6b43afa33bcefe6.
//
// Solidity: event SetForceBatchAllowed(bool newForceBatchAllowed)
func (_Proofofefficiency *ProofofefficiencyFilterer) FilterSetForceBatchAllowed(opts *bind.FilterOpts) (*ProofofefficiencySetForceBatchAllowedIterator, error) {

	logs, sub, err := _Proofofefficiency.contract.FilterLogs(opts, "SetForceBatchAllowed")
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencySetForceBatchAllowedIterator{contract: _Proofofefficiency.contract, event: "SetForceBatchAllowed", logs: logs, sub: sub}, nil
}

// WatchSetForceBatchAllowed is a free log subscription operation binding the contract event 0xbacda50a4a8575be1d91a7ebe29ee45056f3a94f12a2281eb6b43afa33bcefe6.
//
// Solidity: event SetForceBatchAllowed(bool newForceBatchAllowed)
func (_Proofofefficiency *ProofofefficiencyFilterer) WatchSetForceBatchAllowed(opts *bind.WatchOpts, sink chan<- *ProofofefficiencySetForceBatchAllowed) (event.Subscription, error) {

	logs, sub, err := _Proofofefficiency.contract.WatchLogs(opts, "SetForceBatchAllowed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofofefficiencySetForceBatchAllowed)
				if err := _Proofofefficiency.contract.UnpackLog(event, "SetForceBatchAllowed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetForceBatchAllowed is a log parse operation binding the contract event 0xbacda50a4a8575be1d91a7ebe29ee45056f3a94f12a2281eb6b43afa33bcefe6.
//
// Solidity: event SetForceBatchAllowed(bool newForceBatchAllowed)
func (_Proofofefficiency *ProofofefficiencyFilterer) ParseSetForceBatchAllowed(log types.Log) (*ProofofefficiencySetForceBatchAllowed, error) {
	event := new(ProofofefficiencySetForceBatchAllowed)
	if err := _Proofofefficiency.contract.UnpackLog(event, "SetForceBatchAllowed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProofofefficiencySetSecurityCouncilIterator is returned from FilterSetSecurityCouncil and is used to iterate over the raw logs and unpacked data for SetSecurityCouncil events raised by the Proofofefficiency contract.
type ProofofefficiencySetSecurityCouncilIterator struct {
	Event *ProofofefficiencySetSecurityCouncil // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofofefficiencySetSecurityCouncilIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofofefficiencySetSecurityCouncil)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofofefficiencySetSecurityCouncil)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofofefficiencySetSecurityCouncilIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofofefficiencySetSecurityCouncilIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofofefficiencySetSecurityCouncil represents a SetSecurityCouncil event raised by the Proofofefficiency contract.
type ProofofefficiencySetSecurityCouncil struct {
	NewSecurityCouncil common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterSetSecurityCouncil is a free log retrieval operation binding the contract event 0x373a9d1d60f01a33ff86d540991f09f5c5d7482656794de80be077c5eb9693d9.
//
// Solidity: event SetSecurityCouncil(address newSecurityCouncil)
func (_Proofofefficiency *ProofofefficiencyFilterer) FilterSetSecurityCouncil(opts *bind.FilterOpts) (*ProofofefficiencySetSecurityCouncilIterator, error) {

	logs, sub, err := _Proofofefficiency.contract.FilterLogs(opts, "SetSecurityCouncil")
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencySetSecurityCouncilIterator{contract: _Proofofefficiency.contract, event: "SetSecurityCouncil", logs: logs, sub: sub}, nil
}

// WatchSetSecurityCouncil is a free log subscription operation binding the contract event 0x373a9d1d60f01a33ff86d540991f09f5c5d7482656794de80be077c5eb9693d9.
//
// Solidity: event SetSecurityCouncil(address newSecurityCouncil)
func (_Proofofefficiency *ProofofefficiencyFilterer) WatchSetSecurityCouncil(opts *bind.WatchOpts, sink chan<- *ProofofefficiencySetSecurityCouncil) (event.Subscription, error) {

	logs, sub, err := _Proofofefficiency.contract.WatchLogs(opts, "SetSecurityCouncil")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofofefficiencySetSecurityCouncil)
				if err := _Proofofefficiency.contract.UnpackLog(event, "SetSecurityCouncil", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetSecurityCouncil is a log parse operation binding the contract event 0x373a9d1d60f01a33ff86d540991f09f5c5d7482656794de80be077c5eb9693d9.
//
// Solidity: event SetSecurityCouncil(address newSecurityCouncil)
func (_Proofofefficiency *ProofofefficiencyFilterer) ParseSetSecurityCouncil(log types.Log) (*ProofofefficiencySetSecurityCouncil, error) {
	event := new(ProofofefficiencySetSecurityCouncil)
	if err := _Proofofefficiency.contract.UnpackLog(event, "SetSecurityCouncil", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProofofefficiencySetTrustedSequencerIterator is returned from FilterSetTrustedSequencer and is used to iterate over the raw logs and unpacked data for SetTrustedSequencer events raised by the Proofofefficiency contract.
type ProofofefficiencySetTrustedSequencerIterator struct {
	Event *ProofofefficiencySetTrustedSequencer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofofefficiencySetTrustedSequencerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofofefficiencySetTrustedSequencer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofofefficiencySetTrustedSequencer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofofefficiencySetTrustedSequencerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofofefficiencySetTrustedSequencerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofofefficiencySetTrustedSequencer represents a SetTrustedSequencer event raised by the Proofofefficiency contract.
type ProofofefficiencySetTrustedSequencer struct {
	NewTrustedSequencer common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterSetTrustedSequencer is a free log retrieval operation binding the contract event 0xf54144f9611984021529f814a1cb6a41e22c58351510a0d9f7e822618abb9cc0.
//
// Solidity: event SetTrustedSequencer(address newTrustedSequencer)
func (_Proofofefficiency *ProofofefficiencyFilterer) FilterSetTrustedSequencer(opts *bind.FilterOpts) (*ProofofefficiencySetTrustedSequencerIterator, error) {

	logs, sub, err := _Proofofefficiency.contract.FilterLogs(opts, "SetTrustedSequencer")
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencySetTrustedSequencerIterator{contract: _Proofofefficiency.contract, event: "SetTrustedSequencer", logs: logs, sub: sub}, nil
}

// WatchSetTrustedSequencer is a free log subscription operation binding the contract event 0xf54144f9611984021529f814a1cb6a41e22c58351510a0d9f7e822618abb9cc0.
//
// Solidity: event SetTrustedSequencer(address newTrustedSequencer)
func (_Proofofefficiency *ProofofefficiencyFilterer) WatchSetTrustedSequencer(opts *bind.WatchOpts, sink chan<- *ProofofefficiencySetTrustedSequencer) (event.Subscription, error) {

	logs, sub, err := _Proofofefficiency.contract.WatchLogs(opts, "SetTrustedSequencer")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofofefficiencySetTrustedSequencer)
				if err := _Proofofefficiency.contract.UnpackLog(event, "SetTrustedSequencer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetTrustedSequencer is a log parse operation binding the contract event 0xf54144f9611984021529f814a1cb6a41e22c58351510a0d9f7e822618abb9cc0.
//
// Solidity: event SetTrustedSequencer(address newTrustedSequencer)
func (_Proofofefficiency *ProofofefficiencyFilterer) ParseSetTrustedSequencer(log types.Log) (*ProofofefficiencySetTrustedSequencer, error) {
	event := new(ProofofefficiencySetTrustedSequencer)
	if err := _Proofofefficiency.contract.UnpackLog(event, "SetTrustedSequencer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProofofefficiencySetTrustedSequencerURLIterator is returned from FilterSetTrustedSequencerURL and is used to iterate over the raw logs and unpacked data for SetTrustedSequencerURL events raised by the Proofofefficiency contract.
type ProofofefficiencySetTrustedSequencerURLIterator struct {
	Event *ProofofefficiencySetTrustedSequencerURL // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofofefficiencySetTrustedSequencerURLIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofofefficiencySetTrustedSequencerURL)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofofefficiencySetTrustedSequencerURL)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofofefficiencySetTrustedSequencerURLIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofofefficiencySetTrustedSequencerURLIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofofefficiencySetTrustedSequencerURL represents a SetTrustedSequencerURL event raised by the Proofofefficiency contract.
type ProofofefficiencySetTrustedSequencerURL struct {
	NewTrustedSequencerURL string
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterSetTrustedSequencerURL is a free log retrieval operation binding the contract event 0x6b8f723a4c7a5335cafae8a598a0aa0301be1387c037dccc085b62add6448b20.
//
// Solidity: event SetTrustedSequencerURL(string newTrustedSequencerURL)
func (_Proofofefficiency *ProofofefficiencyFilterer) FilterSetTrustedSequencerURL(opts *bind.FilterOpts) (*ProofofefficiencySetTrustedSequencerURLIterator, error) {

	logs, sub, err := _Proofofefficiency.contract.FilterLogs(opts, "SetTrustedSequencerURL")
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencySetTrustedSequencerURLIterator{contract: _Proofofefficiency.contract, event: "SetTrustedSequencerURL", logs: logs, sub: sub}, nil
}

// WatchSetTrustedSequencerURL is a free log subscription operation binding the contract event 0x6b8f723a4c7a5335cafae8a598a0aa0301be1387c037dccc085b62add6448b20.
//
// Solidity: event SetTrustedSequencerURL(string newTrustedSequencerURL)
func (_Proofofefficiency *ProofofefficiencyFilterer) WatchSetTrustedSequencerURL(opts *bind.WatchOpts, sink chan<- *ProofofefficiencySetTrustedSequencerURL) (event.Subscription, error) {

	logs, sub, err := _Proofofefficiency.contract.WatchLogs(opts, "SetTrustedSequencerURL")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofofefficiencySetTrustedSequencerURL)
				if err := _Proofofefficiency.contract.UnpackLog(event, "SetTrustedSequencerURL", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetTrustedSequencerURL is a log parse operation binding the contract event 0x6b8f723a4c7a5335cafae8a598a0aa0301be1387c037dccc085b62add6448b20.
//
// Solidity: event SetTrustedSequencerURL(string newTrustedSequencerURL)
func (_Proofofefficiency *ProofofefficiencyFilterer) ParseSetTrustedSequencerURL(log types.Log) (*ProofofefficiencySetTrustedSequencerURL, error) {
	event := new(ProofofefficiencySetTrustedSequencerURL)
	if err := _Proofofefficiency.contract.UnpackLog(event, "SetTrustedSequencerURL", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProofofefficiencyVerifyBatchesIterator is returned from FilterVerifyBatches and is used to iterate over the raw logs and unpacked data for VerifyBatches events raised by the Proofofefficiency contract.
type ProofofefficiencyVerifyBatchesIterator struct {
	Event *ProofofefficiencyVerifyBatches // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofofefficiencyVerifyBatchesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofofefficiencyVerifyBatches)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofofefficiencyVerifyBatches)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofofefficiencyVerifyBatchesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofofefficiencyVerifyBatchesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofofefficiencyVerifyBatches represents a VerifyBatches event raised by the Proofofefficiency contract.
type ProofofefficiencyVerifyBatches struct {
	NumBatch   uint64
	StateRoot  [32]byte
	Aggregator common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterVerifyBatches is a free log retrieval operation binding the contract event 0x9c72852172521097ba7e1482e6b44b351323df0155f97f4ea18fcec28e1f5966.
//
// Solidity: event VerifyBatches(uint64 indexed numBatch, bytes32 stateRoot, address indexed aggregator)
func (_Proofofefficiency *ProofofefficiencyFilterer) FilterVerifyBatches(opts *bind.FilterOpts, numBatch []uint64, aggregator []common.Address) (*ProofofefficiencyVerifyBatchesIterator, error) {

	var numBatchRule []interface{}
	for _, numBatchItem := range numBatch {
		numBatchRule = append(numBatchRule, numBatchItem)
	}

	var aggregatorRule []interface{}
	for _, aggregatorItem := range aggregator {
		aggregatorRule = append(aggregatorRule, aggregatorItem)
	}

	logs, sub, err := _Proofofefficiency.contract.FilterLogs(opts, "VerifyBatches", numBatchRule, aggregatorRule)
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencyVerifyBatchesIterator{contract: _Proofofefficiency.contract, event: "VerifyBatches", logs: logs, sub: sub}, nil
}

// WatchVerifyBatches is a free log subscription operation binding the contract event 0x9c72852172521097ba7e1482e6b44b351323df0155f97f4ea18fcec28e1f5966.
//
// Solidity: event VerifyBatches(uint64 indexed numBatch, bytes32 stateRoot, address indexed aggregator)
func (_Proofofefficiency *ProofofefficiencyFilterer) WatchVerifyBatches(opts *bind.WatchOpts, sink chan<- *ProofofefficiencyVerifyBatches, numBatch []uint64, aggregator []common.Address) (event.Subscription, error) {

	var numBatchRule []interface{}
	for _, numBatchItem := range numBatch {
		numBatchRule = append(numBatchRule, numBatchItem)
	}

	var aggregatorRule []interface{}
	for _, aggregatorItem := range aggregator {
		aggregatorRule = append(aggregatorRule, aggregatorItem)
	}

	logs, sub, err := _Proofofefficiency.contract.WatchLogs(opts, "VerifyBatches", numBatchRule, aggregatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofofefficiencyVerifyBatches)
				if err := _Proofofefficiency.contract.UnpackLog(event, "VerifyBatches", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifyBatches is a log parse operation binding the contract event 0x9c72852172521097ba7e1482e6b44b351323df0155f97f4ea18fcec28e1f5966.
//
// Solidity: event VerifyBatches(uint64 indexed numBatch, bytes32 stateRoot, address indexed aggregator)
func (_Proofofefficiency *ProofofefficiencyFilterer) ParseVerifyBatches(log types.Log) (*ProofofefficiencyVerifyBatches, error) {
	event := new(ProofofefficiencyVerifyBatches)
	if err := _Proofofefficiency.contract.UnpackLog(event, "VerifyBatches", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
