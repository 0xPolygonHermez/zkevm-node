// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package proofofefficiency

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ProofOfEfficiencyBatchData is an auto generated low-level Go binding around an user-defined struct.
type ProofOfEfficiencyBatchData struct {
	Transactions       []byte
	GlobalExitRoot     [32]byte
	Timestamp          uint64
	MinForcedTimestamp uint64
}

// ProofOfEfficiencyForceBatchData is an auto generated low-level Go binding around an user-defined struct.
type ProofOfEfficiencyForceBatchData struct {
	Transactions       []byte
	GlobalExitRoot     [32]byte
	MinForcedTimestamp uint64
}

// ProofofefficiencyMetaData contains all meta data concerning the Proofofefficiency contract.
var ProofofefficiencyMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"forceBatchNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"lastGlobalExitRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sequencer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"transactions\",\"type\":\"bytes\"}],\"name\":\"ForceBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"numBatch\",\"type\":\"uint64\"}],\"name\":\"SequenceBatches\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"numBatch\",\"type\":\"uint64\"}],\"name\":\"SequenceForceBatches\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newForceBatchAllowed\",\"type\":\"bool\"}],\"name\":\"SetForceBatchAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTrustedSequencer\",\"type\":\"address\"}],\"name\":\"SetTrustedSequencer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newTrustedSequencerURL\",\"type\":\"string\"}],\"name\":\"SetTrustedSequencerURL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"numBatch\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"VerifyBatches\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FORCE_BATCH_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BATCH_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRUSTED_SEQUENCER_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateForceProverFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateRewardPerBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainID\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"transactions\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maticAmount\",\"type\":\"uint256\"}],\"name\":\"forceBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceBatchAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"forcedBatches\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_lastVerifiedBatch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"newVerifiedBatch\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"newLocalExitRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newStateRoot\",\"type\":\"bytes32\"}],\"name\":\"getInputSnarkBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalExitRootManager\",\"outputs\":[{\"internalType\":\"contractIGlobalExitRootManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIGlobalExitRootManager\",\"name\":\"_globalExitRootManager\",\"type\":\"address\"},{\"internalType\":\"contractIERC20Upgradeable\",\"name\":\"_matic\",\"type\":\"address\"},{\"internalType\":\"contractIVerifierRollup\",\"name\":\"_rollupVerifier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"genesisRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_trustedSequencer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_forceBatchAllowed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_trustedSequencerURL\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_chainID\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"_networkName\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBatchSequenced\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastForceBatch\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastForceBatchSequenced\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastVerifiedBatch\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matic\",\"outputs\":[{\"internalType\":\"contractIERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupVerifier\",\"outputs\":[{\"internalType\":\"contractIVerifierRollup\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"transactions\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"globalExitRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minForcedTimestamp\",\"type\":\"uint64\"}],\"internalType\":\"structProofOfEfficiency.BatchData[]\",\"name\":\"batches\",\"type\":\"tuple[]\"}],\"name\":\"sequenceBatches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"transactions\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"globalExitRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"minForcedTimestamp\",\"type\":\"uint64\"}],\"internalType\":\"structProofOfEfficiency.ForceBatchData[]\",\"name\":\"batches\",\"type\":\"tuple[]\"}],\"name\":\"sequenceForceBatches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"sequencedBatches\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newForceBatchAllowed\",\"type\":\"bool\"}],\"name\":\"setForceBatchAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTrustedSequencer\",\"type\":\"address\"}],\"name\":\"setTrustedSequencer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newTrustedSequencerURL\",\"type\":\"string\"}],\"name\":\"setTrustedSequencerURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedSequencer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedSequencerURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_lastVerifiedBatch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"newVerifiedBatch\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"newLocalExitRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newStateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"proofA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"proofB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"proofC\",\"type\":\"uint256[2]\"}],\"name\":\"verifyBatches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50614e9c806100206000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c8063ac2eba9811610104578063d02103ca116100a2578063e7a7ed0211610071578063e7a7ed0214610513578063e8bf92ed14610531578063eaeb077b1461054f578063f75527611461056b576101da565b8063d02103ca1461049f578063d2fd1b31146104bd578063d8d1091b146104d9578063d8f54db0146104f5576101da565b8063b4d63f58116100de578063b4d63f5814610417578063b6b0b09714610447578063c89e42df14610465578063cfa8ed4714610481576101da565b8063ac2eba98146103bd578063adc879e9146103db578063b02286c0146103f9576101da565b80636b8616ce1161017c5780637fcb36531161014b5780637fcb3653146103475780638c4a0af71461036557806399f5634e14610381578063ab9fc5ef1461039f576101da565b80636b8616ce146102ad5780636ff512cc146102dd5780637152facf146102f95780637984705714610329576101da565b8063423fa856116101b8578063423fa856146102375780634560526714610255578063542028d51461027357806355b925e614610291576101da565b8063107bf28c146101df57806319d8ac61146101fd5780633c1582671461021b575b600080fd5b6101e7610589565b6040516101f4919061278c565b60405180910390f35b610205610617565b60405161021291906127d1565b60405180910390f35b61023560048036038101906102309190612b1b565b610631565b005b61023f610ccd565b60405161024c91906127d1565b60405180910390f35b61025d610ce7565b60405161026a91906127d1565b60405180910390f35b61027b610d01565b604051610288919061278c565b60405180910390f35b6102ab60048036038101906102a69190612ba8565b610d8f565b005b6102c760048036038101906102c29190612c4c565b6111c9565b6040516102d49190612c88565b60405180910390f35b6102f760048036038101906102f29190612d01565b6111e1565b005b610313600480360381019061030e9190612d2e565b6112ec565b6040516103209190612dea565b60405180910390f35b610331611461565b60405161033e9190612e25565b60405180910390f35b61034f6114c9565b60405161035c91906127d1565b60405180910390f35b61037f600480360381019061037a9190612e78565b6114e3565b005b6103896115c7565b6040516103969190612e25565b60405180910390f35b6103a7611703565b6040516103b491906127d1565b60405180910390f35b6103c561170a565b6040516103d29190612c88565b60405180910390f35b6103e3611710565b6040516103f091906127d1565b60405180910390f35b61040161172a565b60405161040e9190612e25565b60405180910390f35b610431600480360381019061042c9190612c4c565b611730565b60405161043e9190612c88565b60405180910390f35b61044f611748565b60405161045c9190612f04565b60405180910390f35b61047f600480360381019061047a9190612fc0565b61176e565b005b610489611848565b6040516104969190613018565b60405180910390f35b6104a761186e565b6040516104b49190613054565b60405180910390f35b6104d760048036038101906104d29190613129565b611894565b005b6104f360048036038101906104ee919061338c565b611b41565b005b6104fd611f85565b60405161050a91906133e4565b60405180910390f35b61051b611f98565b60405161052891906127d1565b60405180910390f35b610539611fb2565b6040516105469190613420565b60405180910390f35b61056960048036038101906105649190613467565b611fd8565b005b61057361235b565b6040516105809190612e25565b60405180910390f35b600a8054610596906134f2565b80601f01602080910402602001604051908101604052809291908181526020018280546105c2906134f2565b801561060f5780601f106105e45761010080835404028352916020019161060f565b820191906000526020600020905b8154815290600101906020018083116105f257829003601f168201915b505050505081565b600360009054906101000a900467ffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff16600460089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b890613595565b60405180910390fd5b6000815190506000600360009054906101000a900467ffffffffffffffff1690506000600360089054906101000a900467ffffffffffffffff1690506000600360109054906101000a900467ffffffffffffffff1690506000600260008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002054905060005b85811015610ac5576000878281518110610764576107636135b5565b5b602002602001015190506000816060015167ffffffffffffffff1611156108a357838061079090613613565b9450506000816000015180519060200120826020015183606001516040516020016107bd9392919061369a565b604051602081830303815290604052805190602001209050600160008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002054811461083e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108359061376f565b60405180910390fd5b816060015167ffffffffffffffff16826040015167ffffffffffffffff16101561089d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089490613827565b60405180910390fd5b506109e3565b6000801b8160200151148061095a57506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663257b363283602001516040518263ffffffff1660e01b81526004016109149190612c88565b6020604051808303816000875af1158015610933573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610957919061385c565b14155b610999576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610990906138fb565b60405180910390fd5b61ea60816000015151106109e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d99061398d565b60405180910390fd5b5b8567ffffffffffffffff16816040015167ffffffffffffffff1610158015610a19575042816040015167ffffffffffffffff1611155b610a58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4f90613a45565b60405180910390fd5b828160000151805190602001208260200151836040015133604051602001610a84959493929190613aad565b6040516020818303038152906040528051906020012092508480610aa790613613565b95505080604001519550508080610abd90613b0c565b915050610747565b50600360189054906101000a900467ffffffffffffffff1667ffffffffffffffff168267ffffffffffffffff161115610b33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2a90613bc6565b60405180910390fd5b6000600360109054906101000a900467ffffffffffffffff1683610b579190613be6565b67ffffffffffffffff1686610b6c9190613c1a565b905084600360006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083600360086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555082600360106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081600260008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002081905550610c7733308367016345785d8a0000610c2e9190613c4e565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612367909392919063ffffffff16565b600360089054906101000a900467ffffffffffffffff1667ffffffffffffffff167f303446e6a8cb73c83dff421c0b1d5e5ce0719dab1bff13660fc254e58cc17fce60405160405180910390a250505050505050565b600360089054906101000a900467ffffffffffffffff1681565b600360109054906101000a900467ffffffffffffffff1681565b60088054610d0e906134f2565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3a906134f2565b8015610d875780601f10610d5c57610100808354040283529160200191610d87565b820191906000526020600020905b815481529060010190602001808311610d6a57829003601f168201915b505050505081565b600460009054906101000a900467ffffffffffffffff1667ffffffffffffffff168767ffffffffffffffff1614610dfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df290613d40565b60405180910390fd5b8667ffffffffffffffff168667ffffffffffffffff1611610e51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4890613df8565b60405180910390fd5b600360089054906101000a900467ffffffffffffffff1667ffffffffffffffff168667ffffffffffffffff161115610ebe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb590613eb0565b60405180910390fd5b6000610ecc888888886112ec565b905060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001600283604051610f019190613f0c565b602060405180830381855afa158015610f1e573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610f419190613f38565b60001c610f4e9190613f94565b9050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343753b4d8686866040518060200160405280878152506040518563ffffffff1660e01b8152600401610fbf949392919061413f565b602060405180830381865afa158015610fdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611000919061419b565b61103f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110369061423a565b60405180910390fd5b6110b3338a8a61104f9190613be6565b67ffffffffffffffff166110616115c7565b61106b9190613c4e565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123f09092919063ffffffff16565b87600460006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555085600681905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166333d6247d886040518263ffffffff1660e01b815260040161113e9190612c88565b600060405180830381600087803b15801561115857600080fd5b505af115801561116c573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168867ffffffffffffffff167f9026f258d76afa912681d3fc727111cbab19565af9f03c5323627d6e51dda08360405160405180910390a3505050505050505050565b60016020528060005260406000206000915090505481565b3373ffffffffffffffffffffffffffffffffffffffff16600460089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611271576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126890613595565b60405180910390fd5b80600460086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff54144f9611984021529f814a1cb6a41e22c58351510a0d9f7e822618abb9cc0816040516112e19190613018565b60405180910390a150565b60606000600260008767ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000205490506000600260008767ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000205490506000801b810361138b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611382906142f2565b60405180910390fd5b6060604051905061016c604082010160405261016c8152602081016113e2565b600082905060005b60088110156113db5782602082021c60e01b60201c82526008820191506001810190506113b3565b5092915050565b6113ee816006546113ab565b90506113fa81876113ab565b905061140681856113ab565b905061141281846113ab565b905061141e81886113ab565b90508860c01b81526008810190508760c01b815260088101905060095460c01b81526008810190503360601b815260148101905050809350505050949350505050565b6000600360109054906101000a900467ffffffffffffffff16600360189054906101000a900467ffffffffffffffff16600161149d9190614312565b6114a79190613be6565b67ffffffffffffffff16670de0b6b3a76400006114c49190613c4e565b905090565b600460009054906101000a900467ffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff16600460089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156a90613595565b60405180910390fd5b806004601c6101000a81548160ff0219169083151502179055507fbacda50a4a8575be1d91a7ebe29ee45056f3a94f12a2281eb6b43afa33bcefe6816040516115bc91906133e4565b60405180910390a150565b600080600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116259190613018565b602060405180830381865afa158015611642573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611666919061385c565b90506000600460009054906101000a900467ffffffffffffffff16600360089054906101000a900467ffffffffffffffff16600360109054906101000a900467ffffffffffffffff16600360189054906101000a900467ffffffffffffffff166116d09190613be6565b6116da9190614312565b6116e49190613be6565b67ffffffffffffffff16905080826116fc9190614350565b9250505090565b62093a8081565b60065481565b600960009054906101000a900467ffffffffffffffff1681565b61ea6081565b60026020528060005260406000206000915090505481565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff16600460089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146117fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f590613595565b60405180910390fd5b806008908161180d9190614523565b507f6b8f723a4c7a5335cafae8a598a0aa0301be1387c037dccc085b62add6448b208160405161183d919061278c565b60405180910390a150565b600460089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060019054906101000a900460ff161590508080156118c55750600160008054906101000a900460ff1660ff16105b806118f257506118d430612476565b1580156118f15750600160008054906101000a900460ff1660ff16145b5b611931576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192890614667565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561196e576001600060016101000a81548160ff0219169083151502179055505b89600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555088600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508660068190555085600460086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550846004601c6101000a81548160ff0219169083151502179055508360089081611aa29190614523565b5082600960006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081600a9081611adb9190614523565b508015611b355760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611b2c91906146cf565b60405180910390a15b50505050505050505050565b600115156004601c9054906101000a900460ff16151514611b97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8e90614782565b60405180910390fd5b60008151905060008111611be0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd79061483a565b60405180910390fd5b600360189054906101000a900467ffffffffffffffff1667ffffffffffffffff1681600360109054906101000a900467ffffffffffffffff1667ffffffffffffffff16611c2d919061485a565b1115611c6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6590614922565b60405180910390fd5b6000600360089054906101000a900467ffffffffffffffff1690506000600360109054906101000a900467ffffffffffffffff1690506000600260008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002054905060005b84811015611e89576000868281518110611cf057611cef6135b5565b5b602002602001015190508380611d0590613613565b945050600081600001518051906020012082602001518360400151604051602001611d329392919061369a565b604051602081830303815290604052805190602001209050600160008667ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020548114611db3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611daa906149da565b60405180910390fd5b600187611dc09190613c1a565b8303611e26574262093a808360400151611dda9190614312565b67ffffffffffffffff161115611e25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1c90614a92565b60405180910390fd5b5b8382600001518051906020012083602001514233604051602001611e4e959493929190613aad565b6040516020818303038152906040528051906020012093508580611e7190613613565b96505050508080611e8190613b0c565b915050611cd3565b5042600360006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555082600360086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081600360106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600260008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002081905550600360089054906101000a900467ffffffffffffffff1667ffffffffffffffff167f648a61dd2438f072f5a1960939abd30f37aea80d2e94c9792ad142d3e0a490a460405160405180910390a25050505050565b6004601c9054906101000a900460ff1681565b600360189054906101000a900467ffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600115156004601c9054906101000a900460ff1615151461202e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202590614782565b60405180910390fd5b6000612038611461565b90508181111561207d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207490614b24565b60405180910390fd5b61ea608351106120c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b990614bb6565b60405180910390fd5b612111333083600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612367909392919063ffffffff16565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ed691ef6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a49190613f38565b90506003601881819054906101000a900467ffffffffffffffff16809291906121cc90613613565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550508380519060200120814260405160200161220f9392919061369a565b6040516020818303038152906040528051906020012060016000600360189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020819055503273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036122f857600360189054906101000a900467ffffffffffffffff1667ffffffffffffffff167ff94bb37db835f1ab585ee00041849a09b12cd081d77fa15ca070757619cbc93182336040516122eb929190614bfc565b60405180910390a2612355565b600360189054906101000a900467ffffffffffffffff1667ffffffffffffffff167ff94bb37db835f1ab585ee00041849a09b12cd081d77fa15ca070757619cbc93182338760405161234c93929190614c38565b60405180910390a25b50505050565b67016345785d8a000081565b6123ea846323b872dd60e01b85858560405160240161238893929190614c76565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612499565b50505050565b6124718363a9059cbb60e01b848460405160240161240f929190614cad565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612499565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60006124fb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166125609092919063ffffffff16565b905060008151111561255b578080602001905181019061251b919061419b565b61255a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255190614d48565b60405180910390fd5b5b505050565b606061256f8484600085612578565b90509392505050565b6060824710156125bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125b490614dda565b60405180910390fd5b6125c685612476565b612605576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125fc90614e46565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161262e9190613f0c565b60006040518083038185875af1925050503d806000811461266b576040519150601f19603f3d011682016040523d82523d6000602084013e612670565b606091505b509150915061268082828661268c565b92505050949350505050565b6060831561269c578290506126ec565b6000835111156126af5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e3919061278c565b60405180910390fd5b9392505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561272d578082015181840152602081019050612712565b8381111561273c576000848401525b50505050565b6000601f19601f8301169050919050565b600061275e826126f3565b61276881856126fe565b935061277881856020860161270f565b61278181612742565b840191505092915050565b600060208201905081810360008301526127a68184612753565b905092915050565b600067ffffffffffffffff82169050919050565b6127cb816127ae565b82525050565b60006020820190506127e660008301846127c2565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61283d82612742565b810181811067ffffffffffffffff8211171561285c5761285b612805565b5b80604052505050565b600061286f6127ec565b905061287b8282612834565b919050565b600067ffffffffffffffff82111561289b5761289a612805565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff8211156128db576128da612805565b5b6128e482612742565b9050602081019050919050565b82818337600083830152505050565b600061291361290e846128c0565b612865565b90508281526020810184848401111561292f5761292e6128bb565b5b61293a8482856128f1565b509392505050565b600082601f83011261295757612956612800565b5b8135612967848260208601612900565b91505092915050565b6000819050919050565b61298381612970565b811461298e57600080fd5b50565b6000813590506129a08161297a565b92915050565b6129af816127ae565b81146129ba57600080fd5b50565b6000813590506129cc816129a6565b92915050565b6000608082840312156129e8576129e76128b1565b5b6129f26080612865565b9050600082013567ffffffffffffffff811115612a1257612a116128b6565b5b612a1e84828501612942565b6000830152506020612a3284828501612991565b6020830152506040612a46848285016129bd565b6040830152506060612a5a848285016129bd565b60608301525092915050565b6000612a79612a7484612880565b612865565b90508083825260208201905060208402830185811115612a9c57612a9b6128ac565b5b835b81811015612ae357803567ffffffffffffffff811115612ac157612ac0612800565b5b808601612ace89826129d2565b85526020850194505050602081019050612a9e565b5050509392505050565b600082601f830112612b0257612b01612800565b5b8135612b12848260208601612a66565b91505092915050565b600060208284031215612b3157612b306127f6565b5b600082013567ffffffffffffffff811115612b4f57612b4e6127fb565b5b612b5b84828501612aed565b91505092915050565b600081905082602060020282011115612b8057612b7f6128ac565b5b92915050565b600081905082604060020282011115612ba257612ba16128ac565b5b92915050565b6000806000806000806000610180888a031215612bc857612bc76127f6565b5b6000612bd68a828b016129bd565b9750506020612be78a828b016129bd565b9650506040612bf88a828b01612991565b9550506060612c098a828b01612991565b9450506080612c1a8a828b01612b64565b93505060c0612c2b8a828b01612b86565b925050610140612c3d8a828b01612b64565b91505092959891949750929550565b600060208284031215612c6257612c616127f6565b5b6000612c70848285016129bd565b91505092915050565b612c8281612970565b82525050565b6000602082019050612c9d6000830184612c79565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612cce82612ca3565b9050919050565b612cde81612cc3565b8114612ce957600080fd5b50565b600081359050612cfb81612cd5565b92915050565b600060208284031215612d1757612d166127f6565b5b6000612d2584828501612cec565b91505092915050565b60008060008060808587031215612d4857612d476127f6565b5b6000612d56878288016129bd565b9450506020612d67878288016129bd565b9350506040612d7887828801612991565b9250506060612d8987828801612991565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000612dbc82612d95565b612dc68185612da0565b9350612dd681856020860161270f565b612ddf81612742565b840191505092915050565b60006020820190508181036000830152612e048184612db1565b905092915050565b6000819050919050565b612e1f81612e0c565b82525050565b6000602082019050612e3a6000830184612e16565b92915050565b60008115159050919050565b612e5581612e40565b8114612e6057600080fd5b50565b600081359050612e7281612e4c565b92915050565b600060208284031215612e8e57612e8d6127f6565b5b6000612e9c84828501612e63565b91505092915050565b6000819050919050565b6000612eca612ec5612ec084612ca3565b612ea5565b612ca3565b9050919050565b6000612edc82612eaf565b9050919050565b6000612eee82612ed1565b9050919050565b612efe81612ee3565b82525050565b6000602082019050612f196000830184612ef5565b92915050565b600067ffffffffffffffff821115612f3a57612f39612805565b5b612f4382612742565b9050602081019050919050565b6000612f63612f5e84612f1f565b612865565b905082815260208101848484011115612f7f57612f7e6128bb565b5b612f8a8482856128f1565b509392505050565b600082601f830112612fa757612fa6612800565b5b8135612fb7848260208601612f50565b91505092915050565b600060208284031215612fd657612fd56127f6565b5b600082013567ffffffffffffffff811115612ff457612ff36127fb565b5b61300084828501612f92565b91505092915050565b61301281612cc3565b82525050565b600060208201905061302d6000830184613009565b92915050565b600061303e82612ed1565b9050919050565b61304e81613033565b82525050565b60006020820190506130696000830184613045565b92915050565b600061307a82612cc3565b9050919050565b61308a8161306f565b811461309557600080fd5b50565b6000813590506130a781613081565b92915050565b60006130b882612cc3565b9050919050565b6130c8816130ad565b81146130d357600080fd5b50565b6000813590506130e5816130bf565b92915050565b60006130f682612cc3565b9050919050565b613106816130eb565b811461311157600080fd5b50565b600081359050613123816130fd565b92915050565b60008060008060008060008060006101208a8c03121561314c5761314b6127f6565b5b600061315a8c828d01613098565b995050602061316b8c828d016130d6565b985050604061317c8c828d01613114565b975050606061318d8c828d01612991565b965050608061319e8c828d01612cec565b95505060a06131af8c828d01612e63565b94505060c08a013567ffffffffffffffff8111156131d0576131cf6127fb565b5b6131dc8c828d01612f92565b93505060e06131ed8c828d016129bd565b9250506101008a013567ffffffffffffffff81111561320f5761320e6127fb565b5b61321b8c828d01612f92565b9150509295985092959850929598565b600067ffffffffffffffff82111561324657613245612805565b5b602082029050602081019050919050565b60006060828403121561326d5761326c6128b1565b5b6132776060612865565b9050600082013567ffffffffffffffff811115613297576132966128b6565b5b6132a384828501612942565b60008301525060206132b784828501612991565b60208301525060406132cb848285016129bd565b60408301525092915050565b60006132ea6132e58461322b565b612865565b9050808382526020820190506020840283018581111561330d5761330c6128ac565b5b835b8181101561335457803567ffffffffffffffff81111561333257613331612800565b5b80860161333f8982613257565b8552602085019450505060208101905061330f565b5050509392505050565b600082601f83011261337357613372612800565b5b81356133838482602086016132d7565b91505092915050565b6000602082840312156133a2576133a16127f6565b5b600082013567ffffffffffffffff8111156133c0576133bf6127fb565b5b6133cc8482850161335e565b91505092915050565b6133de81612e40565b82525050565b60006020820190506133f960008301846133d5565b92915050565b600061340a82612ed1565b9050919050565b61341a816133ff565b82525050565b60006020820190506134356000830184613411565b92915050565b61344481612e0c565b811461344f57600080fd5b50565b6000813590506134618161343b565b92915050565b6000806040838503121561347e5761347d6127f6565b5b600083013567ffffffffffffffff81111561349c5761349b6127fb565b5b6134a885828601612942565b92505060206134b985828601613452565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061350a57607f821691505b60208210810361351d5761351c6134c3565b5b50919050565b7f50726f6f664f66456666696369656e63793a3a6f6e6c7954727573746564536560008201527f7175656e6365723a206f6e6c7920747275737465642073657175656e63657200602082015250565b600061357f603f836126fe565b915061358a82613523565b604082019050919050565b600060208201905081810360008301526135ae81613572565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061361e826127ae565b915067ffffffffffffffff8203613638576136376135e4565b5b600182019050919050565b6000819050919050565b61365e61365982612970565b613643565b82525050565b60008160c01b9050919050565b600061367c82613664565b9050919050565b61369461368f826127ae565b613671565b82525050565b60006136a6828661364d565b6020820191506136b6828561364d565b6020820191506136c68284613683565b600882019150819050949350505050565b7f50726f6f664f66456666696369656e63793a3a73657175656e6365426174636860008201527f65733a20466f7263656420626174636865732064617461206d757374206d617460208201527f6368000000000000000000000000000000000000000000000000000000000000604082015250565b60006137596042836126fe565b9150613764826136d7565b606082019050919050565b600060208201905081810360008301526137888161374c565b9050919050565b7f50726f6f664f66456666696369656e63793a3a73657175656e6365426174636860008201527f65733a20466f7263656420626174636865732074696d657374616d70206d757360208201527f7420626520626967676572206f7220657175616c207468616e206d696e000000604082015250565b6000613811605d836126fe565b915061381c8261378f565b606082019050919050565b6000602082019050818103600083015261384081613804565b9050919050565b6000815190506138568161343b565b92915050565b600060208284031215613872576138716127f6565b5b600061388084828501613847565b91505092915050565b7f50726f6f664f66456666696369656e63793a3a73657175656e6365426174636860008201527f65733a20476c6f62616c206578697420726f6f74206d75737420657869737400602082015250565b60006138e5603f836126fe565b91506138f082613889565b604082019050919050565b60006020820190508181036000830152613914816138d8565b9050919050565b7f50726f6f664f66456666696369656e63793a3a73657175656e6365426174636860008201527f65733a205472616e73616374696f6e73206279746573206f766572666c6f7700602082015250565b6000613977603f836126fe565b91506139828261391b565b604082019050919050565b600060208201905081810360008301526139a68161396a565b9050919050565b7f50726f6f664f66456666696369656e63793a3a73657175656e6365426174636860008201527f65733a2054696d657374616d70206d75737420626520696e736964652072616e60208201527f6765000000000000000000000000000000000000000000000000000000000000604082015250565b6000613a2f6042836126fe565b9150613a3a826139ad565b606082019050919050565b60006020820190508181036000830152613a5e81613a22565b9050919050565b60008160601b9050919050565b6000613a7d82613a65565b9050919050565b6000613a8f82613a72565b9050919050565b613aa7613aa282612cc3565b613a84565b82525050565b6000613ab9828861364d565b602082019150613ac9828761364d565b602082019150613ad9828661364d565b602082019150613ae98285613683565b600882019150613af98284613a96565b6014820191508190509695505050505050565b6000613b1782612e0c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613b4957613b486135e4565b5b600182019050919050565b7f50726f6f664f66456666696369656e63793a3a73657175656e6365426174636860008201527f65733a20466f7263652062617463686573206f766572666c6f77000000000000602082015250565b6000613bb0603a836126fe565b9150613bbb82613b54565b604082019050919050565b60006020820190508181036000830152613bdf81613ba3565b9050919050565b6000613bf1826127ae565b9150613bfc836127ae565b925082821015613c0f57613c0e6135e4565b5b828203905092915050565b6000613c2582612e0c565b9150613c3083612e0c565b925082821015613c4357613c426135e4565b5b828203905092915050565b6000613c5982612e0c565b9150613c6483612e0c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613c9d57613c9c6135e4565b5b828202905092915050565b7f50726f6f664f66456666696369656e63793a3a7665726966794261746368657360008201527f3a205f6c6173745665726966696564426174636820646f6573206e6f74206d6160208201527f7463680000000000000000000000000000000000000000000000000000000000604082015250565b6000613d2a6043836126fe565b9150613d3582613ca8565b606082019050919050565b60006020820190508181036000830152613d5981613d1d565b9050919050565b7f50726f6f664f66456666696369656e63793a3a7665726966794261746368657360008201527f3a206e657756657269666965644261746368206d75737420626520626967676560208201527f72207468616e206c617374566572696669656442617463680000000000000000604082015250565b6000613de26058836126fe565b9150613ded82613d60565b606082019050919050565b60006020820190508181036000830152613e1181613dd5565b9050919050565b7f50726f6f664f66456666696369656e63793a3a7665726966794261746368657360008201527f3a20626174636820646f6573206e6f742068617665206265656e20736571756560208201527f6e63656400000000000000000000000000000000000000000000000000000000604082015250565b6000613e9a6044836126fe565b9150613ea582613e18565b606082019050919050565b60006020820190508181036000830152613ec981613e8d565b9050919050565b600081905092915050565b6000613ee682612d95565b613ef08185613ed0565b9350613f0081856020860161270f565b80840191505092915050565b6000613f188284613edb565b915081905092915050565b600081519050613f328161297a565b92915050565b600060208284031215613f4e57613f4d6127f6565b5b6000613f5c84828501613f23565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613f9f82612e0c565b9150613faa83612e0c565b925082613fba57613fb9613f65565b5b828206905092915050565b613fd1604083836128f1565b5050565b600060029050919050565b600081905092915050565b6000819050919050565b614001604083836128f1565b5050565b60006140118383613ff5565b60408301905092915050565b600082905092915050565b6000604082019050919050565b61403e81613fd5565b6140488184613fe0565b925061405382613feb565b8060005b8381101561408c57614069828461401d565b6140738782614005565b965061407e83614028565b925050600181019050614057565b505050505050565b600060019050919050565b600081905092915050565b6000819050919050565b6140bd81612e0c565b82525050565b60006140cf83836140b4565b60208301905092915050565b6000602082019050919050565b6140f181614094565b6140fb818461409f565b9250614106826140aa565b8060005b8381101561413757815161411e87826140c3565b9650614129836140db565b92505060018101905061410a565b505050505050565b6000610120820190506141556000830187613fc5565b6141626040830186614035565b61416f60c0830185613fc5565b61417d6101008301846140e8565b95945050505050565b60008151905061419581612e4c565b92915050565b6000602082840312156141b1576141b06127f6565b5b60006141bf84828501614186565b91505092915050565b7f50726f6f664f66456666696369656e63793a3a7665726966794261746368657360008201527f3a20494e56414c49445f50524f4f460000000000000000000000000000000000602082015250565b6000614224602f836126fe565b915061422f826141c8565b604082019050919050565b6000602082019050818103600083015261425381614217565b9050919050565b7f50726f6f664f66456666696369656e63793a3a676574496e707574536e61726b60008201527f42797465733a206e6577416363496e7075744861736820646f6573206e6f742060208201527f6578697374000000000000000000000000000000000000000000000000000000604082015250565b60006142dc6045836126fe565b91506142e78261425a565b606082019050919050565b6000602082019050818103600083015261430b816142cf565b9050919050565b600061431d826127ae565b9150614328836127ae565b92508267ffffffffffffffff03821115614345576143446135e4565b5b828201905092915050565b600061435b82612e0c565b915061436683612e0c565b92508261437657614375613f65565b5b828204905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026143e37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826143a6565b6143ed86836143a6565b95508019841693508086168417925050509392505050565b600061442061441b61441684612e0c565b612ea5565b612e0c565b9050919050565b6000819050919050565b61443a83614405565b61444e61444682614427565b8484546143b3565b825550505050565b600090565b614463614456565b61446e818484614431565b505050565b5b818110156144925761448760008261445b565b600181019050614474565b5050565b601f8211156144d7576144a881614381565b6144b184614396565b810160208510156144c0578190505b6144d46144cc85614396565b830182614473565b50505b505050565b600082821c905092915050565b60006144fa600019846008026144dc565b1980831691505092915050565b600061451383836144e9565b9150826002028217905092915050565b61452c826126f3565b67ffffffffffffffff81111561454557614544612805565b5b61454f82546134f2565b61455a828285614496565b600060209050601f83116001811461458d576000841561457b578287015190505b6145858582614507565b8655506145ed565b601f19841661459b86614381565b60005b828110156145c35784890151825560018201915060208501945060208101905061459e565b868310156145e057848901516145dc601f8916826144e9565b8355505b6001600288020188555050505b505050505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000614651602e836126fe565b915061465c826145f5565b604082019050919050565b6000602082019050818103600083015261468081614644565b9050919050565b6000819050919050565b600060ff82169050919050565b60006146b96146b46146af84614687565b612ea5565b614691565b9050919050565b6146c98161469e565b82525050565b60006020820190506146e460008301846146c0565b92915050565b7f50726f6f664f66456666696369656e63793a3a6973466f72636542617463684160008201527f6c6c6f7765643a206f6e6c7920696620666f726365206261746368206973206160208201527f7661696c61626c65000000000000000000000000000000000000000000000000604082015250565b600061476c6048836126fe565b9150614777826146ea565b606082019050919050565b6000602082019050818103600083015261479b8161475f565b9050919050565b7f50726f6f664f66456666696369656e63793a3a73657175656e6365466f72636560008201527f42617463683a204d75737420666f726365206174206c6561737420312062617460208201527f6368000000000000000000000000000000000000000000000000000000000000604082015250565b60006148246042836126fe565b915061482f826147a2565b606082019050919050565b6000602082019050818103600083015261485381614817565b9050919050565b600061486582612e0c565b915061487083612e0c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156148a5576148a46135e4565b5b828201905092915050565b7f50726f6f664f66456666696369656e63793a3a73657175656e6365466f72636560008201527f42617463683a20466f72636520626174636820696e76616c6964000000000000602082015250565b600061490c603a836126fe565b9150614917826148b0565b604082019050919050565b6000602082019050818103600083015261493b816148ff565b9050919050565b7f50726f6f664f66456666696369656e63793a3a73657175656e6365466f72636560008201527f426174636865733a20466f7263656420626174636865732064617461206d757360208201527f74206d6174636800000000000000000000000000000000000000000000000000604082015250565b60006149c46047836126fe565b91506149cf82614942565b606082019050919050565b600060208201905081810360008301526149f3816149b7565b9050919050565b7f50726f6f664f66456666696369656e63793a3a73657175656e6365466f72636560008201527f42617463683a20466f72636564206261746368206973206e6f7420696e20746960208201527f6d656f757420706572696f640000000000000000000000000000000000000000604082015250565b6000614a7c604c836126fe565b9150614a87826149fa565b606082019050919050565b60006020820190508181036000830152614aab81614a6f565b9050919050565b7f50726f6f664f66456666696369656e63793a3a666f72636542617463683a206e60008201527f6f7420656e6f756768206d617469630000000000000000000000000000000000602082015250565b6000614b0e602f836126fe565b9150614b1982614ab2565b604082019050919050565b60006020820190508181036000830152614b3d81614b01565b9050919050565b7f50726f6f664f66456666696369656e63793a3a666f72636542617463683a205460008201527f72616e73616374696f6e73206279746573206f766572666c6f77000000000000602082015250565b6000614ba0603a836126fe565b9150614bab82614b44565b604082019050919050565b60006020820190508181036000830152614bcf81614b93565b9050919050565b50565b6000614be6600083612da0565b9150614bf182614bd6565b600082019050919050565b6000606082019050614c116000830185612c79565b614c1e6020830184613009565b8181036040830152614c2f81614bd9565b90509392505050565b6000606082019050614c4d6000830186612c79565b614c5a6020830185613009565b8181036040830152614c6c8184612db1565b9050949350505050565b6000606082019050614c8b6000830186613009565b614c986020830185613009565b614ca56040830184612e16565b949350505050565b6000604082019050614cc26000830185613009565b614ccf6020830184612e16565b9392505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000614d32602a836126fe565b9150614d3d82614cd6565b604082019050919050565b60006020820190508181036000830152614d6181614d25565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000614dc46026836126fe565b9150614dcf82614d68565b604082019050919050565b60006020820190508181036000830152614df381614db7565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000614e30601d836126fe565b9150614e3b82614dfa565b602082019050919050565b60006020820190508181036000830152614e5f81614e23565b905091905056fea26469706673582212206b8b11edf2d095985509f8d6f117139e38f8eb1f09a11d2eedb1f9d6c08b09c364736f6c634300080f0033",
}

// ProofofefficiencyABI is the input ABI used to generate the binding from.
// Deprecated: Use ProofofefficiencyMetaData.ABI instead.
var ProofofefficiencyABI = ProofofefficiencyMetaData.ABI

// ProofofefficiencyBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ProofofefficiencyMetaData.Bin instead.
var ProofofefficiencyBin = ProofofefficiencyMetaData.Bin

// DeployProofofefficiency deploys a new Ethereum contract, binding an instance of Proofofefficiency to it.
func DeployProofofefficiency(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Proofofefficiency, error) {
	parsed, err := ProofofefficiencyMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ProofofefficiencyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Proofofefficiency{ProofofefficiencyCaller: ProofofefficiencyCaller{contract: contract}, ProofofefficiencyTransactor: ProofofefficiencyTransactor{contract: contract}, ProofofefficiencyFilterer: ProofofefficiencyFilterer{contract: contract}}, nil
}

// Proofofefficiency is an auto generated Go binding around an Ethereum contract.
type Proofofefficiency struct {
	ProofofefficiencyCaller     // Read-only binding to the contract
	ProofofefficiencyTransactor // Write-only binding to the contract
	ProofofefficiencyFilterer   // Log filterer for contract events
}

// ProofofefficiencyCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProofofefficiencyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProofofefficiencyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProofofefficiencyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProofofefficiencyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProofofefficiencyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProofofefficiencySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProofofefficiencySession struct {
	Contract     *Proofofefficiency // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ProofofefficiencyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProofofefficiencyCallerSession struct {
	Contract *ProofofefficiencyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ProofofefficiencyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProofofefficiencyTransactorSession struct {
	Contract     *ProofofefficiencyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ProofofefficiencyRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProofofefficiencyRaw struct {
	Contract *Proofofefficiency // Generic contract binding to access the raw methods on
}

// ProofofefficiencyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProofofefficiencyCallerRaw struct {
	Contract *ProofofefficiencyCaller // Generic read-only contract binding to access the raw methods on
}

// ProofofefficiencyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProofofefficiencyTransactorRaw struct {
	Contract *ProofofefficiencyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProofofefficiency creates a new instance of Proofofefficiency, bound to a specific deployed contract.
func NewProofofefficiency(address common.Address, backend bind.ContractBackend) (*Proofofefficiency, error) {
	contract, err := bindProofofefficiency(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Proofofefficiency{ProofofefficiencyCaller: ProofofefficiencyCaller{contract: contract}, ProofofefficiencyTransactor: ProofofefficiencyTransactor{contract: contract}, ProofofefficiencyFilterer: ProofofefficiencyFilterer{contract: contract}}, nil
}

// NewProofofefficiencyCaller creates a new read-only instance of Proofofefficiency, bound to a specific deployed contract.
func NewProofofefficiencyCaller(address common.Address, caller bind.ContractCaller) (*ProofofefficiencyCaller, error) {
	contract, err := bindProofofefficiency(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencyCaller{contract: contract}, nil
}

// NewProofofefficiencyTransactor creates a new write-only instance of Proofofefficiency, bound to a specific deployed contract.
func NewProofofefficiencyTransactor(address common.Address, transactor bind.ContractTransactor) (*ProofofefficiencyTransactor, error) {
	contract, err := bindProofofefficiency(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencyTransactor{contract: contract}, nil
}

// NewProofofefficiencyFilterer creates a new log filterer instance of Proofofefficiency, bound to a specific deployed contract.
func NewProofofefficiencyFilterer(address common.Address, filterer bind.ContractFilterer) (*ProofofefficiencyFilterer, error) {
	contract, err := bindProofofefficiency(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencyFilterer{contract: contract}, nil
}

// bindProofofefficiency binds a generic wrapper to an already deployed contract.
func bindProofofefficiency(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ProofofefficiencyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Proofofefficiency *ProofofefficiencyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Proofofefficiency.Contract.ProofofefficiencyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Proofofefficiency *ProofofefficiencyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.ProofofefficiencyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Proofofefficiency *ProofofefficiencyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.ProofofefficiencyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Proofofefficiency *ProofofefficiencyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Proofofefficiency.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Proofofefficiency *ProofofefficiencyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Proofofefficiency *ProofofefficiencyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.contract.Transact(opts, method, params...)
}

// FORCEBATCHTIMEOUT is a free data retrieval call binding the contract method 0xab9fc5ef.
//
// Solidity: function FORCE_BATCH_TIMEOUT() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCaller) FORCEBATCHTIMEOUT(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "FORCE_BATCH_TIMEOUT")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FORCEBATCHTIMEOUT is a free data retrieval call binding the contract method 0xab9fc5ef.
//
// Solidity: function FORCE_BATCH_TIMEOUT() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencySession) FORCEBATCHTIMEOUT() (uint64, error) {
	return _Proofofefficiency.Contract.FORCEBATCHTIMEOUT(&_Proofofefficiency.CallOpts)
}

// FORCEBATCHTIMEOUT is a free data retrieval call binding the contract method 0xab9fc5ef.
//
// Solidity: function FORCE_BATCH_TIMEOUT() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCallerSession) FORCEBATCHTIMEOUT() (uint64, error) {
	return _Proofofefficiency.Contract.FORCEBATCHTIMEOUT(&_Proofofefficiency.CallOpts)
}

// MAXBATCHLENGTH is a free data retrieval call binding the contract method 0xb02286c0.
//
// Solidity: function MAX_BATCH_LENGTH() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencyCaller) MAXBATCHLENGTH(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "MAX_BATCH_LENGTH")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXBATCHLENGTH is a free data retrieval call binding the contract method 0xb02286c0.
//
// Solidity: function MAX_BATCH_LENGTH() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencySession) MAXBATCHLENGTH() (*big.Int, error) {
	return _Proofofefficiency.Contract.MAXBATCHLENGTH(&_Proofofefficiency.CallOpts)
}

// MAXBATCHLENGTH is a free data retrieval call binding the contract method 0xb02286c0.
//
// Solidity: function MAX_BATCH_LENGTH() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencyCallerSession) MAXBATCHLENGTH() (*big.Int, error) {
	return _Proofofefficiency.Contract.MAXBATCHLENGTH(&_Proofofefficiency.CallOpts)
}

// TRUSTEDSEQUENCERFEE is a free data retrieval call binding the contract method 0xf7552761.
//
// Solidity: function TRUSTED_SEQUENCER_FEE() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencyCaller) TRUSTEDSEQUENCERFEE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "TRUSTED_SEQUENCER_FEE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TRUSTEDSEQUENCERFEE is a free data retrieval call binding the contract method 0xf7552761.
//
// Solidity: function TRUSTED_SEQUENCER_FEE() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencySession) TRUSTEDSEQUENCERFEE() (*big.Int, error) {
	return _Proofofefficiency.Contract.TRUSTEDSEQUENCERFEE(&_Proofofefficiency.CallOpts)
}

// TRUSTEDSEQUENCERFEE is a free data retrieval call binding the contract method 0xf7552761.
//
// Solidity: function TRUSTED_SEQUENCER_FEE() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencyCallerSession) TRUSTEDSEQUENCERFEE() (*big.Int, error) {
	return _Proofofefficiency.Contract.TRUSTEDSEQUENCERFEE(&_Proofofefficiency.CallOpts)
}

// CalculateForceProverFee is a free data retrieval call binding the contract method 0x79847057.
//
// Solidity: function calculateForceProverFee() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencyCaller) CalculateForceProverFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "calculateForceProverFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculateForceProverFee is a free data retrieval call binding the contract method 0x79847057.
//
// Solidity: function calculateForceProverFee() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencySession) CalculateForceProverFee() (*big.Int, error) {
	return _Proofofefficiency.Contract.CalculateForceProverFee(&_Proofofefficiency.CallOpts)
}

// CalculateForceProverFee is a free data retrieval call binding the contract method 0x79847057.
//
// Solidity: function calculateForceProverFee() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencyCallerSession) CalculateForceProverFee() (*big.Int, error) {
	return _Proofofefficiency.Contract.CalculateForceProverFee(&_Proofofefficiency.CallOpts)
}

// CalculateRewardPerBatch is a free data retrieval call binding the contract method 0x99f5634e.
//
// Solidity: function calculateRewardPerBatch() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencyCaller) CalculateRewardPerBatch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "calculateRewardPerBatch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculateRewardPerBatch is a free data retrieval call binding the contract method 0x99f5634e.
//
// Solidity: function calculateRewardPerBatch() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencySession) CalculateRewardPerBatch() (*big.Int, error) {
	return _Proofofefficiency.Contract.CalculateRewardPerBatch(&_Proofofefficiency.CallOpts)
}

// CalculateRewardPerBatch is a free data retrieval call binding the contract method 0x99f5634e.
//
// Solidity: function calculateRewardPerBatch() view returns(uint256)
func (_Proofofefficiency *ProofofefficiencyCallerSession) CalculateRewardPerBatch() (*big.Int, error) {
	return _Proofofefficiency.Contract.CalculateRewardPerBatch(&_Proofofefficiency.CallOpts)
}

// ChainID is a free data retrieval call binding the contract method 0xadc879e9.
//
// Solidity: function chainID() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCaller) ChainID(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "chainID")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ChainID is a free data retrieval call binding the contract method 0xadc879e9.
//
// Solidity: function chainID() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencySession) ChainID() (uint64, error) {
	return _Proofofefficiency.Contract.ChainID(&_Proofofefficiency.CallOpts)
}

// ChainID is a free data retrieval call binding the contract method 0xadc879e9.
//
// Solidity: function chainID() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCallerSession) ChainID() (uint64, error) {
	return _Proofofefficiency.Contract.ChainID(&_Proofofefficiency.CallOpts)
}

// CurrentStateRoot is a free data retrieval call binding the contract method 0xac2eba98.
//
// Solidity: function currentStateRoot() view returns(bytes32)
func (_Proofofefficiency *ProofofefficiencyCaller) CurrentStateRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "currentStateRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CurrentStateRoot is a free data retrieval call binding the contract method 0xac2eba98.
//
// Solidity: function currentStateRoot() view returns(bytes32)
func (_Proofofefficiency *ProofofefficiencySession) CurrentStateRoot() ([32]byte, error) {
	return _Proofofefficiency.Contract.CurrentStateRoot(&_Proofofefficiency.CallOpts)
}

// CurrentStateRoot is a free data retrieval call binding the contract method 0xac2eba98.
//
// Solidity: function currentStateRoot() view returns(bytes32)
func (_Proofofefficiency *ProofofefficiencyCallerSession) CurrentStateRoot() ([32]byte, error) {
	return _Proofofefficiency.Contract.CurrentStateRoot(&_Proofofefficiency.CallOpts)
}

// ForceBatchAllowed is a free data retrieval call binding the contract method 0xd8f54db0.
//
// Solidity: function forceBatchAllowed() view returns(bool)
func (_Proofofefficiency *ProofofefficiencyCaller) ForceBatchAllowed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "forceBatchAllowed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ForceBatchAllowed is a free data retrieval call binding the contract method 0xd8f54db0.
//
// Solidity: function forceBatchAllowed() view returns(bool)
func (_Proofofefficiency *ProofofefficiencySession) ForceBatchAllowed() (bool, error) {
	return _Proofofefficiency.Contract.ForceBatchAllowed(&_Proofofefficiency.CallOpts)
}

// ForceBatchAllowed is a free data retrieval call binding the contract method 0xd8f54db0.
//
// Solidity: function forceBatchAllowed() view returns(bool)
func (_Proofofefficiency *ProofofefficiencyCallerSession) ForceBatchAllowed() (bool, error) {
	return _Proofofefficiency.Contract.ForceBatchAllowed(&_Proofofefficiency.CallOpts)
}

// ForcedBatches is a free data retrieval call binding the contract method 0x6b8616ce.
//
// Solidity: function forcedBatches(uint64 ) view returns(bytes32)
func (_Proofofefficiency *ProofofefficiencyCaller) ForcedBatches(opts *bind.CallOpts, arg0 uint64) ([32]byte, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "forcedBatches", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ForcedBatches is a free data retrieval call binding the contract method 0x6b8616ce.
//
// Solidity: function forcedBatches(uint64 ) view returns(bytes32)
func (_Proofofefficiency *ProofofefficiencySession) ForcedBatches(arg0 uint64) ([32]byte, error) {
	return _Proofofefficiency.Contract.ForcedBatches(&_Proofofefficiency.CallOpts, arg0)
}

// ForcedBatches is a free data retrieval call binding the contract method 0x6b8616ce.
//
// Solidity: function forcedBatches(uint64 ) view returns(bytes32)
func (_Proofofefficiency *ProofofefficiencyCallerSession) ForcedBatches(arg0 uint64) ([32]byte, error) {
	return _Proofofefficiency.Contract.ForcedBatches(&_Proofofefficiency.CallOpts, arg0)
}

// GetInputSnarkBytes is a free data retrieval call binding the contract method 0x7152facf.
//
// Solidity: function getInputSnarkBytes(uint64 _lastVerifiedBatch, uint64 newVerifiedBatch, bytes32 newLocalExitRoot, bytes32 newStateRoot) view returns(bytes)
func (_Proofofefficiency *ProofofefficiencyCaller) GetInputSnarkBytes(opts *bind.CallOpts, _lastVerifiedBatch uint64, newVerifiedBatch uint64, newLocalExitRoot [32]byte, newStateRoot [32]byte) ([]byte, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "getInputSnarkBytes", _lastVerifiedBatch, newVerifiedBatch, newLocalExitRoot, newStateRoot)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetInputSnarkBytes is a free data retrieval call binding the contract method 0x7152facf.
//
// Solidity: function getInputSnarkBytes(uint64 _lastVerifiedBatch, uint64 newVerifiedBatch, bytes32 newLocalExitRoot, bytes32 newStateRoot) view returns(bytes)
func (_Proofofefficiency *ProofofefficiencySession) GetInputSnarkBytes(_lastVerifiedBatch uint64, newVerifiedBatch uint64, newLocalExitRoot [32]byte, newStateRoot [32]byte) ([]byte, error) {
	return _Proofofefficiency.Contract.GetInputSnarkBytes(&_Proofofefficiency.CallOpts, _lastVerifiedBatch, newVerifiedBatch, newLocalExitRoot, newStateRoot)
}

// GetInputSnarkBytes is a free data retrieval call binding the contract method 0x7152facf.
//
// Solidity: function getInputSnarkBytes(uint64 _lastVerifiedBatch, uint64 newVerifiedBatch, bytes32 newLocalExitRoot, bytes32 newStateRoot) view returns(bytes)
func (_Proofofefficiency *ProofofefficiencyCallerSession) GetInputSnarkBytes(_lastVerifiedBatch uint64, newVerifiedBatch uint64, newLocalExitRoot [32]byte, newStateRoot [32]byte) ([]byte, error) {
	return _Proofofefficiency.Contract.GetInputSnarkBytes(&_Proofofefficiency.CallOpts, _lastVerifiedBatch, newVerifiedBatch, newLocalExitRoot, newStateRoot)
}

// GlobalExitRootManager is a free data retrieval call binding the contract method 0xd02103ca.
//
// Solidity: function globalExitRootManager() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCaller) GlobalExitRootManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "globalExitRootManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GlobalExitRootManager is a free data retrieval call binding the contract method 0xd02103ca.
//
// Solidity: function globalExitRootManager() view returns(address)
func (_Proofofefficiency *ProofofefficiencySession) GlobalExitRootManager() (common.Address, error) {
	return _Proofofefficiency.Contract.GlobalExitRootManager(&_Proofofefficiency.CallOpts)
}

// GlobalExitRootManager is a free data retrieval call binding the contract method 0xd02103ca.
//
// Solidity: function globalExitRootManager() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCallerSession) GlobalExitRootManager() (common.Address, error) {
	return _Proofofefficiency.Contract.GlobalExitRootManager(&_Proofofefficiency.CallOpts)
}

// LastBatchSequenced is a free data retrieval call binding the contract method 0x423fa856.
//
// Solidity: function lastBatchSequenced() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCaller) LastBatchSequenced(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "lastBatchSequenced")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastBatchSequenced is a free data retrieval call binding the contract method 0x423fa856.
//
// Solidity: function lastBatchSequenced() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencySession) LastBatchSequenced() (uint64, error) {
	return _Proofofefficiency.Contract.LastBatchSequenced(&_Proofofefficiency.CallOpts)
}

// LastBatchSequenced is a free data retrieval call binding the contract method 0x423fa856.
//
// Solidity: function lastBatchSequenced() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCallerSession) LastBatchSequenced() (uint64, error) {
	return _Proofofefficiency.Contract.LastBatchSequenced(&_Proofofefficiency.CallOpts)
}

// LastForceBatch is a free data retrieval call binding the contract method 0xe7a7ed02.
//
// Solidity: function lastForceBatch() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCaller) LastForceBatch(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "lastForceBatch")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastForceBatch is a free data retrieval call binding the contract method 0xe7a7ed02.
//
// Solidity: function lastForceBatch() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencySession) LastForceBatch() (uint64, error) {
	return _Proofofefficiency.Contract.LastForceBatch(&_Proofofefficiency.CallOpts)
}

// LastForceBatch is a free data retrieval call binding the contract method 0xe7a7ed02.
//
// Solidity: function lastForceBatch() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCallerSession) LastForceBatch() (uint64, error) {
	return _Proofofefficiency.Contract.LastForceBatch(&_Proofofefficiency.CallOpts)
}

// LastForceBatchSequenced is a free data retrieval call binding the contract method 0x45605267.
//
// Solidity: function lastForceBatchSequenced() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCaller) LastForceBatchSequenced(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "lastForceBatchSequenced")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastForceBatchSequenced is a free data retrieval call binding the contract method 0x45605267.
//
// Solidity: function lastForceBatchSequenced() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencySession) LastForceBatchSequenced() (uint64, error) {
	return _Proofofefficiency.Contract.LastForceBatchSequenced(&_Proofofefficiency.CallOpts)
}

// LastForceBatchSequenced is a free data retrieval call binding the contract method 0x45605267.
//
// Solidity: function lastForceBatchSequenced() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCallerSession) LastForceBatchSequenced() (uint64, error) {
	return _Proofofefficiency.Contract.LastForceBatchSequenced(&_Proofofefficiency.CallOpts)
}

// LastTimestamp is a free data retrieval call binding the contract method 0x19d8ac61.
//
// Solidity: function lastTimestamp() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCaller) LastTimestamp(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "lastTimestamp")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastTimestamp is a free data retrieval call binding the contract method 0x19d8ac61.
//
// Solidity: function lastTimestamp() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencySession) LastTimestamp() (uint64, error) {
	return _Proofofefficiency.Contract.LastTimestamp(&_Proofofefficiency.CallOpts)
}

// LastTimestamp is a free data retrieval call binding the contract method 0x19d8ac61.
//
// Solidity: function lastTimestamp() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCallerSession) LastTimestamp() (uint64, error) {
	return _Proofofefficiency.Contract.LastTimestamp(&_Proofofefficiency.CallOpts)
}

// LastVerifiedBatch is a free data retrieval call binding the contract method 0x7fcb3653.
//
// Solidity: function lastVerifiedBatch() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCaller) LastVerifiedBatch(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "lastVerifiedBatch")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastVerifiedBatch is a free data retrieval call binding the contract method 0x7fcb3653.
//
// Solidity: function lastVerifiedBatch() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencySession) LastVerifiedBatch() (uint64, error) {
	return _Proofofefficiency.Contract.LastVerifiedBatch(&_Proofofefficiency.CallOpts)
}

// LastVerifiedBatch is a free data retrieval call binding the contract method 0x7fcb3653.
//
// Solidity: function lastVerifiedBatch() view returns(uint64)
func (_Proofofefficiency *ProofofefficiencyCallerSession) LastVerifiedBatch() (uint64, error) {
	return _Proofofefficiency.Contract.LastVerifiedBatch(&_Proofofefficiency.CallOpts)
}

// Matic is a free data retrieval call binding the contract method 0xb6b0b097.
//
// Solidity: function matic() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCaller) Matic(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "matic")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Matic is a free data retrieval call binding the contract method 0xb6b0b097.
//
// Solidity: function matic() view returns(address)
func (_Proofofefficiency *ProofofefficiencySession) Matic() (common.Address, error) {
	return _Proofofefficiency.Contract.Matic(&_Proofofefficiency.CallOpts)
}

// Matic is a free data retrieval call binding the contract method 0xb6b0b097.
//
// Solidity: function matic() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCallerSession) Matic() (common.Address, error) {
	return _Proofofefficiency.Contract.Matic(&_Proofofefficiency.CallOpts)
}

// NetworkName is a free data retrieval call binding the contract method 0x107bf28c.
//
// Solidity: function networkName() view returns(string)
func (_Proofofefficiency *ProofofefficiencyCaller) NetworkName(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "networkName")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NetworkName is a free data retrieval call binding the contract method 0x107bf28c.
//
// Solidity: function networkName() view returns(string)
func (_Proofofefficiency *ProofofefficiencySession) NetworkName() (string, error) {
	return _Proofofefficiency.Contract.NetworkName(&_Proofofefficiency.CallOpts)
}

// NetworkName is a free data retrieval call binding the contract method 0x107bf28c.
//
// Solidity: function networkName() view returns(string)
func (_Proofofefficiency *ProofofefficiencyCallerSession) NetworkName() (string, error) {
	return _Proofofefficiency.Contract.NetworkName(&_Proofofefficiency.CallOpts)
}

// RollupVerifier is a free data retrieval call binding the contract method 0xe8bf92ed.
//
// Solidity: function rollupVerifier() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCaller) RollupVerifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "rollupVerifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupVerifier is a free data retrieval call binding the contract method 0xe8bf92ed.
//
// Solidity: function rollupVerifier() view returns(address)
func (_Proofofefficiency *ProofofefficiencySession) RollupVerifier() (common.Address, error) {
	return _Proofofefficiency.Contract.RollupVerifier(&_Proofofefficiency.CallOpts)
}

// RollupVerifier is a free data retrieval call binding the contract method 0xe8bf92ed.
//
// Solidity: function rollupVerifier() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCallerSession) RollupVerifier() (common.Address, error) {
	return _Proofofefficiency.Contract.RollupVerifier(&_Proofofefficiency.CallOpts)
}

// SequencedBatches is a free data retrieval call binding the contract method 0xb4d63f58.
//
// Solidity: function sequencedBatches(uint64 ) view returns(bytes32)
func (_Proofofefficiency *ProofofefficiencyCaller) SequencedBatches(opts *bind.CallOpts, arg0 uint64) ([32]byte, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "sequencedBatches", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SequencedBatches is a free data retrieval call binding the contract method 0xb4d63f58.
//
// Solidity: function sequencedBatches(uint64 ) view returns(bytes32)
func (_Proofofefficiency *ProofofefficiencySession) SequencedBatches(arg0 uint64) ([32]byte, error) {
	return _Proofofefficiency.Contract.SequencedBatches(&_Proofofefficiency.CallOpts, arg0)
}

// SequencedBatches is a free data retrieval call binding the contract method 0xb4d63f58.
//
// Solidity: function sequencedBatches(uint64 ) view returns(bytes32)
func (_Proofofefficiency *ProofofefficiencyCallerSession) SequencedBatches(arg0 uint64) ([32]byte, error) {
	return _Proofofefficiency.Contract.SequencedBatches(&_Proofofefficiency.CallOpts, arg0)
}

// TrustedSequencer is a free data retrieval call binding the contract method 0xcfa8ed47.
//
// Solidity: function trustedSequencer() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCaller) TrustedSequencer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "trustedSequencer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TrustedSequencer is a free data retrieval call binding the contract method 0xcfa8ed47.
//
// Solidity: function trustedSequencer() view returns(address)
func (_Proofofefficiency *ProofofefficiencySession) TrustedSequencer() (common.Address, error) {
	return _Proofofefficiency.Contract.TrustedSequencer(&_Proofofefficiency.CallOpts)
}

// TrustedSequencer is a free data retrieval call binding the contract method 0xcfa8ed47.
//
// Solidity: function trustedSequencer() view returns(address)
func (_Proofofefficiency *ProofofefficiencyCallerSession) TrustedSequencer() (common.Address, error) {
	return _Proofofefficiency.Contract.TrustedSequencer(&_Proofofefficiency.CallOpts)
}

// TrustedSequencerURL is a free data retrieval call binding the contract method 0x542028d5.
//
// Solidity: function trustedSequencerURL() view returns(string)
func (_Proofofefficiency *ProofofefficiencyCaller) TrustedSequencerURL(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Proofofefficiency.contract.Call(opts, &out, "trustedSequencerURL")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TrustedSequencerURL is a free data retrieval call binding the contract method 0x542028d5.
//
// Solidity: function trustedSequencerURL() view returns(string)
func (_Proofofefficiency *ProofofefficiencySession) TrustedSequencerURL() (string, error) {
	return _Proofofefficiency.Contract.TrustedSequencerURL(&_Proofofefficiency.CallOpts)
}

// TrustedSequencerURL is a free data retrieval call binding the contract method 0x542028d5.
//
// Solidity: function trustedSequencerURL() view returns(string)
func (_Proofofefficiency *ProofofefficiencyCallerSession) TrustedSequencerURL() (string, error) {
	return _Proofofefficiency.Contract.TrustedSequencerURL(&_Proofofefficiency.CallOpts)
}

// ForceBatch is a paid mutator transaction binding the contract method 0xeaeb077b.
//
// Solidity: function forceBatch(bytes transactions, uint256 maticAmount) returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) ForceBatch(opts *bind.TransactOpts, transactions []byte, maticAmount *big.Int) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "forceBatch", transactions, maticAmount)
}

// ForceBatch is a paid mutator transaction binding the contract method 0xeaeb077b.
//
// Solidity: function forceBatch(bytes transactions, uint256 maticAmount) returns()
func (_Proofofefficiency *ProofofefficiencySession) ForceBatch(transactions []byte, maticAmount *big.Int) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.ForceBatch(&_Proofofefficiency.TransactOpts, transactions, maticAmount)
}

// ForceBatch is a paid mutator transaction binding the contract method 0xeaeb077b.
//
// Solidity: function forceBatch(bytes transactions, uint256 maticAmount) returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) ForceBatch(transactions []byte, maticAmount *big.Int) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.ForceBatch(&_Proofofefficiency.TransactOpts, transactions, maticAmount)
}

// Initialize is a paid mutator transaction binding the contract method 0xd2fd1b31.
//
// Solidity: function initialize(address _globalExitRootManager, address _matic, address _rollupVerifier, bytes32 genesisRoot, address _trustedSequencer, bool _forceBatchAllowed, string _trustedSequencerURL, uint64 _chainID, string _networkName) returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) Initialize(opts *bind.TransactOpts, _globalExitRootManager common.Address, _matic common.Address, _rollupVerifier common.Address, genesisRoot [32]byte, _trustedSequencer common.Address, _forceBatchAllowed bool, _trustedSequencerURL string, _chainID uint64, _networkName string) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "initialize", _globalExitRootManager, _matic, _rollupVerifier, genesisRoot, _trustedSequencer, _forceBatchAllowed, _trustedSequencerURL, _chainID, _networkName)
}

// Initialize is a paid mutator transaction binding the contract method 0xd2fd1b31.
//
// Solidity: function initialize(address _globalExitRootManager, address _matic, address _rollupVerifier, bytes32 genesisRoot, address _trustedSequencer, bool _forceBatchAllowed, string _trustedSequencerURL, uint64 _chainID, string _networkName) returns()
func (_Proofofefficiency *ProofofefficiencySession) Initialize(_globalExitRootManager common.Address, _matic common.Address, _rollupVerifier common.Address, genesisRoot [32]byte, _trustedSequencer common.Address, _forceBatchAllowed bool, _trustedSequencerURL string, _chainID uint64, _networkName string) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.Initialize(&_Proofofefficiency.TransactOpts, _globalExitRootManager, _matic, _rollupVerifier, genesisRoot, _trustedSequencer, _forceBatchAllowed, _trustedSequencerURL, _chainID, _networkName)
}

// Initialize is a paid mutator transaction binding the contract method 0xd2fd1b31.
//
// Solidity: function initialize(address _globalExitRootManager, address _matic, address _rollupVerifier, bytes32 genesisRoot, address _trustedSequencer, bool _forceBatchAllowed, string _trustedSequencerURL, uint64 _chainID, string _networkName) returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) Initialize(_globalExitRootManager common.Address, _matic common.Address, _rollupVerifier common.Address, genesisRoot [32]byte, _trustedSequencer common.Address, _forceBatchAllowed bool, _trustedSequencerURL string, _chainID uint64, _networkName string) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.Initialize(&_Proofofefficiency.TransactOpts, _globalExitRootManager, _matic, _rollupVerifier, genesisRoot, _trustedSequencer, _forceBatchAllowed, _trustedSequencerURL, _chainID, _networkName)
}

// SequenceBatches is a paid mutator transaction binding the contract method 0x3c158267.
//
// Solidity: function sequenceBatches((bytes,bytes32,uint64,uint64)[] batches) returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) SequenceBatches(opts *bind.TransactOpts, batches []ProofOfEfficiencyBatchData) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "sequenceBatches", batches)
}

// SequenceBatches is a paid mutator transaction binding the contract method 0x3c158267.
//
// Solidity: function sequenceBatches((bytes,bytes32,uint64,uint64)[] batches) returns()
func (_Proofofefficiency *ProofofefficiencySession) SequenceBatches(batches []ProofOfEfficiencyBatchData) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SequenceBatches(&_Proofofefficiency.TransactOpts, batches)
}

// SequenceBatches is a paid mutator transaction binding the contract method 0x3c158267.
//
// Solidity: function sequenceBatches((bytes,bytes32,uint64,uint64)[] batches) returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) SequenceBatches(batches []ProofOfEfficiencyBatchData) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SequenceBatches(&_Proofofefficiency.TransactOpts, batches)
}

// SequenceForceBatches is a paid mutator transaction binding the contract method 0xd8d1091b.
//
// Solidity: function sequenceForceBatches((bytes,bytes32,uint64)[] batches) returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) SequenceForceBatches(opts *bind.TransactOpts, batches []ProofOfEfficiencyForceBatchData) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "sequenceForceBatches", batches)
}

// SequenceForceBatches is a paid mutator transaction binding the contract method 0xd8d1091b.
//
// Solidity: function sequenceForceBatches((bytes,bytes32,uint64)[] batches) returns()
func (_Proofofefficiency *ProofofefficiencySession) SequenceForceBatches(batches []ProofOfEfficiencyForceBatchData) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SequenceForceBatches(&_Proofofefficiency.TransactOpts, batches)
}

// SequenceForceBatches is a paid mutator transaction binding the contract method 0xd8d1091b.
//
// Solidity: function sequenceForceBatches((bytes,bytes32,uint64)[] batches) returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) SequenceForceBatches(batches []ProofOfEfficiencyForceBatchData) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SequenceForceBatches(&_Proofofefficiency.TransactOpts, batches)
}

// SetForceBatchAllowed is a paid mutator transaction binding the contract method 0x8c4a0af7.
//
// Solidity: function setForceBatchAllowed(bool newForceBatchAllowed) returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) SetForceBatchAllowed(opts *bind.TransactOpts, newForceBatchAllowed bool) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "setForceBatchAllowed", newForceBatchAllowed)
}

// SetForceBatchAllowed is a paid mutator transaction binding the contract method 0x8c4a0af7.
//
// Solidity: function setForceBatchAllowed(bool newForceBatchAllowed) returns()
func (_Proofofefficiency *ProofofefficiencySession) SetForceBatchAllowed(newForceBatchAllowed bool) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SetForceBatchAllowed(&_Proofofefficiency.TransactOpts, newForceBatchAllowed)
}

// SetForceBatchAllowed is a paid mutator transaction binding the contract method 0x8c4a0af7.
//
// Solidity: function setForceBatchAllowed(bool newForceBatchAllowed) returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) SetForceBatchAllowed(newForceBatchAllowed bool) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SetForceBatchAllowed(&_Proofofefficiency.TransactOpts, newForceBatchAllowed)
}

// SetTrustedSequencer is a paid mutator transaction binding the contract method 0x6ff512cc.
//
// Solidity: function setTrustedSequencer(address newTrustedSequencer) returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) SetTrustedSequencer(opts *bind.TransactOpts, newTrustedSequencer common.Address) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "setTrustedSequencer", newTrustedSequencer)
}

// SetTrustedSequencer is a paid mutator transaction binding the contract method 0x6ff512cc.
//
// Solidity: function setTrustedSequencer(address newTrustedSequencer) returns()
func (_Proofofefficiency *ProofofefficiencySession) SetTrustedSequencer(newTrustedSequencer common.Address) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SetTrustedSequencer(&_Proofofefficiency.TransactOpts, newTrustedSequencer)
}

// SetTrustedSequencer is a paid mutator transaction binding the contract method 0x6ff512cc.
//
// Solidity: function setTrustedSequencer(address newTrustedSequencer) returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) SetTrustedSequencer(newTrustedSequencer common.Address) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SetTrustedSequencer(&_Proofofefficiency.TransactOpts, newTrustedSequencer)
}

// SetTrustedSequencerURL is a paid mutator transaction binding the contract method 0xc89e42df.
//
// Solidity: function setTrustedSequencerURL(string newTrustedSequencerURL) returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) SetTrustedSequencerURL(opts *bind.TransactOpts, newTrustedSequencerURL string) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "setTrustedSequencerURL", newTrustedSequencerURL)
}

// SetTrustedSequencerURL is a paid mutator transaction binding the contract method 0xc89e42df.
//
// Solidity: function setTrustedSequencerURL(string newTrustedSequencerURL) returns()
func (_Proofofefficiency *ProofofefficiencySession) SetTrustedSequencerURL(newTrustedSequencerURL string) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SetTrustedSequencerURL(&_Proofofefficiency.TransactOpts, newTrustedSequencerURL)
}

// SetTrustedSequencerURL is a paid mutator transaction binding the contract method 0xc89e42df.
//
// Solidity: function setTrustedSequencerURL(string newTrustedSequencerURL) returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) SetTrustedSequencerURL(newTrustedSequencerURL string) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.SetTrustedSequencerURL(&_Proofofefficiency.TransactOpts, newTrustedSequencerURL)
}

// VerifyBatches is a paid mutator transaction binding the contract method 0x55b925e6.
//
// Solidity: function verifyBatches(uint64 _lastVerifiedBatch, uint64 newVerifiedBatch, bytes32 newLocalExitRoot, bytes32 newStateRoot, uint256[2] proofA, uint256[2][2] proofB, uint256[2] proofC) returns()
func (_Proofofefficiency *ProofofefficiencyTransactor) VerifyBatches(opts *bind.TransactOpts, _lastVerifiedBatch uint64, newVerifiedBatch uint64, newLocalExitRoot [32]byte, newStateRoot [32]byte, proofA [2]*big.Int, proofB [2][2]*big.Int, proofC [2]*big.Int) (*types.Transaction, error) {
	return _Proofofefficiency.contract.Transact(opts, "verifyBatches", _lastVerifiedBatch, newVerifiedBatch, newLocalExitRoot, newStateRoot, proofA, proofB, proofC)
}

// VerifyBatches is a paid mutator transaction binding the contract method 0x55b925e6.
//
// Solidity: function verifyBatches(uint64 _lastVerifiedBatch, uint64 newVerifiedBatch, bytes32 newLocalExitRoot, bytes32 newStateRoot, uint256[2] proofA, uint256[2][2] proofB, uint256[2] proofC) returns()
func (_Proofofefficiency *ProofofefficiencySession) VerifyBatches(_lastVerifiedBatch uint64, newVerifiedBatch uint64, newLocalExitRoot [32]byte, newStateRoot [32]byte, proofA [2]*big.Int, proofB [2][2]*big.Int, proofC [2]*big.Int) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.VerifyBatches(&_Proofofefficiency.TransactOpts, _lastVerifiedBatch, newVerifiedBatch, newLocalExitRoot, newStateRoot, proofA, proofB, proofC)
}

// VerifyBatches is a paid mutator transaction binding the contract method 0x55b925e6.
//
// Solidity: function verifyBatches(uint64 _lastVerifiedBatch, uint64 newVerifiedBatch, bytes32 newLocalExitRoot, bytes32 newStateRoot, uint256[2] proofA, uint256[2][2] proofB, uint256[2] proofC) returns()
func (_Proofofefficiency *ProofofefficiencyTransactorSession) VerifyBatches(_lastVerifiedBatch uint64, newVerifiedBatch uint64, newLocalExitRoot [32]byte, newStateRoot [32]byte, proofA [2]*big.Int, proofB [2][2]*big.Int, proofC [2]*big.Int) (*types.Transaction, error) {
	return _Proofofefficiency.Contract.VerifyBatches(&_Proofofefficiency.TransactOpts, _lastVerifiedBatch, newVerifiedBatch, newLocalExitRoot, newStateRoot, proofA, proofB, proofC)
}

// ProofofefficiencyForceBatchIterator is returned from FilterForceBatch and is used to iterate over the raw logs and unpacked data for ForceBatch events raised by the Proofofefficiency contract.
type ProofofefficiencyForceBatchIterator struct {
	Event *ProofofefficiencyForceBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofofefficiencyForceBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofofefficiencyForceBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofofefficiencyForceBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofofefficiencyForceBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofofefficiencyForceBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofofefficiencyForceBatch represents a ForceBatch event raised by the Proofofefficiency contract.
type ProofofefficiencyForceBatch struct {
	ForceBatchNum      uint64
	LastGlobalExitRoot [32]byte
	Sequencer          common.Address
	Transactions       []byte
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterForceBatch is a free log retrieval operation binding the contract event 0xf94bb37db835f1ab585ee00041849a09b12cd081d77fa15ca070757619cbc931.
//
// Solidity: event ForceBatch(uint64 indexed forceBatchNum, bytes32 lastGlobalExitRoot, address sequencer, bytes transactions)
func (_Proofofefficiency *ProofofefficiencyFilterer) FilterForceBatch(opts *bind.FilterOpts, forceBatchNum []uint64) (*ProofofefficiencyForceBatchIterator, error) {

	var forceBatchNumRule []interface{}
	for _, forceBatchNumItem := range forceBatchNum {
		forceBatchNumRule = append(forceBatchNumRule, forceBatchNumItem)
	}

	logs, sub, err := _Proofofefficiency.contract.FilterLogs(opts, "ForceBatch", forceBatchNumRule)
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencyForceBatchIterator{contract: _Proofofefficiency.contract, event: "ForceBatch", logs: logs, sub: sub}, nil
}

// WatchForceBatch is a free log subscription operation binding the contract event 0xf94bb37db835f1ab585ee00041849a09b12cd081d77fa15ca070757619cbc931.
//
// Solidity: event ForceBatch(uint64 indexed forceBatchNum, bytes32 lastGlobalExitRoot, address sequencer, bytes transactions)
func (_Proofofefficiency *ProofofefficiencyFilterer) WatchForceBatch(opts *bind.WatchOpts, sink chan<- *ProofofefficiencyForceBatch, forceBatchNum []uint64) (event.Subscription, error) {

	var forceBatchNumRule []interface{}
	for _, forceBatchNumItem := range forceBatchNum {
		forceBatchNumRule = append(forceBatchNumRule, forceBatchNumItem)
	}

	logs, sub, err := _Proofofefficiency.contract.WatchLogs(opts, "ForceBatch", forceBatchNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofofefficiencyForceBatch)
				if err := _Proofofefficiency.contract.UnpackLog(event, "ForceBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseForceBatch is a log parse operation binding the contract event 0xf94bb37db835f1ab585ee00041849a09b12cd081d77fa15ca070757619cbc931.
//
// Solidity: event ForceBatch(uint64 indexed forceBatchNum, bytes32 lastGlobalExitRoot, address sequencer, bytes transactions)
func (_Proofofefficiency *ProofofefficiencyFilterer) ParseForceBatch(log types.Log) (*ProofofefficiencyForceBatch, error) {
	event := new(ProofofefficiencyForceBatch)
	if err := _Proofofefficiency.contract.UnpackLog(event, "ForceBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProofofefficiencyInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Proofofefficiency contract.
type ProofofefficiencyInitializedIterator struct {
	Event *ProofofefficiencyInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofofefficiencyInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofofefficiencyInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofofefficiencyInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofofefficiencyInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofofefficiencyInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofofefficiencyInitialized represents a Initialized event raised by the Proofofefficiency contract.
type ProofofefficiencyInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Proofofefficiency *ProofofefficiencyFilterer) FilterInitialized(opts *bind.FilterOpts) (*ProofofefficiencyInitializedIterator, error) {

	logs, sub, err := _Proofofefficiency.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencyInitializedIterator{contract: _Proofofefficiency.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Proofofefficiency *ProofofefficiencyFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ProofofefficiencyInitialized) (event.Subscription, error) {

	logs, sub, err := _Proofofefficiency.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofofefficiencyInitialized)
				if err := _Proofofefficiency.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Proofofefficiency *ProofofefficiencyFilterer) ParseInitialized(log types.Log) (*ProofofefficiencyInitialized, error) {
	event := new(ProofofefficiencyInitialized)
	if err := _Proofofefficiency.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProofofefficiencySequenceBatchesIterator is returned from FilterSequenceBatches and is used to iterate over the raw logs and unpacked data for SequenceBatches events raised by the Proofofefficiency contract.
type ProofofefficiencySequenceBatchesIterator struct {
	Event *ProofofefficiencySequenceBatches // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofofefficiencySequenceBatchesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofofefficiencySequenceBatches)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofofefficiencySequenceBatches)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofofefficiencySequenceBatchesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofofefficiencySequenceBatchesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofofefficiencySequenceBatches represents a SequenceBatches event raised by the Proofofefficiency contract.
type ProofofefficiencySequenceBatches struct {
	NumBatch uint64
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSequenceBatches is a free log retrieval operation binding the contract event 0x303446e6a8cb73c83dff421c0b1d5e5ce0719dab1bff13660fc254e58cc17fce.
//
// Solidity: event SequenceBatches(uint64 indexed numBatch)
func (_Proofofefficiency *ProofofefficiencyFilterer) FilterSequenceBatches(opts *bind.FilterOpts, numBatch []uint64) (*ProofofefficiencySequenceBatchesIterator, error) {

	var numBatchRule []interface{}
	for _, numBatchItem := range numBatch {
		numBatchRule = append(numBatchRule, numBatchItem)
	}

	logs, sub, err := _Proofofefficiency.contract.FilterLogs(opts, "SequenceBatches", numBatchRule)
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencySequenceBatchesIterator{contract: _Proofofefficiency.contract, event: "SequenceBatches", logs: logs, sub: sub}, nil
}

// WatchSequenceBatches is a free log subscription operation binding the contract event 0x303446e6a8cb73c83dff421c0b1d5e5ce0719dab1bff13660fc254e58cc17fce.
//
// Solidity: event SequenceBatches(uint64 indexed numBatch)
func (_Proofofefficiency *ProofofefficiencyFilterer) WatchSequenceBatches(opts *bind.WatchOpts, sink chan<- *ProofofefficiencySequenceBatches, numBatch []uint64) (event.Subscription, error) {

	var numBatchRule []interface{}
	for _, numBatchItem := range numBatch {
		numBatchRule = append(numBatchRule, numBatchItem)
	}

	logs, sub, err := _Proofofefficiency.contract.WatchLogs(opts, "SequenceBatches", numBatchRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofofefficiencySequenceBatches)
				if err := _Proofofefficiency.contract.UnpackLog(event, "SequenceBatches", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSequenceBatches is a log parse operation binding the contract event 0x303446e6a8cb73c83dff421c0b1d5e5ce0719dab1bff13660fc254e58cc17fce.
//
// Solidity: event SequenceBatches(uint64 indexed numBatch)
func (_Proofofefficiency *ProofofefficiencyFilterer) ParseSequenceBatches(log types.Log) (*ProofofefficiencySequenceBatches, error) {
	event := new(ProofofefficiencySequenceBatches)
	if err := _Proofofefficiency.contract.UnpackLog(event, "SequenceBatches", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProofofefficiencySequenceForceBatchesIterator is returned from FilterSequenceForceBatches and is used to iterate over the raw logs and unpacked data for SequenceForceBatches events raised by the Proofofefficiency contract.
type ProofofefficiencySequenceForceBatchesIterator struct {
	Event *ProofofefficiencySequenceForceBatches // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofofefficiencySequenceForceBatchesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofofefficiencySequenceForceBatches)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofofefficiencySequenceForceBatches)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofofefficiencySequenceForceBatchesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofofefficiencySequenceForceBatchesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofofefficiencySequenceForceBatches represents a SequenceForceBatches event raised by the Proofofefficiency contract.
type ProofofefficiencySequenceForceBatches struct {
	NumBatch uint64
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSequenceForceBatches is a free log retrieval operation binding the contract event 0x648a61dd2438f072f5a1960939abd30f37aea80d2e94c9792ad142d3e0a490a4.
//
// Solidity: event SequenceForceBatches(uint64 indexed numBatch)
func (_Proofofefficiency *ProofofefficiencyFilterer) FilterSequenceForceBatches(opts *bind.FilterOpts, numBatch []uint64) (*ProofofefficiencySequenceForceBatchesIterator, error) {

	var numBatchRule []interface{}
	for _, numBatchItem := range numBatch {
		numBatchRule = append(numBatchRule, numBatchItem)
	}

	logs, sub, err := _Proofofefficiency.contract.FilterLogs(opts, "SequenceForceBatches", numBatchRule)
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencySequenceForceBatchesIterator{contract: _Proofofefficiency.contract, event: "SequenceForceBatches", logs: logs, sub: sub}, nil
}

// WatchSequenceForceBatches is a free log subscription operation binding the contract event 0x648a61dd2438f072f5a1960939abd30f37aea80d2e94c9792ad142d3e0a490a4.
//
// Solidity: event SequenceForceBatches(uint64 indexed numBatch)
func (_Proofofefficiency *ProofofefficiencyFilterer) WatchSequenceForceBatches(opts *bind.WatchOpts, sink chan<- *ProofofefficiencySequenceForceBatches, numBatch []uint64) (event.Subscription, error) {

	var numBatchRule []interface{}
	for _, numBatchItem := range numBatch {
		numBatchRule = append(numBatchRule, numBatchItem)
	}

	logs, sub, err := _Proofofefficiency.contract.WatchLogs(opts, "SequenceForceBatches", numBatchRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofofefficiencySequenceForceBatches)
				if err := _Proofofefficiency.contract.UnpackLog(event, "SequenceForceBatches", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSequenceForceBatches is a log parse operation binding the contract event 0x648a61dd2438f072f5a1960939abd30f37aea80d2e94c9792ad142d3e0a490a4.
//
// Solidity: event SequenceForceBatches(uint64 indexed numBatch)
func (_Proofofefficiency *ProofofefficiencyFilterer) ParseSequenceForceBatches(log types.Log) (*ProofofefficiencySequenceForceBatches, error) {
	event := new(ProofofefficiencySequenceForceBatches)
	if err := _Proofofefficiency.contract.UnpackLog(event, "SequenceForceBatches", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProofofefficiencySetForceBatchAllowedIterator is returned from FilterSetForceBatchAllowed and is used to iterate over the raw logs and unpacked data for SetForceBatchAllowed events raised by the Proofofefficiency contract.
type ProofofefficiencySetForceBatchAllowedIterator struct {
	Event *ProofofefficiencySetForceBatchAllowed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofofefficiencySetForceBatchAllowedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofofefficiencySetForceBatchAllowed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofofefficiencySetForceBatchAllowed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofofefficiencySetForceBatchAllowedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofofefficiencySetForceBatchAllowedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofofefficiencySetForceBatchAllowed represents a SetForceBatchAllowed event raised by the Proofofefficiency contract.
type ProofofefficiencySetForceBatchAllowed struct {
	NewForceBatchAllowed bool
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterSetForceBatchAllowed is a free log retrieval operation binding the contract event 0xbacda50a4a8575be1d91a7ebe29ee45056f3a94f12a2281eb6b43afa33bcefe6.
//
// Solidity: event SetForceBatchAllowed(bool newForceBatchAllowed)
func (_Proofofefficiency *ProofofefficiencyFilterer) FilterSetForceBatchAllowed(opts *bind.FilterOpts) (*ProofofefficiencySetForceBatchAllowedIterator, error) {

	logs, sub, err := _Proofofefficiency.contract.FilterLogs(opts, "SetForceBatchAllowed")
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencySetForceBatchAllowedIterator{contract: _Proofofefficiency.contract, event: "SetForceBatchAllowed", logs: logs, sub: sub}, nil
}

// WatchSetForceBatchAllowed is a free log subscription operation binding the contract event 0xbacda50a4a8575be1d91a7ebe29ee45056f3a94f12a2281eb6b43afa33bcefe6.
//
// Solidity: event SetForceBatchAllowed(bool newForceBatchAllowed)
func (_Proofofefficiency *ProofofefficiencyFilterer) WatchSetForceBatchAllowed(opts *bind.WatchOpts, sink chan<- *ProofofefficiencySetForceBatchAllowed) (event.Subscription, error) {

	logs, sub, err := _Proofofefficiency.contract.WatchLogs(opts, "SetForceBatchAllowed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofofefficiencySetForceBatchAllowed)
				if err := _Proofofefficiency.contract.UnpackLog(event, "SetForceBatchAllowed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetForceBatchAllowed is a log parse operation binding the contract event 0xbacda50a4a8575be1d91a7ebe29ee45056f3a94f12a2281eb6b43afa33bcefe6.
//
// Solidity: event SetForceBatchAllowed(bool newForceBatchAllowed)
func (_Proofofefficiency *ProofofefficiencyFilterer) ParseSetForceBatchAllowed(log types.Log) (*ProofofefficiencySetForceBatchAllowed, error) {
	event := new(ProofofefficiencySetForceBatchAllowed)
	if err := _Proofofefficiency.contract.UnpackLog(event, "SetForceBatchAllowed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProofofefficiencySetTrustedSequencerIterator is returned from FilterSetTrustedSequencer and is used to iterate over the raw logs and unpacked data for SetTrustedSequencer events raised by the Proofofefficiency contract.
type ProofofefficiencySetTrustedSequencerIterator struct {
	Event *ProofofefficiencySetTrustedSequencer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofofefficiencySetTrustedSequencerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofofefficiencySetTrustedSequencer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofofefficiencySetTrustedSequencer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofofefficiencySetTrustedSequencerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofofefficiencySetTrustedSequencerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofofefficiencySetTrustedSequencer represents a SetTrustedSequencer event raised by the Proofofefficiency contract.
type ProofofefficiencySetTrustedSequencer struct {
	NewTrustedSequencer common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterSetTrustedSequencer is a free log retrieval operation binding the contract event 0xf54144f9611984021529f814a1cb6a41e22c58351510a0d9f7e822618abb9cc0.
//
// Solidity: event SetTrustedSequencer(address newTrustedSequencer)
func (_Proofofefficiency *ProofofefficiencyFilterer) FilterSetTrustedSequencer(opts *bind.FilterOpts) (*ProofofefficiencySetTrustedSequencerIterator, error) {

	logs, sub, err := _Proofofefficiency.contract.FilterLogs(opts, "SetTrustedSequencer")
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencySetTrustedSequencerIterator{contract: _Proofofefficiency.contract, event: "SetTrustedSequencer", logs: logs, sub: sub}, nil
}

// WatchSetTrustedSequencer is a free log subscription operation binding the contract event 0xf54144f9611984021529f814a1cb6a41e22c58351510a0d9f7e822618abb9cc0.
//
// Solidity: event SetTrustedSequencer(address newTrustedSequencer)
func (_Proofofefficiency *ProofofefficiencyFilterer) WatchSetTrustedSequencer(opts *bind.WatchOpts, sink chan<- *ProofofefficiencySetTrustedSequencer) (event.Subscription, error) {

	logs, sub, err := _Proofofefficiency.contract.WatchLogs(opts, "SetTrustedSequencer")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofofefficiencySetTrustedSequencer)
				if err := _Proofofefficiency.contract.UnpackLog(event, "SetTrustedSequencer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetTrustedSequencer is a log parse operation binding the contract event 0xf54144f9611984021529f814a1cb6a41e22c58351510a0d9f7e822618abb9cc0.
//
// Solidity: event SetTrustedSequencer(address newTrustedSequencer)
func (_Proofofefficiency *ProofofefficiencyFilterer) ParseSetTrustedSequencer(log types.Log) (*ProofofefficiencySetTrustedSequencer, error) {
	event := new(ProofofefficiencySetTrustedSequencer)
	if err := _Proofofefficiency.contract.UnpackLog(event, "SetTrustedSequencer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProofofefficiencySetTrustedSequencerURLIterator is returned from FilterSetTrustedSequencerURL and is used to iterate over the raw logs and unpacked data for SetTrustedSequencerURL events raised by the Proofofefficiency contract.
type ProofofefficiencySetTrustedSequencerURLIterator struct {
	Event *ProofofefficiencySetTrustedSequencerURL // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofofefficiencySetTrustedSequencerURLIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofofefficiencySetTrustedSequencerURL)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofofefficiencySetTrustedSequencerURL)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofofefficiencySetTrustedSequencerURLIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofofefficiencySetTrustedSequencerURLIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofofefficiencySetTrustedSequencerURL represents a SetTrustedSequencerURL event raised by the Proofofefficiency contract.
type ProofofefficiencySetTrustedSequencerURL struct {
	NewTrustedSequencerURL string
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterSetTrustedSequencerURL is a free log retrieval operation binding the contract event 0x6b8f723a4c7a5335cafae8a598a0aa0301be1387c037dccc085b62add6448b20.
//
// Solidity: event SetTrustedSequencerURL(string newTrustedSequencerURL)
func (_Proofofefficiency *ProofofefficiencyFilterer) FilterSetTrustedSequencerURL(opts *bind.FilterOpts) (*ProofofefficiencySetTrustedSequencerURLIterator, error) {

	logs, sub, err := _Proofofefficiency.contract.FilterLogs(opts, "SetTrustedSequencerURL")
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencySetTrustedSequencerURLIterator{contract: _Proofofefficiency.contract, event: "SetTrustedSequencerURL", logs: logs, sub: sub}, nil
}

// WatchSetTrustedSequencerURL is a free log subscription operation binding the contract event 0x6b8f723a4c7a5335cafae8a598a0aa0301be1387c037dccc085b62add6448b20.
//
// Solidity: event SetTrustedSequencerURL(string newTrustedSequencerURL)
func (_Proofofefficiency *ProofofefficiencyFilterer) WatchSetTrustedSequencerURL(opts *bind.WatchOpts, sink chan<- *ProofofefficiencySetTrustedSequencerURL) (event.Subscription, error) {

	logs, sub, err := _Proofofefficiency.contract.WatchLogs(opts, "SetTrustedSequencerURL")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofofefficiencySetTrustedSequencerURL)
				if err := _Proofofefficiency.contract.UnpackLog(event, "SetTrustedSequencerURL", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetTrustedSequencerURL is a log parse operation binding the contract event 0x6b8f723a4c7a5335cafae8a598a0aa0301be1387c037dccc085b62add6448b20.
//
// Solidity: event SetTrustedSequencerURL(string newTrustedSequencerURL)
func (_Proofofefficiency *ProofofefficiencyFilterer) ParseSetTrustedSequencerURL(log types.Log) (*ProofofefficiencySetTrustedSequencerURL, error) {
	event := new(ProofofefficiencySetTrustedSequencerURL)
	if err := _Proofofefficiency.contract.UnpackLog(event, "SetTrustedSequencerURL", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProofofefficiencyVerifyBatchesIterator is returned from FilterVerifyBatches and is used to iterate over the raw logs and unpacked data for VerifyBatches events raised by the Proofofefficiency contract.
type ProofofefficiencyVerifyBatchesIterator struct {
	Event *ProofofefficiencyVerifyBatches // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofofefficiencyVerifyBatchesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofofefficiencyVerifyBatches)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofofefficiencyVerifyBatches)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofofefficiencyVerifyBatchesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofofefficiencyVerifyBatchesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofofefficiencyVerifyBatches represents a VerifyBatches event raised by the Proofofefficiency contract.
type ProofofefficiencyVerifyBatches struct {
	NumBatch   uint64
	Aggregator common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterVerifyBatches is a free log retrieval operation binding the contract event 0x9026f258d76afa912681d3fc727111cbab19565af9f03c5323627d6e51dda083.
//
// Solidity: event VerifyBatches(uint64 indexed numBatch, address indexed aggregator)
func (_Proofofefficiency *ProofofefficiencyFilterer) FilterVerifyBatches(opts *bind.FilterOpts, numBatch []uint64, aggregator []common.Address) (*ProofofefficiencyVerifyBatchesIterator, error) {

	var numBatchRule []interface{}
	for _, numBatchItem := range numBatch {
		numBatchRule = append(numBatchRule, numBatchItem)
	}
	var aggregatorRule []interface{}
	for _, aggregatorItem := range aggregator {
		aggregatorRule = append(aggregatorRule, aggregatorItem)
	}

	logs, sub, err := _Proofofefficiency.contract.FilterLogs(opts, "VerifyBatches", numBatchRule, aggregatorRule)
	if err != nil {
		return nil, err
	}
	return &ProofofefficiencyVerifyBatchesIterator{contract: _Proofofefficiency.contract, event: "VerifyBatches", logs: logs, sub: sub}, nil
}

// WatchVerifyBatches is a free log subscription operation binding the contract event 0x9026f258d76afa912681d3fc727111cbab19565af9f03c5323627d6e51dda083.
//
// Solidity: event VerifyBatches(uint64 indexed numBatch, address indexed aggregator)
func (_Proofofefficiency *ProofofefficiencyFilterer) WatchVerifyBatches(opts *bind.WatchOpts, sink chan<- *ProofofefficiencyVerifyBatches, numBatch []uint64, aggregator []common.Address) (event.Subscription, error) {

	var numBatchRule []interface{}
	for _, numBatchItem := range numBatch {
		numBatchRule = append(numBatchRule, numBatchItem)
	}
	var aggregatorRule []interface{}
	for _, aggregatorItem := range aggregator {
		aggregatorRule = append(aggregatorRule, aggregatorItem)
	}

	logs, sub, err := _Proofofefficiency.contract.WatchLogs(opts, "VerifyBatches", numBatchRule, aggregatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofofefficiencyVerifyBatches)
				if err := _Proofofefficiency.contract.UnpackLog(event, "VerifyBatches", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifyBatches is a log parse operation binding the contract event 0x9026f258d76afa912681d3fc727111cbab19565af9f03c5323627d6e51dda083.
//
// Solidity: event VerifyBatches(uint64 indexed numBatch, address indexed aggregator)
func (_Proofofefficiency *ProofofefficiencyFilterer) ParseVerifyBatches(log types.Log) (*ProofofefficiencyVerifyBatches, error) {
	event := new(ProofofefficiencyVerifyBatches)
	if err := _Proofofefficiency.contract.UnpackLog(event, "VerifyBatches", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
