// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bridge

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeMetaData contains all meta data concerning the Bridge contract.
var BridgeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rollupAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddres\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destinationNetwork\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"depositCount\",\"type\":\"uint32\"}],\"name\":\"DepositEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"mainnetExitRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rollupExitRoot\",\"type\":\"bytes32\"}],\"name\":\"UpdateGlobalExitRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"originalNetwork\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"}],\"name\":\"WithdrawEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAINNET_NETWORK_ID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"destinationNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"}],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"originalNetwork\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"smtProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"globalExitRootNum\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"mainnetExitRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rollupExitRoot\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastGlobalExitRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"globalExitRootMap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastGlobalExitRootNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMainnetExitRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRollupExitRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRollupExitRoot\",\"type\":\"bytes32\"}],\"name\":\"updateRollupExitRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"originalNetwork\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"smtProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"verifyMerkleProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawNullifier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200304438038062003044833981810160405281019062000037919062000439565b620000576200004b6200017c60201b60201c565b6200018460201b60201c565b60005b600160206200006a9190620004a4565b8110156200010d5760218160208110620000895762000088620004df565b5b015460218260208110620000a257620000a1620004df565b5b0154604051602001620000b79291906200053d565b604051602081830303815290604052805190602001206021600183620000de91906200056d565b60208110620000f257620000f1620004df565b5b018190555080806200010490620005ca565b9150506200005a565b5080604660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200015f6200024860201b60201c565b604381905550620001756200032c60201b60201c565b50620006bd565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000806000604154905060005b6020811015620003235760018083161415620002b65760018160208110620002825762000281620004df565b5b015483604051602001620002989291906200053d565b604051602081830303815290604052805190602001209250620002fc565b8260218260208110620002ce57620002cd620004df565b5b0154604051602001620002e39291906200053d565b6040516020818303038152906040528051906020012092505b6002826200030b919062000647565b915080806200031a90620005ca565b91505062000255565b50819250505090565b604560008154809291906200034190620005ca565b91905055506043546042546040516020016200035f9291906200053d565b60405160208183030381529060405280519060200120604460006045548152602001908152602001600020819055507f61014378f82a0d809aefaf87a8ac9505b89c321808287a6e7810f29304c1fce3604354604254604051620003c592919062000690565b60405180910390a1565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200040182620003d4565b9050919050565b6200041381620003f4565b81146200041f57600080fd5b50565b600081519050620004338162000408565b92915050565b600060208284031215620004525762000451620003cf565b5b6000620004628482850162000422565b91505092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620004b1826200046b565b9150620004be836200046b565b925082821015620004d457620004d362000475565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b6000819050919050565b6200053762000531826200050e565b62000518565b82525050565b60006200054b828562000522565b6020820191506200055d828462000522565b6020820191508190509392505050565b60006200057a826200046b565b915062000587836200046b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620005bf57620005be62000475565b5b828201905092915050565b6000620005d7826200046b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200060d576200060c62000475565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600062000654826200046b565b915062000661836200046b565b92508262000674576200067362000618565b5b828204905092915050565b6200068a816200050e565b82525050565b6000604082019050620006a760008301856200067f565b620006b660208301846200067f565b9392505050565b61297780620006cd6000396000f3fe6080604052600436106100fe5760003560e01c806355f6bc57116100955780638da5cb5b116100645780638da5cb5b14610306578063a5392cf614610331578063a71d64441461035a578063ed6be5c914610397578063f2fde38b146103c2576100fe565b806355f6bc571461025e5780635ec6a8df14610287578063715018a6146102b25780637d8f0469146102c9576100fe565b8063319cf735116100d1578063319cf735146101a05780633381fe90146101cb5780633ae05047146102085780633ed691ef14610233576100fe565b806301fd904414610103578063029f27931461012e5780630e21fbd7146101595780632dfdf0b514610175575b600080fd5b34801561010f57600080fd5b506101186103eb565b60405161012591906113f8565b60405180910390f35b34801561013a57600080fd5b506101436103f1565b604051610150919061142c565b60405180910390f35b610173600480360381019061016e919061155f565b6103f7565b005b34801561018157600080fd5b5061018a61055c565b604051610197919061142c565b60405180910390f35b3480156101ac57600080fd5b506101b5610562565b6040516101c291906113f8565b60405180910390f35b3480156101d757600080fd5b506101f260048036038101906101ed91906115c6565b610568565b6040516101ff91906113f8565b60405180910390f35b34801561021457600080fd5b5061021d610580565b60405161022a91906113f8565b60405180910390f35b34801561023f57600080fd5b50610248610652565b60405161025591906113f8565b60405180910390f35b34801561026a57600080fd5b506102856004803603810190610280919061161f565b61066f565b005b34801561029357600080fd5b5061029c610711565b6040516102a9919061165b565b60405180910390f35b3480156102be57600080fd5b506102c7610737565b005b3480156102d557600080fd5b506102f060048036038101906102eb919061180f565b6107bf565b6040516102fd91906118fc565b60405180910390f35b34801561031257600080fd5b5061031b6108df565b604051610328919061165b565b60405180910390f35b34801561033d57600080fd5b5061035860048036038101906103539190611917565b610908565b005b34801561036657600080fd5b50610381600480360381019061037c91906115c6565b610c77565b60405161038e91906118fc565b60405180910390f35b3480156103a357600080fd5b506103ac610c97565b6040516103b99190611a21565b60405180910390f35b3480156103ce57600080fd5b506103e960048036038101906103e49190611a3c565b610c9c565b005b60425481565b60455481565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156104735782341461046e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046590611aec565b60405180910390fd5b6104a1565b6104a03330858773ffffffffffffffffffffffffffffffffffffffff16610d94909392919063ffffffff16565b5b600063ffffffff168263ffffffff1614156104f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e890611b7e565b60405180910390fd5b7f0a37f8bae6de7e960aeedce45875d5a75681918316c4bd81f4691152910f8e328484848460415460405161052a959493929190611b9e565b60405180910390a1610540848460008585610e1d565b610548610580565b604381905550610556610f83565b50505050565b60415481565b60435481565b60446020528060005260406000206000915090505481565b6000806000604154905060005b602081101561064957600180831614156105e657600181602081106105b5576105b4611bf1565b5b0154836040516020016105c9929190611c41565b604051602081830303815290604052805190602001209250610627565b82602182602081106105fb576105fa611bf1565b5b015460405160200161060e929190611c41565b6040516020818303038152906040528051906020012092505b6002826106349190611ccb565b9150808061064190611cfc565b91505061058d565b50819250505090565b600060446000604554815260200190815260200160002054905090565b604660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f690611db7565b60405180910390fd5b8060428190555061070e610f83565b50565b604660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61073f611020565b73ffffffffffffffffffffffffffffffffffffffff1661075d6108df565b73ffffffffffffffffffffffffffffffffffffffff16146107b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107aa90611e23565b60405180910390fd5b6107bd6000611028565b565b600080878a8a89896040516020016107db959493929190611ee2565b60405160208183030381529060405280519060200120905060008467ffffffffffffffff16905060005b60208110156108cb57600180831614156108635786818151811061082c5761082b611bf1565b5b602002602001015183604051602001610846929190611c41565b6040516020818303038152906040528051906020012092506108a9565b8287828151811061087757610876611bf1565b5b6020026020010151604051602001610890929190611c41565b6040516020818303038152906040528051906020012092505b6002826108b69190611ccb565b915080806108c390611cfc565b915050610805565b508382149250505098975050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60001515604760008667ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610979576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097090611fb3565b60405180910390fd5b600063ffffffff168763ffffffff16146109c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bf90612045565b60405180910390fd5b600063ffffffff168863ffffffff1614610a17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0e906120d7565b60405180910390fd5b60446000848152602001908152602001600020548282604051602001610a3e929190611c41565b6040516020818303038152906040528051906020012014610a94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8b90612169565b60405180910390fd5b6001604760008667ffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161415610c005760008673ffffffffffffffffffffffffffffffffffffffff168a600067ffffffffffffffff811115610b3457610b3361168c565b5b6040519080825280601f01601f191660200182016040528015610b665781602001600182028036833780820191505090505b50604051610b749190612203565b60006040518083038185875af1925050503d8060008114610bb1576040519150601f19603f3d011682016040523d82523d6000602084013e610bb6565b606091505b5050905080610bfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf19061228c565b60405180910390fd5b50610c2c565b610c2b868a8c73ffffffffffffffffffffffffffffffffffffffff166110ec9092919063ffffffff16565b5b7f8932892d010aea7e4fdefb3764910523c321e06bb52577dc2439501196bf725584898c8c8a604051610c639594939291906122bb565b60405180910390a150505050505050505050565b60476020528060005260406000206000915054906101000a900460ff1681565b600081565b610ca4611020565b73ffffffffffffffffffffffffffffffffffffffff16610cc26108df565b73ffffffffffffffffffffffffffffffffffffffff1614610d18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0f90611e23565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7f90612380565b60405180910390fd5b610d9181611028565b50565b610e17846323b872dd60e01b858585604051602401610db5939291906123a0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611172565b50505050565b60008386868585604051602001610e38959493929190611ee2565b604051602081830303815290604052805190602001209050600160206002610e60919061250a565b610e6a9190612555565b60415410610ead576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea4906125fb565b60405180910390fd5b600160416000828254610ec0919061261b565b925050819055506000604154905060005b6020811015610f695760018083161415610f07578260018260208110610efa57610ef9611bf1565b5b0181905550505050610f7c565b60018160208110610f1b57610f1a611bf1565b5b015483604051602001610f2f929190611c41565b604051602081830303815290604052805190602001209250600282610f549190611ccb565b91508080610f6190611cfc565b915050610ed1565b506000610f7957610f78612671565b5b50505b5050505050565b60456000815480929190610f9690611cfc565b9190505550604354604254604051602001610fb2929190611c41565b60405160208183030381529060405280519060200120604460006045548152602001908152602001600020819055507f61014378f82a0d809aefaf87a8ac9505b89c321808287a6e7810f29304c1fce36043546042546040516110169291906126a0565b60405180910390a1565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61116d8363a9059cbb60e01b848460405160240161110b9291906126c9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611172565b505050565b60006111d4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166112399092919063ffffffff16565b905060008151111561123457808060200190518101906111f4919061271e565b611233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122a906127bd565b60405180910390fd5b5b505050565b60606112488484600085611251565b90509392505050565b606082471015611296576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128d9061284f565b60405180910390fd5b61129f85611365565b6112de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d5906128bb565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516113079190612203565b60006040518083038185875af1925050503d8060008114611344576040519150601f19603f3d011682016040523d82523d6000602084013e611349565b606091505b5091509150611359828286611378565b92505050949350505050565b600080823b905060008111915050919050565b60608315611388578290506113d8565b60008351111561139b5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113cf919061291f565b60405180910390fd5b9392505050565b6000819050919050565b6113f2816113df565b82525050565b600060208201905061140d60008301846113e9565b92915050565b6000819050919050565b61142681611413565b82525050565b6000602082019050611441600083018461141d565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114868261145b565b9050919050565b60006114988261147b565b9050919050565b6114a88161148d565b81146114b357600080fd5b50565b6000813590506114c58161149f565b92915050565b6114d481611413565b81146114df57600080fd5b50565b6000813590506114f1816114cb565b92915050565b600063ffffffff82169050919050565b611510816114f7565b811461151b57600080fd5b50565b60008135905061152d81611507565b92915050565b61153c8161147b565b811461154757600080fd5b50565b60008135905061155981611533565b92915050565b6000806000806080858703121561157957611578611451565b5b6000611587878288016114b6565b9450506020611598878288016114e2565b93505060406115a98782880161151e565b92505060606115ba8782880161154a565b91505092959194509250565b6000602082840312156115dc576115db611451565b5b60006115ea848285016114e2565b91505092915050565b6115fc816113df565b811461160757600080fd5b50565b600081359050611619816115f3565b92915050565b60006020828403121561163557611634611451565b5b60006116438482850161160a565b91505092915050565b6116558161147b565b82525050565b6000602082019050611670600083018461164c565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6116c48261167b565b810181811067ffffffffffffffff821117156116e3576116e261168c565b5b80604052505050565b60006116f6611447565b905061170282826116bb565b919050565b600067ffffffffffffffff8211156117225761172161168c565b5b602082029050602081019050919050565b600080fd5b600061174b61174684611707565b6116ec565b9050808382526020820190506020840283018581111561176e5761176d611733565b5b835b818110156117975780611783888261160a565b845260208401935050602081019050611770565b5050509392505050565b600082601f8301126117b6576117b5611676565b5b81356117c6848260208601611738565b91505092915050565b600067ffffffffffffffff82169050919050565b6117ec816117cf565b81146117f757600080fd5b50565b600081359050611809816117e3565b92915050565b600080600080600080600080610100898b0312156118305761182f611451565b5b600061183e8b828c0161154a565b985050602061184f8b828c016114e2565b97505060406118608b828c0161151e565b96505060606118718b828c0161151e565b95505060806118828b828c0161154a565b94505060a089013567ffffffffffffffff8111156118a3576118a2611456565b5b6118af8b828c016117a1565b93505060c06118c08b828c016117fa565b92505060e06118d18b828c0161160a565b9150509295985092959890939650565b60008115159050919050565b6118f6816118e1565b82525050565b600060208201905061191160008301846118ed565b92915050565b6000806000806000806000806000806101408b8d03121561193b5761193a611451565b5b60006119498d828e0161154a565b9a5050602061195a8d828e016114e2565b995050604061196b8d828e0161151e565b985050606061197c8d828e0161151e565b975050608061198d8d828e0161154a565b96505060a08b013567ffffffffffffffff8111156119ae576119ad611456565b5b6119ba8d828e016117a1565b95505060c06119cb8d828e016117fa565b94505060e06119dc8d828e016114e2565b9350506101006119ee8d828e0161160a565b925050610120611a008d828e0161160a565b9150509295989b9194979a5092959850565b611a1b816114f7565b82525050565b6000602082019050611a366000830184611a12565b92915050565b600060208284031215611a5257611a51611451565b5b6000611a608482850161154a565b91505092915050565b600082825260208201905092915050565b7f4272696467653a3a6465706f7369743a20414d4f554e545f444f45535f4e4f5460008201527f5f4d415443485f4d53475f56414c554500000000000000000000000000000000602082015250565b6000611ad6603083611a69565b9150611ae182611a7a565b604082019050919050565b60006020820190508181036000830152611b0581611ac9565b9050919050565b7f4272696467653a3a6465706f7369743a2044455354494e4154494f4e5f43414e60008201527f545f42455f4d41494e4e45540000000000000000000000000000000000000000602082015250565b6000611b68602c83611a69565b9150611b7382611b0c565b604082019050919050565b60006020820190508181036000830152611b9781611b5b565b9050919050565b600060a082019050611bb3600083018861164c565b611bc0602083018761141d565b611bcd6040830186611a12565b611bda606083018561164c565b611be76080830184611a12565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b611c3b611c36826113df565b611c20565b82525050565b6000611c4d8285611c2a565b602082019150611c5d8284611c2a565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611cd682611413565b9150611ce183611413565b925082611cf157611cf0611c6d565b5b828204905092915050565b6000611d0782611413565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611d3a57611d39611c9c565b5b600182019050919050565b7f4272696467653a3a757064617465526f6c6c757045786974526f6f743a204f4e60008201527f4c595f524f4c4c55500000000000000000000000000000000000000000000000602082015250565b6000611da1602983611a69565b9150611dac82611d45565b604082019050919050565b60006020820190508181036000830152611dd081611d94565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611e0d602083611a69565b9150611e1882611dd7565b602082019050919050565b60006020820190508181036000830152611e3c81611e00565b9050919050565b60008160e01b9050919050565b6000611e5b82611e43565b9050919050565b611e73611e6e826114f7565b611e50565b82525050565b60008160601b9050919050565b6000611e9182611e79565b9050919050565b6000611ea382611e86565b9050919050565b611ebb611eb68261147b565b611e98565b82525050565b6000819050919050565b611edc611ed782611413565b611ec1565b82525050565b6000611eee8288611e62565b600482019150611efe8287611eaa565b601482019150611f0e8286611ecb565b602082019150611f1e8285611e62565b600482019150611f2e8284611eaa565b6014820191508190509695505050505050565b7f4272696467653a3a77697468647261773a20414c52454144595f434c41494d4560008201527f445f574954484452415700000000000000000000000000000000000000000000602082015250565b6000611f9d602a83611a69565b9150611fa882611f41565b604082019050919050565b60006020820190508181036000830152611fcc81611f90565b9050919050565b7f4272696467653a3a77697468647261773a2044455354494e4154494f4e5f4e4560008201527f54574f524b5f4e4f545f4d41494e4e4554000000000000000000000000000000602082015250565b600061202f603183611a69565b915061203a82611fd3565b604082019050919050565b6000602082019050818103600083015261205e81612022565b9050919050565b7f4272696467653a3a77697468647261773a204f524947494e5f4e4554574f524b60008201527f5f4e4f545f4d41494e4e45540000000000000000000000000000000000000000602082015250565b60006120c1602c83611a69565b91506120cc82612065565b604082019050919050565b600060208201905081810360008301526120f0816120b4565b9050919050565b7f4272696467653a3a77697468647261773a20474c4f42414c5f455849545f524f60008201527f4f545f444f45535f4e4f545f4d41544348000000000000000000000000000000602082015250565b6000612153603183611a69565b915061215e826120f7565b604082019050919050565b6000602082019050818103600083015261218281612146565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156121bd5780820151818401526020810190506121a2565b838111156121cc576000848401525b50505050565b60006121dd82612189565b6121e78185612194565b93506121f781856020860161219f565b80840191505092915050565b600061220f82846121d2565b915081905092915050565b7f4272696467653a3a77697468647261773a204554485f5452414e534645525f4660008201527f41494c4544000000000000000000000000000000000000000000000000000000602082015250565b6000612276602583611a69565b91506122818261221a565b604082019050919050565b600060208201905081810360008301526122a581612269565b9050919050565b6122b5816117cf565b82525050565b600060a0820190506122d060008301886122ac565b6122dd6020830187611a12565b6122ea604083018661164c565b6122f7606083018561141d565b612304608083018461164c565b9695505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061236a602683611a69565b91506123758261230e565b604082019050919050565b600060208201905081810360008301526123998161235d565b9050919050565b60006060820190506123b5600083018661164c565b6123c2602083018561164c565b6123cf604083018461141d565b949350505050565b60008160011c9050919050565b6000808291508390505b600185111561242e5780860481111561240a57612409611c9c565b5b60018516156124195780820291505b8081029050612427856123d7565b94506123ee565b94509492505050565b6000826124475760019050612503565b816124555760009050612503565b816001811461246b5760028114612475576124a4565b6001915050612503565b60ff84111561248757612486611c9c565b5b8360020a91508482111561249e5761249d611c9c565b5b50612503565b5060208310610133831016604e8410600b84101617156124d95782820a9050838111156124d4576124d3611c9c565b5b612503565b6124e684848460016123e4565b925090508184048111156124fd576124fc611c9c565b5b81810290505b9392505050565b600061251582611413565b915061252083611413565b925061254d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612437565b905092915050565b600061256082611413565b915061256b83611413565b92508282101561257e5761257d611c9c565b5b828203905092915050565b7f4465706f736974436f6e74726163743a5f6465706f7369743a204d45524b4c4560008201527f5f545245455f46554c4c00000000000000000000000000000000000000000000602082015250565b60006125e5602a83611a69565b91506125f082612589565b604082019050919050565b60006020820190508181036000830152612614816125d8565b9050919050565b600061262682611413565b915061263183611413565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561266657612665611c9c565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60006040820190506126b560008301856113e9565b6126c260208301846113e9565b9392505050565b60006040820190506126de600083018561164c565b6126eb602083018461141d565b9392505050565b6126fb816118e1565b811461270657600080fd5b50565b600081519050612718816126f2565b92915050565b60006020828403121561273457612733611451565b5b600061274284828501612709565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006127a7602a83611a69565b91506127b28261274b565b604082019050919050565b600060208201905081810360008301526127d68161279a565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612839602683611a69565b9150612844826127dd565b604082019050919050565b600060208201905081810360008301526128688161282c565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006128a5601d83611a69565b91506128b08261286f565b602082019050919050565b600060208201905081810360008301526128d481612898565b9050919050565b600081519050919050565b60006128f1826128db565b6128fb8185611a69565b935061290b81856020860161219f565b6129148161167b565b840191505092915050565b6000602082019050818103600083015261293981846128e6565b90509291505056fea2646970667358221220852cc081cab215f51c96ed280bcbcb73de666b4ec3a5123ef5803b5835c8f39a64736f6c63430008090033",
}

// BridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeMetaData.ABI instead.
var BridgeABI = BridgeMetaData.ABI

// BridgeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeMetaData.Bin instead.
var BridgeBin = BridgeMetaData.Bin

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend, _rollupAddress common.Address) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := BridgeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeBin), backend, _rollupAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// MAINNETNETWORKID is a free data retrieval call binding the contract method 0xed6be5c9.
//
// Solidity: function MAINNET_NETWORK_ID() view returns(uint32)
func (_Bridge *BridgeCaller) MAINNETNETWORKID(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "MAINNET_NETWORK_ID")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// MAINNETNETWORKID is a free data retrieval call binding the contract method 0xed6be5c9.
//
// Solidity: function MAINNET_NETWORK_ID() view returns(uint32)
func (_Bridge *BridgeSession) MAINNETNETWORKID() (uint32, error) {
	return _Bridge.Contract.MAINNETNETWORKID(&_Bridge.CallOpts)
}

// MAINNETNETWORKID is a free data retrieval call binding the contract method 0xed6be5c9.
//
// Solidity: function MAINNET_NETWORK_ID() view returns(uint32)
func (_Bridge *BridgeCallerSession) MAINNETNETWORKID() (uint32, error) {
	return _Bridge.Contract.MAINNETNETWORKID(&_Bridge.CallOpts)
}

// DepositCount is a free data retrieval call binding the contract method 0x2dfdf0b5.
//
// Solidity: function depositCount() view returns(uint256)
func (_Bridge *BridgeCaller) DepositCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "depositCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DepositCount is a free data retrieval call binding the contract method 0x2dfdf0b5.
//
// Solidity: function depositCount() view returns(uint256)
func (_Bridge *BridgeSession) DepositCount() (*big.Int, error) {
	return _Bridge.Contract.DepositCount(&_Bridge.CallOpts)
}

// DepositCount is a free data retrieval call binding the contract method 0x2dfdf0b5.
//
// Solidity: function depositCount() view returns(uint256)
func (_Bridge *BridgeCallerSession) DepositCount() (*big.Int, error) {
	return _Bridge.Contract.DepositCount(&_Bridge.CallOpts)
}

// GetDepositRoot is a free data retrieval call binding the contract method 0x3ae05047.
//
// Solidity: function getDepositRoot() view returns(bytes32)
func (_Bridge *BridgeCaller) GetDepositRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getDepositRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetDepositRoot is a free data retrieval call binding the contract method 0x3ae05047.
//
// Solidity: function getDepositRoot() view returns(bytes32)
func (_Bridge *BridgeSession) GetDepositRoot() ([32]byte, error) {
	return _Bridge.Contract.GetDepositRoot(&_Bridge.CallOpts)
}

// GetDepositRoot is a free data retrieval call binding the contract method 0x3ae05047.
//
// Solidity: function getDepositRoot() view returns(bytes32)
func (_Bridge *BridgeCallerSession) GetDepositRoot() ([32]byte, error) {
	return _Bridge.Contract.GetDepositRoot(&_Bridge.CallOpts)
}

// GetLastGlobalExitRoot is a free data retrieval call binding the contract method 0x3ed691ef.
//
// Solidity: function getLastGlobalExitRoot() view returns(bytes32)
func (_Bridge *BridgeCaller) GetLastGlobalExitRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getLastGlobalExitRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetLastGlobalExitRoot is a free data retrieval call binding the contract method 0x3ed691ef.
//
// Solidity: function getLastGlobalExitRoot() view returns(bytes32)
func (_Bridge *BridgeSession) GetLastGlobalExitRoot() ([32]byte, error) {
	return _Bridge.Contract.GetLastGlobalExitRoot(&_Bridge.CallOpts)
}

// GetLastGlobalExitRoot is a free data retrieval call binding the contract method 0x3ed691ef.
//
// Solidity: function getLastGlobalExitRoot() view returns(bytes32)
func (_Bridge *BridgeCallerSession) GetLastGlobalExitRoot() ([32]byte, error) {
	return _Bridge.Contract.GetLastGlobalExitRoot(&_Bridge.CallOpts)
}

// GlobalExitRootMap is a free data retrieval call binding the contract method 0x3381fe90.
//
// Solidity: function globalExitRootMap(uint256 ) view returns(bytes32)
func (_Bridge *BridgeCaller) GlobalExitRootMap(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "globalExitRootMap", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GlobalExitRootMap is a free data retrieval call binding the contract method 0x3381fe90.
//
// Solidity: function globalExitRootMap(uint256 ) view returns(bytes32)
func (_Bridge *BridgeSession) GlobalExitRootMap(arg0 *big.Int) ([32]byte, error) {
	return _Bridge.Contract.GlobalExitRootMap(&_Bridge.CallOpts, arg0)
}

// GlobalExitRootMap is a free data retrieval call binding the contract method 0x3381fe90.
//
// Solidity: function globalExitRootMap(uint256 ) view returns(bytes32)
func (_Bridge *BridgeCallerSession) GlobalExitRootMap(arg0 *big.Int) ([32]byte, error) {
	return _Bridge.Contract.GlobalExitRootMap(&_Bridge.CallOpts, arg0)
}

// LastGlobalExitRootNum is a free data retrieval call binding the contract method 0x029f2793.
//
// Solidity: function lastGlobalExitRootNum() view returns(uint256)
func (_Bridge *BridgeCaller) LastGlobalExitRootNum(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "lastGlobalExitRootNum")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastGlobalExitRootNum is a free data retrieval call binding the contract method 0x029f2793.
//
// Solidity: function lastGlobalExitRootNum() view returns(uint256)
func (_Bridge *BridgeSession) LastGlobalExitRootNum() (*big.Int, error) {
	return _Bridge.Contract.LastGlobalExitRootNum(&_Bridge.CallOpts)
}

// LastGlobalExitRootNum is a free data retrieval call binding the contract method 0x029f2793.
//
// Solidity: function lastGlobalExitRootNum() view returns(uint256)
func (_Bridge *BridgeCallerSession) LastGlobalExitRootNum() (*big.Int, error) {
	return _Bridge.Contract.LastGlobalExitRootNum(&_Bridge.CallOpts)
}

// LastMainnetExitRoot is a free data retrieval call binding the contract method 0x319cf735.
//
// Solidity: function lastMainnetExitRoot() view returns(bytes32)
func (_Bridge *BridgeCaller) LastMainnetExitRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "lastMainnetExitRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LastMainnetExitRoot is a free data retrieval call binding the contract method 0x319cf735.
//
// Solidity: function lastMainnetExitRoot() view returns(bytes32)
func (_Bridge *BridgeSession) LastMainnetExitRoot() ([32]byte, error) {
	return _Bridge.Contract.LastMainnetExitRoot(&_Bridge.CallOpts)
}

// LastMainnetExitRoot is a free data retrieval call binding the contract method 0x319cf735.
//
// Solidity: function lastMainnetExitRoot() view returns(bytes32)
func (_Bridge *BridgeCallerSession) LastMainnetExitRoot() ([32]byte, error) {
	return _Bridge.Contract.LastMainnetExitRoot(&_Bridge.CallOpts)
}

// LastRollupExitRoot is a free data retrieval call binding the contract method 0x01fd9044.
//
// Solidity: function lastRollupExitRoot() view returns(bytes32)
func (_Bridge *BridgeCaller) LastRollupExitRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "lastRollupExitRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LastRollupExitRoot is a free data retrieval call binding the contract method 0x01fd9044.
//
// Solidity: function lastRollupExitRoot() view returns(bytes32)
func (_Bridge *BridgeSession) LastRollupExitRoot() ([32]byte, error) {
	return _Bridge.Contract.LastRollupExitRoot(&_Bridge.CallOpts)
}

// LastRollupExitRoot is a free data retrieval call binding the contract method 0x01fd9044.
//
// Solidity: function lastRollupExitRoot() view returns(bytes32)
func (_Bridge *BridgeCallerSession) LastRollupExitRoot() ([32]byte, error) {
	return _Bridge.Contract.LastRollupExitRoot(&_Bridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeSession) Owner() (common.Address, error) {
	return _Bridge.Contract.Owner(&_Bridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeCallerSession) Owner() (common.Address, error) {
	return _Bridge.Contract.Owner(&_Bridge.CallOpts)
}

// RollupAddress is a free data retrieval call binding the contract method 0x5ec6a8df.
//
// Solidity: function rollupAddress() view returns(address)
func (_Bridge *BridgeCaller) RollupAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "rollupAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupAddress is a free data retrieval call binding the contract method 0x5ec6a8df.
//
// Solidity: function rollupAddress() view returns(address)
func (_Bridge *BridgeSession) RollupAddress() (common.Address, error) {
	return _Bridge.Contract.RollupAddress(&_Bridge.CallOpts)
}

// RollupAddress is a free data retrieval call binding the contract method 0x5ec6a8df.
//
// Solidity: function rollupAddress() view returns(address)
func (_Bridge *BridgeCallerSession) RollupAddress() (common.Address, error) {
	return _Bridge.Contract.RollupAddress(&_Bridge.CallOpts)
}

// VerifyMerkleProof is a free data retrieval call binding the contract method 0x7d8f0469.
//
// Solidity: function verifyMerkleProof(address token, uint256 amount, uint32 originalNetwork, uint32 destinationNetwork, address destinationAddress, bytes32[] smtProof, uint64 index, bytes32 root) pure returns(bool)
func (_Bridge *BridgeCaller) VerifyMerkleProof(opts *bind.CallOpts, token common.Address, amount *big.Int, originalNetwork uint32, destinationNetwork uint32, destinationAddress common.Address, smtProof [][32]byte, index uint64, root [32]byte) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "verifyMerkleProof", token, amount, originalNetwork, destinationNetwork, destinationAddress, smtProof, index, root)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyMerkleProof is a free data retrieval call binding the contract method 0x7d8f0469.
//
// Solidity: function verifyMerkleProof(address token, uint256 amount, uint32 originalNetwork, uint32 destinationNetwork, address destinationAddress, bytes32[] smtProof, uint64 index, bytes32 root) pure returns(bool)
func (_Bridge *BridgeSession) VerifyMerkleProof(token common.Address, amount *big.Int, originalNetwork uint32, destinationNetwork uint32, destinationAddress common.Address, smtProof [][32]byte, index uint64, root [32]byte) (bool, error) {
	return _Bridge.Contract.VerifyMerkleProof(&_Bridge.CallOpts, token, amount, originalNetwork, destinationNetwork, destinationAddress, smtProof, index, root)
}

// VerifyMerkleProof is a free data retrieval call binding the contract method 0x7d8f0469.
//
// Solidity: function verifyMerkleProof(address token, uint256 amount, uint32 originalNetwork, uint32 destinationNetwork, address destinationAddress, bytes32[] smtProof, uint64 index, bytes32 root) pure returns(bool)
func (_Bridge *BridgeCallerSession) VerifyMerkleProof(token common.Address, amount *big.Int, originalNetwork uint32, destinationNetwork uint32, destinationAddress common.Address, smtProof [][32]byte, index uint64, root [32]byte) (bool, error) {
	return _Bridge.Contract.VerifyMerkleProof(&_Bridge.CallOpts, token, amount, originalNetwork, destinationNetwork, destinationAddress, smtProof, index, root)
}

// WithdrawNullifier is a free data retrieval call binding the contract method 0xa71d6444.
//
// Solidity: function withdrawNullifier(uint256 ) view returns(bool)
func (_Bridge *BridgeCaller) WithdrawNullifier(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "withdrawNullifier", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// WithdrawNullifier is a free data retrieval call binding the contract method 0xa71d6444.
//
// Solidity: function withdrawNullifier(uint256 ) view returns(bool)
func (_Bridge *BridgeSession) WithdrawNullifier(arg0 *big.Int) (bool, error) {
	return _Bridge.Contract.WithdrawNullifier(&_Bridge.CallOpts, arg0)
}

// WithdrawNullifier is a free data retrieval call binding the contract method 0xa71d6444.
//
// Solidity: function withdrawNullifier(uint256 ) view returns(bool)
func (_Bridge *BridgeCallerSession) WithdrawNullifier(arg0 *big.Int) (bool, error) {
	return _Bridge.Contract.WithdrawNullifier(&_Bridge.CallOpts, arg0)
}

// Bridge is a paid mutator transaction binding the contract method 0x0e21fbd7.
//
// Solidity: function bridge(address token, uint256 amount, uint32 destinationNetwork, address destinationAddress) payable returns()
func (_Bridge *BridgeTransactor) Bridge(opts *bind.TransactOpts, token common.Address, amount *big.Int, destinationNetwork uint32, destinationAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "bridge", token, amount, destinationNetwork, destinationAddress)
}

// Bridge is a paid mutator transaction binding the contract method 0x0e21fbd7.
//
// Solidity: function bridge(address token, uint256 amount, uint32 destinationNetwork, address destinationAddress) payable returns()
func (_Bridge *BridgeSession) Bridge(token common.Address, amount *big.Int, destinationNetwork uint32, destinationAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.Bridge(&_Bridge.TransactOpts, token, amount, destinationNetwork, destinationAddress)
}

// Bridge is a paid mutator transaction binding the contract method 0x0e21fbd7.
//
// Solidity: function bridge(address token, uint256 amount, uint32 destinationNetwork, address destinationAddress) payable returns()
func (_Bridge *BridgeTransactorSession) Bridge(token common.Address, amount *big.Int, destinationNetwork uint32, destinationAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.Bridge(&_Bridge.TransactOpts, token, amount, destinationNetwork, destinationAddress)
}

// Claim is a paid mutator transaction binding the contract method 0xa5392cf6.
//
// Solidity: function claim(address token, uint256 amount, uint32 originalNetwork, uint32 destinationNetwork, address destinationAddress, bytes32[] smtProof, uint64 index, uint256 globalExitRootNum, bytes32 mainnetExitRoot, bytes32 rollupExitRoot) returns()
func (_Bridge *BridgeTransactor) Claim(opts *bind.TransactOpts, token common.Address, amount *big.Int, originalNetwork uint32, destinationNetwork uint32, destinationAddress common.Address, smtProof [][32]byte, index uint64, globalExitRootNum *big.Int, mainnetExitRoot [32]byte, rollupExitRoot [32]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "claim", token, amount, originalNetwork, destinationNetwork, destinationAddress, smtProof, index, globalExitRootNum, mainnetExitRoot, rollupExitRoot)
}

// Claim is a paid mutator transaction binding the contract method 0xa5392cf6.
//
// Solidity: function claim(address token, uint256 amount, uint32 originalNetwork, uint32 destinationNetwork, address destinationAddress, bytes32[] smtProof, uint64 index, uint256 globalExitRootNum, bytes32 mainnetExitRoot, bytes32 rollupExitRoot) returns()
func (_Bridge *BridgeSession) Claim(token common.Address, amount *big.Int, originalNetwork uint32, destinationNetwork uint32, destinationAddress common.Address, smtProof [][32]byte, index uint64, globalExitRootNum *big.Int, mainnetExitRoot [32]byte, rollupExitRoot [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.Claim(&_Bridge.TransactOpts, token, amount, originalNetwork, destinationNetwork, destinationAddress, smtProof, index, globalExitRootNum, mainnetExitRoot, rollupExitRoot)
}

// Claim is a paid mutator transaction binding the contract method 0xa5392cf6.
//
// Solidity: function claim(address token, uint256 amount, uint32 originalNetwork, uint32 destinationNetwork, address destinationAddress, bytes32[] smtProof, uint64 index, uint256 globalExitRootNum, bytes32 mainnetExitRoot, bytes32 rollupExitRoot) returns()
func (_Bridge *BridgeTransactorSession) Claim(token common.Address, amount *big.Int, originalNetwork uint32, destinationNetwork uint32, destinationAddress common.Address, smtProof [][32]byte, index uint64, globalExitRootNum *big.Int, mainnetExitRoot [32]byte, rollupExitRoot [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.Claim(&_Bridge.TransactOpts, token, amount, originalNetwork, destinationNetwork, destinationAddress, smtProof, index, globalExitRootNum, mainnetExitRoot, rollupExitRoot)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bridge.Contract.RenounceOwnership(&_Bridge.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bridge.Contract.RenounceOwnership(&_Bridge.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOwnership(&_Bridge.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOwnership(&_Bridge.TransactOpts, newOwner)
}

// UpdateRollupExitRoot is a paid mutator transaction binding the contract method 0x55f6bc57.
//
// Solidity: function updateRollupExitRoot(bytes32 newRollupExitRoot) returns()
func (_Bridge *BridgeTransactor) UpdateRollupExitRoot(opts *bind.TransactOpts, newRollupExitRoot [32]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "updateRollupExitRoot", newRollupExitRoot)
}

// UpdateRollupExitRoot is a paid mutator transaction binding the contract method 0x55f6bc57.
//
// Solidity: function updateRollupExitRoot(bytes32 newRollupExitRoot) returns()
func (_Bridge *BridgeSession) UpdateRollupExitRoot(newRollupExitRoot [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.UpdateRollupExitRoot(&_Bridge.TransactOpts, newRollupExitRoot)
}

// UpdateRollupExitRoot is a paid mutator transaction binding the contract method 0x55f6bc57.
//
// Solidity: function updateRollupExitRoot(bytes32 newRollupExitRoot) returns()
func (_Bridge *BridgeTransactorSession) UpdateRollupExitRoot(newRollupExitRoot [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.UpdateRollupExitRoot(&_Bridge.TransactOpts, newRollupExitRoot)
}

// BridgeDepositEventIterator is returned from FilterDepositEvent and is used to iterate over the raw logs and unpacked data for DepositEvent events raised by the Bridge contract.
type BridgeDepositEventIterator struct {
	Event *BridgeDepositEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDepositEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDepositEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDepositEvent represents a DepositEvent event raised by the Bridge contract.
type BridgeDepositEvent struct {
	TokenAddres        common.Address
	Amount             *big.Int
	DestinationNetwork uint32
	DestinationAddress common.Address
	DepositCount       uint32
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDepositEvent is a free log retrieval operation binding the contract event 0x0a37f8bae6de7e960aeedce45875d5a75681918316c4bd81f4691152910f8e32.
//
// Solidity: event DepositEvent(address tokenAddres, uint256 amount, uint32 destinationNetwork, address destinationAddress, uint32 depositCount)
func (_Bridge *BridgeFilterer) FilterDepositEvent(opts *bind.FilterOpts) (*BridgeDepositEventIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "DepositEvent")
	if err != nil {
		return nil, err
	}
	return &BridgeDepositEventIterator{contract: _Bridge.contract, event: "DepositEvent", logs: logs, sub: sub}, nil
}

// WatchDepositEvent is a free log subscription operation binding the contract event 0x0a37f8bae6de7e960aeedce45875d5a75681918316c4bd81f4691152910f8e32.
//
// Solidity: event DepositEvent(address tokenAddres, uint256 amount, uint32 destinationNetwork, address destinationAddress, uint32 depositCount)
func (_Bridge *BridgeFilterer) WatchDepositEvent(opts *bind.WatchOpts, sink chan<- *BridgeDepositEvent) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "DepositEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDepositEvent)
				if err := _Bridge.contract.UnpackLog(event, "DepositEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositEvent is a log parse operation binding the contract event 0x0a37f8bae6de7e960aeedce45875d5a75681918316c4bd81f4691152910f8e32.
//
// Solidity: event DepositEvent(address tokenAddres, uint256 amount, uint32 destinationNetwork, address destinationAddress, uint32 depositCount)
func (_Bridge *BridgeFilterer) ParseDepositEvent(log types.Log) (*BridgeDepositEvent, error) {
	event := new(BridgeDepositEvent)
	if err := _Bridge.contract.UnpackLog(event, "DepositEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Bridge contract.
type BridgeOwnershipTransferredIterator struct {
	Event *BridgeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeOwnershipTransferred represents a OwnershipTransferred event raised by the Bridge contract.
type BridgeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BridgeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeOwnershipTransferredIterator{contract: _Bridge.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BridgeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeOwnershipTransferred)
				if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) ParseOwnershipTransferred(log types.Log) (*BridgeOwnershipTransferred, error) {
	event := new(BridgeOwnershipTransferred)
	if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeUpdateGlobalExitRootIterator is returned from FilterUpdateGlobalExitRoot and is used to iterate over the raw logs and unpacked data for UpdateGlobalExitRoot events raised by the Bridge contract.
type BridgeUpdateGlobalExitRootIterator struct {
	Event *BridgeUpdateGlobalExitRoot // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeUpdateGlobalExitRootIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeUpdateGlobalExitRoot)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeUpdateGlobalExitRoot)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeUpdateGlobalExitRootIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeUpdateGlobalExitRootIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeUpdateGlobalExitRoot represents a UpdateGlobalExitRoot event raised by the Bridge contract.
type BridgeUpdateGlobalExitRoot struct {
	MainnetExitRoot [32]byte
	RollupExitRoot  [32]byte
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterUpdateGlobalExitRoot is a free log retrieval operation binding the contract event 0x61014378f82a0d809aefaf87a8ac9505b89c321808287a6e7810f29304c1fce3.
//
// Solidity: event UpdateGlobalExitRoot(bytes32 mainnetExitRoot, bytes32 rollupExitRoot)
func (_Bridge *BridgeFilterer) FilterUpdateGlobalExitRoot(opts *bind.FilterOpts) (*BridgeUpdateGlobalExitRootIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "UpdateGlobalExitRoot")
	if err != nil {
		return nil, err
	}
	return &BridgeUpdateGlobalExitRootIterator{contract: _Bridge.contract, event: "UpdateGlobalExitRoot", logs: logs, sub: sub}, nil
}

// WatchUpdateGlobalExitRoot is a free log subscription operation binding the contract event 0x61014378f82a0d809aefaf87a8ac9505b89c321808287a6e7810f29304c1fce3.
//
// Solidity: event UpdateGlobalExitRoot(bytes32 mainnetExitRoot, bytes32 rollupExitRoot)
func (_Bridge *BridgeFilterer) WatchUpdateGlobalExitRoot(opts *bind.WatchOpts, sink chan<- *BridgeUpdateGlobalExitRoot) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "UpdateGlobalExitRoot")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeUpdateGlobalExitRoot)
				if err := _Bridge.contract.UnpackLog(event, "UpdateGlobalExitRoot", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateGlobalExitRoot is a log parse operation binding the contract event 0x61014378f82a0d809aefaf87a8ac9505b89c321808287a6e7810f29304c1fce3.
//
// Solidity: event UpdateGlobalExitRoot(bytes32 mainnetExitRoot, bytes32 rollupExitRoot)
func (_Bridge *BridgeFilterer) ParseUpdateGlobalExitRoot(log types.Log) (*BridgeUpdateGlobalExitRoot, error) {
	event := new(BridgeUpdateGlobalExitRoot)
	if err := _Bridge.contract.UnpackLog(event, "UpdateGlobalExitRoot", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeWithdrawEventIterator is returned from FilterWithdrawEvent and is used to iterate over the raw logs and unpacked data for WithdrawEvent events raised by the Bridge contract.
type BridgeWithdrawEventIterator struct {
	Event *BridgeWithdrawEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeWithdrawEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeWithdrawEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeWithdrawEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeWithdrawEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeWithdrawEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeWithdrawEvent represents a WithdrawEvent event raised by the Bridge contract.
type BridgeWithdrawEvent struct {
	Index              uint64
	OriginalNetwork    uint32
	Token              common.Address
	Amount             *big.Int
	DestinationAddress common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterWithdrawEvent is a free log retrieval operation binding the contract event 0x8932892d010aea7e4fdefb3764910523c321e06bb52577dc2439501196bf7255.
//
// Solidity: event WithdrawEvent(uint64 index, uint32 originalNetwork, address token, uint256 amount, address destinationAddress)
func (_Bridge *BridgeFilterer) FilterWithdrawEvent(opts *bind.FilterOpts) (*BridgeWithdrawEventIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "WithdrawEvent")
	if err != nil {
		return nil, err
	}
	return &BridgeWithdrawEventIterator{contract: _Bridge.contract, event: "WithdrawEvent", logs: logs, sub: sub}, nil
}

// WatchWithdrawEvent is a free log subscription operation binding the contract event 0x8932892d010aea7e4fdefb3764910523c321e06bb52577dc2439501196bf7255.
//
// Solidity: event WithdrawEvent(uint64 index, uint32 originalNetwork, address token, uint256 amount, address destinationAddress)
func (_Bridge *BridgeFilterer) WatchWithdrawEvent(opts *bind.WatchOpts, sink chan<- *BridgeWithdrawEvent) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "WithdrawEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeWithdrawEvent)
				if err := _Bridge.contract.UnpackLog(event, "WithdrawEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawEvent is a log parse operation binding the contract event 0x8932892d010aea7e4fdefb3764910523c321e06bb52577dc2439501196bf7255.
//
// Solidity: event WithdrawEvent(uint64 index, uint32 originalNetwork, address token, uint256 amount, address destinationAddress)
func (_Bridge *BridgeFilterer) ParseWithdrawEvent(log types.Log) (*BridgeWithdrawEvent, error) {
	event := new(BridgeWithdrawEvent)
	if err := _Bridge.contract.UnpackLog(event, "WithdrawEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
