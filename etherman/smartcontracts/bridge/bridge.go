// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bridge

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeMetaData contains all meta data concerning the Bridge contract.
var BridgeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rollupAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddres\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destinationNetwork\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"depositCount\",\"type\":\"uint32\"}],\"name\":\"DepositEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"mainnetExitRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rollupExitRoot\",\"type\":\"bytes32\"}],\"name\":\"UpdateGlobalExitRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"originalNetwork\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"}],\"name\":\"WithdrawEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAINNET_NETWORK_ID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"destinationNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"}],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"originalNetwork\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"smtProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"globalExitRootNum\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"mainnetExitRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rollupExitRoot\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastGlobalExitRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"globalExitRootMap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastGlobalExitRootNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMainnetExitRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRollupExitRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRollupExitRoot\",\"type\":\"bytes32\"}],\"name\":\"updateRollupExitRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"originalNetwork\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"smtProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"verifyMerkleProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawNullifier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620030ff380380620030ff833981810160405281019062000037919062000439565b620000576200004b6200017c60201b60201c565b6200018460201b60201c565b60005b600160206200006a9190620004a4565b8110156200010d5760218160208110620000895762000088620004df565b5b015460218260208110620000a257620000a1620004df565b5b0154604051602001620000b79291906200053d565b604051602081830303815290604052805190602001206021600183620000de91906200056d565b60208110620000f257620000f1620004df565b5b018190555080806200010490620005ca565b9150506200005a565b5080604660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200015f6200024860201b60201c565b604381905550620001756200032c60201b60201c565b50620006bd565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000806000604154905060005b6020811015620003235760018083161415620002b65760018160208110620002825762000281620004df565b5b015483604051602001620002989291906200053d565b604051602081830303815290604052805190602001209250620002fc565b8260218260208110620002ce57620002cd620004df565b5b0154604051602001620002e39291906200053d565b6040516020818303038152906040528051906020012092505b6002826200030b919062000647565b915080806200031a90620005ca565b91505062000255565b50819250505090565b604560008154809291906200034190620005ca565b91905055506043546042546040516020016200035f9291906200053d565b60405160208183030381529060405280519060200120604460006045548152602001908152602001600020819055507f61014378f82a0d809aefaf87a8ac9505b89c321808287a6e7810f29304c1fce3604354604254604051620003c592919062000690565b60405180910390a1565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200040182620003d4565b9050919050565b6200041381620003f4565b81146200041f57600080fd5b50565b600081519050620004338162000408565b92915050565b600060208284031215620004525762000451620003cf565b5b6000620004628482850162000422565b91505092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620004b1826200046b565b9150620004be836200046b565b925082821015620004d457620004d362000475565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b6000819050919050565b6200053762000531826200050e565b62000518565b82525050565b60006200054b828562000522565b6020820191506200055d828462000522565b6020820191508190509392505050565b60006200057a826200046b565b915062000587836200046b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620005bf57620005be62000475565b5b828201905092915050565b6000620005d7826200046b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200060d576200060c62000475565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600062000654826200046b565b915062000661836200046b565b92508262000674576200067362000618565b5b828204905092915050565b6200068a816200050e565b82525050565b6000604082019050620006a760008301856200067f565b620006b660208301846200067f565b9392505050565b612a3280620006cd6000396000f3fe6080604052600436106100fe5760003560e01c806355f6bc57116100955780638da5cb5b116100645780638da5cb5b14610306578063a5392cf614610331578063a71d64441461035a578063ed6be5c914610397578063f2fde38b146103c2576100fe565b806355f6bc571461025e5780635ec6a8df14610287578063715018a6146102b25780637d8f0469146102c9576100fe565b8063319cf735116100d1578063319cf735146101a05780633381fe90146101cb5780633ae05047146102085780633ed691ef14610233576100fe565b806301fd904414610103578063029f27931461012e5780630e21fbd7146101595780632dfdf0b514610175575b600080fd5b34801561010f57600080fd5b506101186103eb565b6040516101259190611447565b60405180910390f35b34801561013a57600080fd5b506101436103f1565b604051610150919061147b565b60405180910390f35b610173600480360381019061016e91906115ae565b6103f7565b005b34801561018157600080fd5b5061018a61055c565b604051610197919061147b565b60405180910390f35b3480156101ac57600080fd5b506101b5610562565b6040516101c29190611447565b60405180910390f35b3480156101d757600080fd5b506101f260048036038101906101ed9190611615565b610568565b6040516101ff9190611447565b60405180910390f35b34801561021457600080fd5b5061021d610580565b60405161022a9190611447565b60405180910390f35b34801561023f57600080fd5b50610248610652565b6040516102559190611447565b60405180910390f35b34801561026a57600080fd5b506102856004803603810190610280919061166e565b61066f565b005b34801561029357600080fd5b5061029c610711565b6040516102a991906116aa565b60405180910390f35b3480156102be57600080fd5b506102c7610737565b005b3480156102d557600080fd5b506102f060048036038101906102eb919061185e565b6107bf565b6040516102fd919061194b565b60405180910390f35b34801561031257600080fd5b5061031b6108df565b60405161032891906116aa565b60405180910390f35b34801561033d57600080fd5b5061035860048036038101906103539190611966565b610908565b005b34801561036657600080fd5b50610381600480360381019061037c9190611615565b610cc6565b60405161038e919061194b565b60405180910390f35b3480156103a357600080fd5b506103ac610ce6565b6040516103b99190611a70565b60405180910390f35b3480156103ce57600080fd5b506103e960048036038101906103e49190611a8b565b610ceb565b005b60425481565b60455481565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156104735782341461046e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046590611b3b565b60405180910390fd5b6104a1565b6104a03330858773ffffffffffffffffffffffffffffffffffffffff16610de3909392919063ffffffff16565b5b600063ffffffff168263ffffffff1614156104f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e890611bcd565b60405180910390fd5b7f0a37f8bae6de7e960aeedce45875d5a75681918316c4bd81f4691152910f8e328484848460415460405161052a959493929190611bed565b60405180910390a1610540848460008585610e6c565b610548610580565b604381905550610556610fd2565b50505050565b60415481565b60435481565b60446020528060005260406000206000915090505481565b6000806000604154905060005b602081101561064957600180831614156105e657600181602081106105b5576105b4611c40565b5b0154836040516020016105c9929190611c90565b604051602081830303815290604052805190602001209250610627565b82602182602081106105fb576105fa611c40565b5b015460405160200161060e929190611c90565b6040516020818303038152906040528051906020012092505b6002826106349190611d1a565b9150808061064190611d4b565b91505061058d565b50819250505090565b600060446000604554815260200190815260200160002054905090565b604660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f690611e06565b60405180910390fd5b8060428190555061070e610fd2565b50565b604660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61073f61106f565b73ffffffffffffffffffffffffffffffffffffffff1661075d6108df565b73ffffffffffffffffffffffffffffffffffffffff16146107b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107aa90611e72565b60405180910390fd5b6107bd6000611077565b565b600080878a8a89896040516020016107db959493929190611f31565b60405160208183030381529060405280519060200120905060008467ffffffffffffffff16905060005b60208110156108cb57600180831614156108635786818151811061082c5761082b611c40565b5b602002602001015183604051602001610846929190611c90565b6040516020818303038152906040528051906020012092506108a9565b8287828151811061087757610876611c40565b5b6020026020010151604051602001610890929190611c90565b6040516020818303038152906040528051906020012092505b6002826108b69190611d1a565b915080806108c390611d4b565b915050610805565b508382149250505098975050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60001515604760008667ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610979576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097090612002565b60405180910390fd5b600063ffffffff168763ffffffff16146109c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bf90612094565b60405180910390fd5b600063ffffffff168863ffffffff1614610a17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0e90612126565b60405180910390fd5b60446000848152602001908152602001600020548282604051602001610a3e929190611c90565b6040516020818303038152906040528051906020012014610a94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8b906121b8565b60405180910390fd5b610aa48a8a8a8a8a8a8a886107bf565b610ae3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ada90612224565b60405180910390fd5b6001604760008667ffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161415610c4f5760008673ffffffffffffffffffffffffffffffffffffffff168a600067ffffffffffffffff811115610b8357610b826116db565b5b6040519080825280601f01601f191660200182016040528015610bb55781602001600182028036833780820191505090505b50604051610bc391906122be565b60006040518083038185875af1925050503d8060008114610c00576040519150601f19603f3d011682016040523d82523d6000602084013e610c05565b606091505b5050905080610c49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4090612347565b60405180910390fd5b50610c7b565b610c7a868a8c73ffffffffffffffffffffffffffffffffffffffff1661113b9092919063ffffffff16565b5b7f8932892d010aea7e4fdefb3764910523c321e06bb52577dc2439501196bf725584898c8c8a604051610cb2959493929190612376565b60405180910390a150505050505050505050565b60476020528060005260406000206000915054906101000a900460ff1681565b600081565b610cf361106f565b73ffffffffffffffffffffffffffffffffffffffff16610d116108df565b73ffffffffffffffffffffffffffffffffffffffff1614610d67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5e90611e72565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610dd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dce9061243b565b60405180910390fd5b610de081611077565b50565b610e66846323b872dd60e01b858585604051602401610e049392919061245b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506111c1565b50505050565b60008386868585604051602001610e87959493929190611f31565b604051602081830303815290604052805190602001209050600160206002610eaf91906125c5565b610eb99190612610565b60415410610efc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef3906126b6565b60405180910390fd5b600160416000828254610f0f91906126d6565b925050819055506000604154905060005b6020811015610fb85760018083161415610f56578260018260208110610f4957610f48611c40565b5b0181905550505050610fcb565b60018160208110610f6a57610f69611c40565b5b015483604051602001610f7e929190611c90565b604051602081830303815290604052805190602001209250600282610fa39190611d1a565b91508080610fb090611d4b565b915050610f20565b506000610fc857610fc761272c565b5b50505b5050505050565b60456000815480929190610fe590611d4b565b9190505550604354604254604051602001611001929190611c90565b60405160208183030381529060405280519060200120604460006045548152602001908152602001600020819055507f61014378f82a0d809aefaf87a8ac9505b89c321808287a6e7810f29304c1fce360435460425460405161106592919061275b565b60405180910390a1565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6111bc8363a9059cbb60e01b848460405160240161115a929190612784565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506111c1565b505050565b6000611223826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166112889092919063ffffffff16565b9050600081511115611283578080602001905181019061124391906127d9565b611282576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127990612878565b60405180910390fd5b5b505050565b606061129784846000856112a0565b90509392505050565b6060824710156112e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112dc9061290a565b60405180910390fd5b6112ee856113b4565b61132d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132490612976565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161135691906122be565b60006040518083038185875af1925050503d8060008114611393576040519150601f19603f3d011682016040523d82523d6000602084013e611398565b606091505b50915091506113a88282866113c7565b92505050949350505050565b600080823b905060008111915050919050565b606083156113d757829050611427565b6000835111156113ea5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141e91906129da565b60405180910390fd5b9392505050565b6000819050919050565b6114418161142e565b82525050565b600060208201905061145c6000830184611438565b92915050565b6000819050919050565b61147581611462565b82525050565b6000602082019050611490600083018461146c565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114d5826114aa565b9050919050565b60006114e7826114ca565b9050919050565b6114f7816114dc565b811461150257600080fd5b50565b600081359050611514816114ee565b92915050565b61152381611462565b811461152e57600080fd5b50565b6000813590506115408161151a565b92915050565b600063ffffffff82169050919050565b61155f81611546565b811461156a57600080fd5b50565b60008135905061157c81611556565b92915050565b61158b816114ca565b811461159657600080fd5b50565b6000813590506115a881611582565b92915050565b600080600080608085870312156115c8576115c76114a0565b5b60006115d687828801611505565b94505060206115e787828801611531565b93505060406115f88782880161156d565b925050606061160987828801611599565b91505092959194509250565b60006020828403121561162b5761162a6114a0565b5b600061163984828501611531565b91505092915050565b61164b8161142e565b811461165657600080fd5b50565b60008135905061166881611642565b92915050565b600060208284031215611684576116836114a0565b5b600061169284828501611659565b91505092915050565b6116a4816114ca565b82525050565b60006020820190506116bf600083018461169b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611713826116ca565b810181811067ffffffffffffffff82111715611732576117316116db565b5b80604052505050565b6000611745611496565b9050611751828261170a565b919050565b600067ffffffffffffffff821115611771576117706116db565b5b602082029050602081019050919050565b600080fd5b600061179a61179584611756565b61173b565b905080838252602082019050602084028301858111156117bd576117bc611782565b5b835b818110156117e657806117d28882611659565b8452602084019350506020810190506117bf565b5050509392505050565b600082601f830112611805576118046116c5565b5b8135611815848260208601611787565b91505092915050565b600067ffffffffffffffff82169050919050565b61183b8161181e565b811461184657600080fd5b50565b60008135905061185881611832565b92915050565b600080600080600080600080610100898b03121561187f5761187e6114a0565b5b600061188d8b828c01611599565b985050602061189e8b828c01611531565b97505060406118af8b828c0161156d565b96505060606118c08b828c0161156d565b95505060806118d18b828c01611599565b94505060a089013567ffffffffffffffff8111156118f2576118f16114a5565b5b6118fe8b828c016117f0565b93505060c061190f8b828c01611849565b92505060e06119208b828c01611659565b9150509295985092959890939650565b60008115159050919050565b61194581611930565b82525050565b6000602082019050611960600083018461193c565b92915050565b6000806000806000806000806000806101408b8d03121561198a576119896114a0565b5b60006119988d828e01611599565b9a505060206119a98d828e01611531565b99505060406119ba8d828e0161156d565b98505060606119cb8d828e0161156d565b97505060806119dc8d828e01611599565b96505060a08b013567ffffffffffffffff8111156119fd576119fc6114a5565b5b611a098d828e016117f0565b95505060c0611a1a8d828e01611849565b94505060e0611a2b8d828e01611531565b935050610100611a3d8d828e01611659565b925050610120611a4f8d828e01611659565b9150509295989b9194979a5092959850565b611a6a81611546565b82525050565b6000602082019050611a856000830184611a61565b92915050565b600060208284031215611aa157611aa06114a0565b5b6000611aaf84828501611599565b91505092915050565b600082825260208201905092915050565b7f4272696467653a3a6465706f7369743a20414d4f554e545f444f45535f4e4f5460008201527f5f4d415443485f4d53475f56414c554500000000000000000000000000000000602082015250565b6000611b25603083611ab8565b9150611b3082611ac9565b604082019050919050565b60006020820190508181036000830152611b5481611b18565b9050919050565b7f4272696467653a3a6465706f7369743a2044455354494e4154494f4e5f43414e60008201527f545f42455f4d41494e4e45540000000000000000000000000000000000000000602082015250565b6000611bb7602c83611ab8565b9150611bc282611b5b565b604082019050919050565b60006020820190508181036000830152611be681611baa565b9050919050565b600060a082019050611c02600083018861169b565b611c0f602083018761146c565b611c1c6040830186611a61565b611c29606083018561169b565b611c366080830184611a61565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b611c8a611c858261142e565b611c6f565b82525050565b6000611c9c8285611c79565b602082019150611cac8284611c79565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d2582611462565b9150611d3083611462565b925082611d4057611d3f611cbc565b5b828204905092915050565b6000611d5682611462565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611d8957611d88611ceb565b5b600182019050919050565b7f4272696467653a3a757064617465526f6c6c757045786974526f6f743a204f4e60008201527f4c595f524f4c4c55500000000000000000000000000000000000000000000000602082015250565b6000611df0602983611ab8565b9150611dfb82611d94565b604082019050919050565b60006020820190508181036000830152611e1f81611de3565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611e5c602083611ab8565b9150611e6782611e26565b602082019050919050565b60006020820190508181036000830152611e8b81611e4f565b9050919050565b60008160e01b9050919050565b6000611eaa82611e92565b9050919050565b611ec2611ebd82611546565b611e9f565b82525050565b60008160601b9050919050565b6000611ee082611ec8565b9050919050565b6000611ef282611ed5565b9050919050565b611f0a611f05826114ca565b611ee7565b82525050565b6000819050919050565b611f2b611f2682611462565b611f10565b82525050565b6000611f3d8288611eb1565b600482019150611f4d8287611ef9565b601482019150611f5d8286611f1a565b602082019150611f6d8285611eb1565b600482019150611f7d8284611ef9565b6014820191508190509695505050505050565b7f4272696467653a3a77697468647261773a20414c52454144595f434c41494d4560008201527f445f574954484452415700000000000000000000000000000000000000000000602082015250565b6000611fec602a83611ab8565b9150611ff782611f90565b604082019050919050565b6000602082019050818103600083015261201b81611fdf565b9050919050565b7f4272696467653a3a77697468647261773a2044455354494e4154494f4e5f4e4560008201527f54574f524b5f4e4f545f4d41494e4e4554000000000000000000000000000000602082015250565b600061207e603183611ab8565b915061208982612022565b604082019050919050565b600060208201905081810360008301526120ad81612071565b9050919050565b7f4272696467653a3a77697468647261773a204f524947494e5f4e4554574f524b60008201527f5f4e4f545f4d41494e4e45540000000000000000000000000000000000000000602082015250565b6000612110602c83611ab8565b915061211b826120b4565b604082019050919050565b6000602082019050818103600083015261213f81612103565b9050919050565b7f4272696467653a3a77697468647261773a20474c4f42414c5f455849545f524f60008201527f4f545f444f45535f4e4f545f4d41544348000000000000000000000000000000602082015250565b60006121a2603183611ab8565b91506121ad82612146565b604082019050919050565b600060208201905081810360008301526121d181612195565b9050919050565b7f4272696467653a3a77697468647261773a20534d545f494e56414c4944000000600082015250565b600061220e601d83611ab8565b9150612219826121d8565b602082019050919050565b6000602082019050818103600083015261223d81612201565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561227857808201518184015260208101905061225d565b83811115612287576000848401525b50505050565b600061229882612244565b6122a2818561224f565b93506122b281856020860161225a565b80840191505092915050565b60006122ca828461228d565b915081905092915050565b7f4272696467653a3a77697468647261773a204554485f5452414e534645525f4660008201527f41494c4544000000000000000000000000000000000000000000000000000000602082015250565b6000612331602583611ab8565b915061233c826122d5565b604082019050919050565b6000602082019050818103600083015261236081612324565b9050919050565b6123708161181e565b82525050565b600060a08201905061238b6000830188612367565b6123986020830187611a61565b6123a5604083018661169b565b6123b2606083018561146c565b6123bf608083018461169b565b9695505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612425602683611ab8565b9150612430826123c9565b604082019050919050565b6000602082019050818103600083015261245481612418565b9050919050565b6000606082019050612470600083018661169b565b61247d602083018561169b565b61248a604083018461146c565b949350505050565b60008160011c9050919050565b6000808291508390505b60018511156124e9578086048111156124c5576124c4611ceb565b5b60018516156124d45780820291505b80810290506124e285612492565b94506124a9565b94509492505050565b60008261250257600190506125be565b8161251057600090506125be565b816001811461252657600281146125305761255f565b60019150506125be565b60ff84111561254257612541611ceb565b5b8360020a91508482111561255957612558611ceb565b5b506125be565b5060208310610133831016604e8410600b84101617156125945782820a90508381111561258f5761258e611ceb565b5b6125be565b6125a1848484600161249f565b925090508184048111156125b8576125b7611ceb565b5b81810290505b9392505050565b60006125d082611462565b91506125db83611462565b92506126087fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846124f2565b905092915050565b600061261b82611462565b915061262683611462565b92508282101561263957612638611ceb565b5b828203905092915050565b7f4465706f736974436f6e74726163743a5f6465706f7369743a204d45524b4c4560008201527f5f545245455f46554c4c00000000000000000000000000000000000000000000602082015250565b60006126a0602a83611ab8565b91506126ab82612644565b604082019050919050565b600060208201905081810360008301526126cf81612693565b9050919050565b60006126e182611462565b91506126ec83611462565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561272157612720611ceb565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60006040820190506127706000830185611438565b61277d6020830184611438565b9392505050565b6000604082019050612799600083018561169b565b6127a6602083018461146c565b9392505050565b6127b681611930565b81146127c157600080fd5b50565b6000815190506127d3816127ad565b92915050565b6000602082840312156127ef576127ee6114a0565b5b60006127fd848285016127c4565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612862602a83611ab8565b915061286d82612806565b604082019050919050565b6000602082019050818103600083015261289181612855565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006128f4602683611ab8565b91506128ff82612898565b604082019050919050565b60006020820190508181036000830152612923816128e7565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612960601d83611ab8565b915061296b8261292a565b602082019050919050565b6000602082019050818103600083015261298f81612953565b9050919050565b600081519050919050565b60006129ac82612996565b6129b68185611ab8565b93506129c681856020860161225a565b6129cf816116ca565b840191505092915050565b600060208201905081810360008301526129f481846129a1565b90509291505056fea264697066735822122019f0593b5fc55fe73a4b5fd154a972c120167058e1db0b052f11f548de5feb4c64736f6c63430008090033",
}

// BridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeMetaData.ABI instead.
var BridgeABI = BridgeMetaData.ABI

// BridgeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeMetaData.Bin instead.
var BridgeBin = BridgeMetaData.Bin

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend, _rollupAddress common.Address) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := BridgeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeBin), backend, _rollupAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// MAINNETNETWORKID is a free data retrieval call binding the contract method 0xed6be5c9.
//
// Solidity: function MAINNET_NETWORK_ID() view returns(uint32)
func (_Bridge *BridgeCaller) MAINNETNETWORKID(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "MAINNET_NETWORK_ID")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// MAINNETNETWORKID is a free data retrieval call binding the contract method 0xed6be5c9.
//
// Solidity: function MAINNET_NETWORK_ID() view returns(uint32)
func (_Bridge *BridgeSession) MAINNETNETWORKID() (uint32, error) {
	return _Bridge.Contract.MAINNETNETWORKID(&_Bridge.CallOpts)
}

// MAINNETNETWORKID is a free data retrieval call binding the contract method 0xed6be5c9.
//
// Solidity: function MAINNET_NETWORK_ID() view returns(uint32)
func (_Bridge *BridgeCallerSession) MAINNETNETWORKID() (uint32, error) {
	return _Bridge.Contract.MAINNETNETWORKID(&_Bridge.CallOpts)
}

// DepositCount is a free data retrieval call binding the contract method 0x2dfdf0b5.
//
// Solidity: function depositCount() view returns(uint256)
func (_Bridge *BridgeCaller) DepositCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "depositCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DepositCount is a free data retrieval call binding the contract method 0x2dfdf0b5.
//
// Solidity: function depositCount() view returns(uint256)
func (_Bridge *BridgeSession) DepositCount() (*big.Int, error) {
	return _Bridge.Contract.DepositCount(&_Bridge.CallOpts)
}

// DepositCount is a free data retrieval call binding the contract method 0x2dfdf0b5.
//
// Solidity: function depositCount() view returns(uint256)
func (_Bridge *BridgeCallerSession) DepositCount() (*big.Int, error) {
	return _Bridge.Contract.DepositCount(&_Bridge.CallOpts)
}

// GetDepositRoot is a free data retrieval call binding the contract method 0x3ae05047.
//
// Solidity: function getDepositRoot() view returns(bytes32)
func (_Bridge *BridgeCaller) GetDepositRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getDepositRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetDepositRoot is a free data retrieval call binding the contract method 0x3ae05047.
//
// Solidity: function getDepositRoot() view returns(bytes32)
func (_Bridge *BridgeSession) GetDepositRoot() ([32]byte, error) {
	return _Bridge.Contract.GetDepositRoot(&_Bridge.CallOpts)
}

// GetDepositRoot is a free data retrieval call binding the contract method 0x3ae05047.
//
// Solidity: function getDepositRoot() view returns(bytes32)
func (_Bridge *BridgeCallerSession) GetDepositRoot() ([32]byte, error) {
	return _Bridge.Contract.GetDepositRoot(&_Bridge.CallOpts)
}

// GetLastGlobalExitRoot is a free data retrieval call binding the contract method 0x3ed691ef.
//
// Solidity: function getLastGlobalExitRoot() view returns(bytes32)
func (_Bridge *BridgeCaller) GetLastGlobalExitRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getLastGlobalExitRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetLastGlobalExitRoot is a free data retrieval call binding the contract method 0x3ed691ef.
//
// Solidity: function getLastGlobalExitRoot() view returns(bytes32)
func (_Bridge *BridgeSession) GetLastGlobalExitRoot() ([32]byte, error) {
	return _Bridge.Contract.GetLastGlobalExitRoot(&_Bridge.CallOpts)
}

// GetLastGlobalExitRoot is a free data retrieval call binding the contract method 0x3ed691ef.
//
// Solidity: function getLastGlobalExitRoot() view returns(bytes32)
func (_Bridge *BridgeCallerSession) GetLastGlobalExitRoot() ([32]byte, error) {
	return _Bridge.Contract.GetLastGlobalExitRoot(&_Bridge.CallOpts)
}

// GlobalExitRootMap is a free data retrieval call binding the contract method 0x3381fe90.
//
// Solidity: function globalExitRootMap(uint256 ) view returns(bytes32)
func (_Bridge *BridgeCaller) GlobalExitRootMap(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "globalExitRootMap", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GlobalExitRootMap is a free data retrieval call binding the contract method 0x3381fe90.
//
// Solidity: function globalExitRootMap(uint256 ) view returns(bytes32)
func (_Bridge *BridgeSession) GlobalExitRootMap(arg0 *big.Int) ([32]byte, error) {
	return _Bridge.Contract.GlobalExitRootMap(&_Bridge.CallOpts, arg0)
}

// GlobalExitRootMap is a free data retrieval call binding the contract method 0x3381fe90.
//
// Solidity: function globalExitRootMap(uint256 ) view returns(bytes32)
func (_Bridge *BridgeCallerSession) GlobalExitRootMap(arg0 *big.Int) ([32]byte, error) {
	return _Bridge.Contract.GlobalExitRootMap(&_Bridge.CallOpts, arg0)
}

// LastGlobalExitRootNum is a free data retrieval call binding the contract method 0x029f2793.
//
// Solidity: function lastGlobalExitRootNum() view returns(uint256)
func (_Bridge *BridgeCaller) LastGlobalExitRootNum(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "lastGlobalExitRootNum")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastGlobalExitRootNum is a free data retrieval call binding the contract method 0x029f2793.
//
// Solidity: function lastGlobalExitRootNum() view returns(uint256)
func (_Bridge *BridgeSession) LastGlobalExitRootNum() (*big.Int, error) {
	return _Bridge.Contract.LastGlobalExitRootNum(&_Bridge.CallOpts)
}

// LastGlobalExitRootNum is a free data retrieval call binding the contract method 0x029f2793.
//
// Solidity: function lastGlobalExitRootNum() view returns(uint256)
func (_Bridge *BridgeCallerSession) LastGlobalExitRootNum() (*big.Int, error) {
	return _Bridge.Contract.LastGlobalExitRootNum(&_Bridge.CallOpts)
}

// LastMainnetExitRoot is a free data retrieval call binding the contract method 0x319cf735.
//
// Solidity: function lastMainnetExitRoot() view returns(bytes32)
func (_Bridge *BridgeCaller) LastMainnetExitRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "lastMainnetExitRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LastMainnetExitRoot is a free data retrieval call binding the contract method 0x319cf735.
//
// Solidity: function lastMainnetExitRoot() view returns(bytes32)
func (_Bridge *BridgeSession) LastMainnetExitRoot() ([32]byte, error) {
	return _Bridge.Contract.LastMainnetExitRoot(&_Bridge.CallOpts)
}

// LastMainnetExitRoot is a free data retrieval call binding the contract method 0x319cf735.
//
// Solidity: function lastMainnetExitRoot() view returns(bytes32)
func (_Bridge *BridgeCallerSession) LastMainnetExitRoot() ([32]byte, error) {
	return _Bridge.Contract.LastMainnetExitRoot(&_Bridge.CallOpts)
}

// LastRollupExitRoot is a free data retrieval call binding the contract method 0x01fd9044.
//
// Solidity: function lastRollupExitRoot() view returns(bytes32)
func (_Bridge *BridgeCaller) LastRollupExitRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "lastRollupExitRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LastRollupExitRoot is a free data retrieval call binding the contract method 0x01fd9044.
//
// Solidity: function lastRollupExitRoot() view returns(bytes32)
func (_Bridge *BridgeSession) LastRollupExitRoot() ([32]byte, error) {
	return _Bridge.Contract.LastRollupExitRoot(&_Bridge.CallOpts)
}

// LastRollupExitRoot is a free data retrieval call binding the contract method 0x01fd9044.
//
// Solidity: function lastRollupExitRoot() view returns(bytes32)
func (_Bridge *BridgeCallerSession) LastRollupExitRoot() ([32]byte, error) {
	return _Bridge.Contract.LastRollupExitRoot(&_Bridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeSession) Owner() (common.Address, error) {
	return _Bridge.Contract.Owner(&_Bridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeCallerSession) Owner() (common.Address, error) {
	return _Bridge.Contract.Owner(&_Bridge.CallOpts)
}

// RollupAddress is a free data retrieval call binding the contract method 0x5ec6a8df.
//
// Solidity: function rollupAddress() view returns(address)
func (_Bridge *BridgeCaller) RollupAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "rollupAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupAddress is a free data retrieval call binding the contract method 0x5ec6a8df.
//
// Solidity: function rollupAddress() view returns(address)
func (_Bridge *BridgeSession) RollupAddress() (common.Address, error) {
	return _Bridge.Contract.RollupAddress(&_Bridge.CallOpts)
}

// RollupAddress is a free data retrieval call binding the contract method 0x5ec6a8df.
//
// Solidity: function rollupAddress() view returns(address)
func (_Bridge *BridgeCallerSession) RollupAddress() (common.Address, error) {
	return _Bridge.Contract.RollupAddress(&_Bridge.CallOpts)
}

// VerifyMerkleProof is a free data retrieval call binding the contract method 0x7d8f0469.
//
// Solidity: function verifyMerkleProof(address token, uint256 amount, uint32 originalNetwork, uint32 destinationNetwork, address destinationAddress, bytes32[] smtProof, uint64 index, bytes32 root) pure returns(bool)
func (_Bridge *BridgeCaller) VerifyMerkleProof(opts *bind.CallOpts, token common.Address, amount *big.Int, originalNetwork uint32, destinationNetwork uint32, destinationAddress common.Address, smtProof [][32]byte, index uint64, root [32]byte) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "verifyMerkleProof", token, amount, originalNetwork, destinationNetwork, destinationAddress, smtProof, index, root)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyMerkleProof is a free data retrieval call binding the contract method 0x7d8f0469.
//
// Solidity: function verifyMerkleProof(address token, uint256 amount, uint32 originalNetwork, uint32 destinationNetwork, address destinationAddress, bytes32[] smtProof, uint64 index, bytes32 root) pure returns(bool)
func (_Bridge *BridgeSession) VerifyMerkleProof(token common.Address, amount *big.Int, originalNetwork uint32, destinationNetwork uint32, destinationAddress common.Address, smtProof [][32]byte, index uint64, root [32]byte) (bool, error) {
	return _Bridge.Contract.VerifyMerkleProof(&_Bridge.CallOpts, token, amount, originalNetwork, destinationNetwork, destinationAddress, smtProof, index, root)
}

// VerifyMerkleProof is a free data retrieval call binding the contract method 0x7d8f0469.
//
// Solidity: function verifyMerkleProof(address token, uint256 amount, uint32 originalNetwork, uint32 destinationNetwork, address destinationAddress, bytes32[] smtProof, uint64 index, bytes32 root) pure returns(bool)
func (_Bridge *BridgeCallerSession) VerifyMerkleProof(token common.Address, amount *big.Int, originalNetwork uint32, destinationNetwork uint32, destinationAddress common.Address, smtProof [][32]byte, index uint64, root [32]byte) (bool, error) {
	return _Bridge.Contract.VerifyMerkleProof(&_Bridge.CallOpts, token, amount, originalNetwork, destinationNetwork, destinationAddress, smtProof, index, root)
}

// WithdrawNullifier is a free data retrieval call binding the contract method 0xa71d6444.
//
// Solidity: function withdrawNullifier(uint256 ) view returns(bool)
func (_Bridge *BridgeCaller) WithdrawNullifier(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "withdrawNullifier", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// WithdrawNullifier is a free data retrieval call binding the contract method 0xa71d6444.
//
// Solidity: function withdrawNullifier(uint256 ) view returns(bool)
func (_Bridge *BridgeSession) WithdrawNullifier(arg0 *big.Int) (bool, error) {
	return _Bridge.Contract.WithdrawNullifier(&_Bridge.CallOpts, arg0)
}

// WithdrawNullifier is a free data retrieval call binding the contract method 0xa71d6444.
//
// Solidity: function withdrawNullifier(uint256 ) view returns(bool)
func (_Bridge *BridgeCallerSession) WithdrawNullifier(arg0 *big.Int) (bool, error) {
	return _Bridge.Contract.WithdrawNullifier(&_Bridge.CallOpts, arg0)
}

// Bridge is a paid mutator transaction binding the contract method 0x0e21fbd7.
//
// Solidity: function bridge(address token, uint256 amount, uint32 destinationNetwork, address destinationAddress) payable returns()
func (_Bridge *BridgeTransactor) Bridge(opts *bind.TransactOpts, token common.Address, amount *big.Int, destinationNetwork uint32, destinationAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "bridge", token, amount, destinationNetwork, destinationAddress)
}

// Bridge is a paid mutator transaction binding the contract method 0x0e21fbd7.
//
// Solidity: function bridge(address token, uint256 amount, uint32 destinationNetwork, address destinationAddress) payable returns()
func (_Bridge *BridgeSession) Bridge(token common.Address, amount *big.Int, destinationNetwork uint32, destinationAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.Bridge(&_Bridge.TransactOpts, token, amount, destinationNetwork, destinationAddress)
}

// Bridge is a paid mutator transaction binding the contract method 0x0e21fbd7.
//
// Solidity: function bridge(address token, uint256 amount, uint32 destinationNetwork, address destinationAddress) payable returns()
func (_Bridge *BridgeTransactorSession) Bridge(token common.Address, amount *big.Int, destinationNetwork uint32, destinationAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.Bridge(&_Bridge.TransactOpts, token, amount, destinationNetwork, destinationAddress)
}

// Claim is a paid mutator transaction binding the contract method 0xa5392cf6.
//
// Solidity: function claim(address token, uint256 amount, uint32 originalNetwork, uint32 destinationNetwork, address destinationAddress, bytes32[] smtProof, uint64 index, uint256 globalExitRootNum, bytes32 mainnetExitRoot, bytes32 rollupExitRoot) returns()
func (_Bridge *BridgeTransactor) Claim(opts *bind.TransactOpts, token common.Address, amount *big.Int, originalNetwork uint32, destinationNetwork uint32, destinationAddress common.Address, smtProof [][32]byte, index uint64, globalExitRootNum *big.Int, mainnetExitRoot [32]byte, rollupExitRoot [32]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "claim", token, amount, originalNetwork, destinationNetwork, destinationAddress, smtProof, index, globalExitRootNum, mainnetExitRoot, rollupExitRoot)
}

// Claim is a paid mutator transaction binding the contract method 0xa5392cf6.
//
// Solidity: function claim(address token, uint256 amount, uint32 originalNetwork, uint32 destinationNetwork, address destinationAddress, bytes32[] smtProof, uint64 index, uint256 globalExitRootNum, bytes32 mainnetExitRoot, bytes32 rollupExitRoot) returns()
func (_Bridge *BridgeSession) Claim(token common.Address, amount *big.Int, originalNetwork uint32, destinationNetwork uint32, destinationAddress common.Address, smtProof [][32]byte, index uint64, globalExitRootNum *big.Int, mainnetExitRoot [32]byte, rollupExitRoot [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.Claim(&_Bridge.TransactOpts, token, amount, originalNetwork, destinationNetwork, destinationAddress, smtProof, index, globalExitRootNum, mainnetExitRoot, rollupExitRoot)
}

// Claim is a paid mutator transaction binding the contract method 0xa5392cf6.
//
// Solidity: function claim(address token, uint256 amount, uint32 originalNetwork, uint32 destinationNetwork, address destinationAddress, bytes32[] smtProof, uint64 index, uint256 globalExitRootNum, bytes32 mainnetExitRoot, bytes32 rollupExitRoot) returns()
func (_Bridge *BridgeTransactorSession) Claim(token common.Address, amount *big.Int, originalNetwork uint32, destinationNetwork uint32, destinationAddress common.Address, smtProof [][32]byte, index uint64, globalExitRootNum *big.Int, mainnetExitRoot [32]byte, rollupExitRoot [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.Claim(&_Bridge.TransactOpts, token, amount, originalNetwork, destinationNetwork, destinationAddress, smtProof, index, globalExitRootNum, mainnetExitRoot, rollupExitRoot)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bridge.Contract.RenounceOwnership(&_Bridge.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bridge.Contract.RenounceOwnership(&_Bridge.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOwnership(&_Bridge.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOwnership(&_Bridge.TransactOpts, newOwner)
}

// UpdateRollupExitRoot is a paid mutator transaction binding the contract method 0x55f6bc57.
//
// Solidity: function updateRollupExitRoot(bytes32 newRollupExitRoot) returns()
func (_Bridge *BridgeTransactor) UpdateRollupExitRoot(opts *bind.TransactOpts, newRollupExitRoot [32]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "updateRollupExitRoot", newRollupExitRoot)
}

// UpdateRollupExitRoot is a paid mutator transaction binding the contract method 0x55f6bc57.
//
// Solidity: function updateRollupExitRoot(bytes32 newRollupExitRoot) returns()
func (_Bridge *BridgeSession) UpdateRollupExitRoot(newRollupExitRoot [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.UpdateRollupExitRoot(&_Bridge.TransactOpts, newRollupExitRoot)
}

// UpdateRollupExitRoot is a paid mutator transaction binding the contract method 0x55f6bc57.
//
// Solidity: function updateRollupExitRoot(bytes32 newRollupExitRoot) returns()
func (_Bridge *BridgeTransactorSession) UpdateRollupExitRoot(newRollupExitRoot [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.UpdateRollupExitRoot(&_Bridge.TransactOpts, newRollupExitRoot)
}

// BridgeDepositEventIterator is returned from FilterDepositEvent and is used to iterate over the raw logs and unpacked data for DepositEvent events raised by the Bridge contract.
type BridgeDepositEventIterator struct {
	Event *BridgeDepositEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDepositEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDepositEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDepositEvent represents a DepositEvent event raised by the Bridge contract.
type BridgeDepositEvent struct {
	TokenAddres        common.Address
	Amount             *big.Int
	DestinationNetwork uint32
	DestinationAddress common.Address
	DepositCount       uint32
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDepositEvent is a free log retrieval operation binding the contract event 0x0a37f8bae6de7e960aeedce45875d5a75681918316c4bd81f4691152910f8e32.
//
// Solidity: event DepositEvent(address tokenAddres, uint256 amount, uint32 destinationNetwork, address destinationAddress, uint32 depositCount)
func (_Bridge *BridgeFilterer) FilterDepositEvent(opts *bind.FilterOpts) (*BridgeDepositEventIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "DepositEvent")
	if err != nil {
		return nil, err
	}
	return &BridgeDepositEventIterator{contract: _Bridge.contract, event: "DepositEvent", logs: logs, sub: sub}, nil
}

// WatchDepositEvent is a free log subscription operation binding the contract event 0x0a37f8bae6de7e960aeedce45875d5a75681918316c4bd81f4691152910f8e32.
//
// Solidity: event DepositEvent(address tokenAddres, uint256 amount, uint32 destinationNetwork, address destinationAddress, uint32 depositCount)
func (_Bridge *BridgeFilterer) WatchDepositEvent(opts *bind.WatchOpts, sink chan<- *BridgeDepositEvent) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "DepositEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDepositEvent)
				if err := _Bridge.contract.UnpackLog(event, "DepositEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositEvent is a log parse operation binding the contract event 0x0a37f8bae6de7e960aeedce45875d5a75681918316c4bd81f4691152910f8e32.
//
// Solidity: event DepositEvent(address tokenAddres, uint256 amount, uint32 destinationNetwork, address destinationAddress, uint32 depositCount)
func (_Bridge *BridgeFilterer) ParseDepositEvent(log types.Log) (*BridgeDepositEvent, error) {
	event := new(BridgeDepositEvent)
	if err := _Bridge.contract.UnpackLog(event, "DepositEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Bridge contract.
type BridgeOwnershipTransferredIterator struct {
	Event *BridgeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeOwnershipTransferred represents a OwnershipTransferred event raised by the Bridge contract.
type BridgeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BridgeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeOwnershipTransferredIterator{contract: _Bridge.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BridgeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeOwnershipTransferred)
				if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) ParseOwnershipTransferred(log types.Log) (*BridgeOwnershipTransferred, error) {
	event := new(BridgeOwnershipTransferred)
	if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeUpdateGlobalExitRootIterator is returned from FilterUpdateGlobalExitRoot and is used to iterate over the raw logs and unpacked data for UpdateGlobalExitRoot events raised by the Bridge contract.
type BridgeUpdateGlobalExitRootIterator struct {
	Event *BridgeUpdateGlobalExitRoot // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeUpdateGlobalExitRootIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeUpdateGlobalExitRoot)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeUpdateGlobalExitRoot)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeUpdateGlobalExitRootIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeUpdateGlobalExitRootIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeUpdateGlobalExitRoot represents a UpdateGlobalExitRoot event raised by the Bridge contract.
type BridgeUpdateGlobalExitRoot struct {
	MainnetExitRoot [32]byte
	RollupExitRoot  [32]byte
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterUpdateGlobalExitRoot is a free log retrieval operation binding the contract event 0x61014378f82a0d809aefaf87a8ac9505b89c321808287a6e7810f29304c1fce3.
//
// Solidity: event UpdateGlobalExitRoot(bytes32 mainnetExitRoot, bytes32 rollupExitRoot)
func (_Bridge *BridgeFilterer) FilterUpdateGlobalExitRoot(opts *bind.FilterOpts) (*BridgeUpdateGlobalExitRootIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "UpdateGlobalExitRoot")
	if err != nil {
		return nil, err
	}
	return &BridgeUpdateGlobalExitRootIterator{contract: _Bridge.contract, event: "UpdateGlobalExitRoot", logs: logs, sub: sub}, nil
}

// WatchUpdateGlobalExitRoot is a free log subscription operation binding the contract event 0x61014378f82a0d809aefaf87a8ac9505b89c321808287a6e7810f29304c1fce3.
//
// Solidity: event UpdateGlobalExitRoot(bytes32 mainnetExitRoot, bytes32 rollupExitRoot)
func (_Bridge *BridgeFilterer) WatchUpdateGlobalExitRoot(opts *bind.WatchOpts, sink chan<- *BridgeUpdateGlobalExitRoot) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "UpdateGlobalExitRoot")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeUpdateGlobalExitRoot)
				if err := _Bridge.contract.UnpackLog(event, "UpdateGlobalExitRoot", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateGlobalExitRoot is a log parse operation binding the contract event 0x61014378f82a0d809aefaf87a8ac9505b89c321808287a6e7810f29304c1fce3.
//
// Solidity: event UpdateGlobalExitRoot(bytes32 mainnetExitRoot, bytes32 rollupExitRoot)
func (_Bridge *BridgeFilterer) ParseUpdateGlobalExitRoot(log types.Log) (*BridgeUpdateGlobalExitRoot, error) {
	event := new(BridgeUpdateGlobalExitRoot)
	if err := _Bridge.contract.UnpackLog(event, "UpdateGlobalExitRoot", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeWithdrawEventIterator is returned from FilterWithdrawEvent and is used to iterate over the raw logs and unpacked data for WithdrawEvent events raised by the Bridge contract.
type BridgeWithdrawEventIterator struct {
	Event *BridgeWithdrawEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeWithdrawEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeWithdrawEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeWithdrawEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeWithdrawEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeWithdrawEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeWithdrawEvent represents a WithdrawEvent event raised by the Bridge contract.
type BridgeWithdrawEvent struct {
	Index              uint64
	OriginalNetwork    uint32
	Token              common.Address
	Amount             *big.Int
	DestinationAddress common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterWithdrawEvent is a free log retrieval operation binding the contract event 0x8932892d010aea7e4fdefb3764910523c321e06bb52577dc2439501196bf7255.
//
// Solidity: event WithdrawEvent(uint64 index, uint32 originalNetwork, address token, uint256 amount, address destinationAddress)
func (_Bridge *BridgeFilterer) FilterWithdrawEvent(opts *bind.FilterOpts) (*BridgeWithdrawEventIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "WithdrawEvent")
	if err != nil {
		return nil, err
	}
	return &BridgeWithdrawEventIterator{contract: _Bridge.contract, event: "WithdrawEvent", logs: logs, sub: sub}, nil
}

// WatchWithdrawEvent is a free log subscription operation binding the contract event 0x8932892d010aea7e4fdefb3764910523c321e06bb52577dc2439501196bf7255.
//
// Solidity: event WithdrawEvent(uint64 index, uint32 originalNetwork, address token, uint256 amount, address destinationAddress)
func (_Bridge *BridgeFilterer) WatchWithdrawEvent(opts *bind.WatchOpts, sink chan<- *BridgeWithdrawEvent) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "WithdrawEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeWithdrawEvent)
				if err := _Bridge.contract.UnpackLog(event, "WithdrawEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawEvent is a log parse operation binding the contract event 0x8932892d010aea7e4fdefb3764910523c321e06bb52577dc2439501196bf7255.
//
// Solidity: event WithdrawEvent(uint64 index, uint32 originalNetwork, address token, uint256 amount, address destinationAddress)
func (_Bridge *BridgeFilterer) ParseWithdrawEvent(log types.Log) (*BridgeWithdrawEvent, error) {
	event := new(BridgeWithdrawEvent)
	if err := _Bridge.contract.UnpackLog(event, "WithdrawEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
