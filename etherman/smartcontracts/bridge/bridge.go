// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bridge

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeMetaData contains all meta data concerning the Bridge contract.
var BridgeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_networkID\",\"type\":\"uint32\"},{\"internalType\":\"contractIGlobalExitRootManager\",\"name\":\"_globalExitRootManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddres\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"originNetwork\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destinationNetwork\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"depositCount\",\"type\":\"uint32\"}],\"name\":\"BridgeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"originalNetwork\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"}],\"name\":\"ClaimEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"originalNetwork\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wrappedTokenAddress\",\"type\":\"address\"}],\"name\":\"NewWrappedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAINNET_NETWORK_ID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToTokenInfo\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"originalNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"destinationNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"}],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"originalNetwork\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"smtProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"globalExitRootNum\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"mainnetExitRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rollupExitRoot\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimNullifier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"originalNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenWrappedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalExitRootManager\",\"outputs\":[{\"internalType\":\"contractIGlobalExitRootManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"originalNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"}],\"name\":\"precalculatedWrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenInfoToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"originalNetwork\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"smtProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"verifyMerkleProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b5060405162005c0e38038062005c0e833981810160405281019062000037919062000370565b620000576200004b620001d760201b60201c565b620001df60201b60201c565b60005b600160206200006a9190620003f0565b8110156200010d57602181602081106200008957620000886200042b565b5b015460218260208110620000a257620000a16200042b565b5b0154604051602001620000b792919062000489565b604051602081830303815290604052805190602001206021600183620000de9190620004b9565b60208110620000f257620000f16200042b565b5b01819055508080620001049062000516565b9150506200005a565b5081604260006101000a81548163ffffffff021916908363ffffffff16021790555080604660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040516200017e90620002a3565b604051809103906000f0801580156200019b573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050505062000564565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6123a4806200386a83390190565b600080fd5b600063ffffffff82169050919050565b620002d181620002b6565b8114620002dd57600080fd5b50565b600081519050620002f181620002c6565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200032482620002f7565b9050919050565b6000620003388262000317565b9050919050565b6200034a816200032b565b81146200035657600080fd5b50565b6000815190506200036a816200033f565b92915050565b600080604083850312156200038a5762000389620002b1565b5b60006200039a85828601620002e0565b9250506020620003ad8582860162000359565b9150509250929050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620003fd82620003b7565b91506200040a83620003b7565b92508282101562000420576200041f620003c1565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b6000819050919050565b620004836200047d826200045a565b62000464565b82525050565b60006200049782856200046e565b602082019150620004a982846200046e565b6020820191508190509392505050565b6000620004c682620003b7565b9150620004d383620003b7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200050b576200050a620003c1565b5b828201905092915050565b60006200052382620003b7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620005595762000558620003c1565b5b600182019050919050565b6080516132dc6200058e60003960008181610c8101528181610fd8015261132401526132dc6000f3fe6080604052600436106100fe5760003560e01c8063715018a611610095578063bab161bf11610064578063bab161bf1461033d578063d02103ca14610368578063e737588114610393578063ed6be5c9146103d0578063f2fde38b146103fb576100fe565b8063715018a6146102815780637d8f0469146102985780638da5cb5b146102d5578063b7e6a7d414610300576100fe565b80632dfdf0b5116100d15780632dfdf0b5146101c25780632f3a3d5d146101ed5780633ae0504714610218578063452a94b014610243576100fe565b80630db4afff146101035780630e21fbd714610140578063122650ff1461015c57806322e95f2c14610185575b600080fd5b34801561010f57600080fd5b5061012a60048036038101906101259190611c0f565b610424565b6040516101379190611c7d565b60405180910390f35b61015a60048036038101906101559190611d36565b610457565b005b34801561016857600080fd5b50610183600480360381019061017e9190611ef6565b610812565b005b34801561019157600080fd5b506101ac60048036038101906101a79190611ff1565b610f6a565b6040516101b99190611c7d565b60405180910390f35b3480156101ce57600080fd5b506101d7610fd0565b6040516101e49190612040565b60405180910390f35b3480156101f957600080fd5b50610202610fd6565b60405161020f9190611c7d565b60405180910390f35b34801561022457600080fd5b5061022d610ffa565b60405161023a919061206a565b60405180910390f35b34801561024f57600080fd5b5061026a60048036038101906102659190612085565b6110cc565b6040516102789291906120c1565b60405180910390f35b34801561028d57600080fd5b50610296611120565b005b3480156102a457600080fd5b506102bf60048036038101906102ba919061212a565b6111a8565b6040516102cc9190612217565b60405180910390f35b3480156102e157600080fd5b506102ea6112c8565b6040516102f79190611c7d565b60405180910390f35b34801561030c57600080fd5b5061032760048036038101906103229190611ff1565b6112f1565b6040516103349190611c7d565b60405180910390f35b34801561034957600080fd5b50610352611352565b60405161035f9190612232565b60405180910390f35b34801561037457600080fd5b5061037d611368565b60405161038a91906122ac565b60405180910390f35b34801561039f57600080fd5b506103ba60048036038101906103b591906122c7565b61138e565b6040516103c79190612217565b60405180910390f35b3480156103dc57600080fd5b506103e56113ae565b6040516103f29190612232565b60405180910390f35b34801561040757600080fd5b50610422600480360381019061041d9190612085565b6113b3565b005b60446020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b604260009054906101000a900463ffffffff1663ffffffff168263ffffffff1614156104b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104af90612377565b60405180910390fd5b600080600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141561053b57843414610532576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052990612409565b60405180910390fd5b60009050610726565b6000604560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16146106de578673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33886040518363ffffffff1660e01b8152600401610678929190612429565b602060405180830381600087803b15801561069257600080fd5b505af11580156106a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ca919061247e565b508060200151925080600001519150610724565b61070b3330888a73ffffffffffffffffffffffffffffffffffffffff166114ab909392919063ffffffff16565b869250604260009054906101000a900463ffffffff1691505b505b7fb9cc79b4411bd33ec9620f8fe3d6236a5d18050ca48e991864dc0556a83d1a2b8286838787604154604051610761969594939291906124ab565b60405180910390a16107768286838787611534565b604660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166333d6247d6107bc610ffa565b6040518263ffffffff1660e01b81526004016107d8919061206a565b600060405180830381600087803b1580156107f257600080fd5b505af1158015610806573d6000803e3d6000fd5b50505050505050505050565b60001515604360008663ffffffff16815260200190815260200160002060009054906101000a900460ff1615151461087f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087690612558565b60405180910390fd5b604260009054906101000a900463ffffffff1663ffffffff168763ffffffff16146108df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d6906125ea565b60405180910390fd5b604660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633381fe90846040518263ffffffff1660e01b815260040161093a9190612040565b602060405180830381600087803b15801561095457600080fd5b505af1158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c919061261f565b828260405160200161099f92919061266d565b60405160208183030381529060405280519060200120146109f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ec9061270b565b60405180910390fd5b600063ffffffff16604260009054906101000a900463ffffffff1663ffffffff161415610a2157610a22565b5b6001604360008663ffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161415610b8a5760008673ffffffffffffffffffffffffffffffffffffffff168a600067ffffffffffffffff811115610abe57610abd611db3565b5b6040519080825280601f01601f191660200182016040528015610af05781602001600182028036833780820191505090505b50604051610afe91906127a5565b60006040518083038185875af1925050503d8060008114610b3b576040519150601f19603f3d011682016040523d82523d6000602084013e610b40565b606091505b5050905080610b84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7b9061282e565b60405180910390fd5b50610f1f565b604260009054906101000a900463ffffffff1663ffffffff168863ffffffff161415610be057610bdb868a8c73ffffffffffffffffffffffffffffffffffffffff1661169a9092919063ffffffff16565b610f1e565b6000888b604051602001610bf59291906128cc565b60405160208183030381529060405280519060200120905060006044600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e8c576000610ca67f000000000000000000000000000000000000000000000000000000000000000084611720565b90508073ffffffffffffffffffffffffffffffffffffffff16636c94522160128b8f6040518463ffffffff1660e01b8152600401610ce6939291906129d8565b600060405180830381600087803b158015610d0057600080fd5b505af1158015610d14573d6000803e3d6000fd5b50505050806044600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060405180604001604052808c63ffffffff1681526020018e73ffffffffffffffffffffffffffffffffffffffff16815250604560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507fccd7715648d1f2bb13e158f96b5b6c3aeda555d4cb87112e274a6f28bc571d598b8e83604051610e7e93929190612a35565b60405180910390a150610f1b565b8073ffffffffffffffffffffffffffffffffffffffff166340c10f19898d6040518363ffffffff1660e01b8152600401610ec7929190612429565b602060405180830381600087803b158015610ee157600080fd5b505af1158015610ef5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f19919061247e565b505b50505b5b7f6aec77db51699eb95c99cdf3d230d727c40d03cc47ade310b68e3c4185b90e7284898c8c8a604051610f56959493929190612a6c565b60405180910390a150505050505050505050565b6000604460008484604051602001610f839291906128cc565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b60415481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000604154905060005b60208110156110c35760018083161415611060576001816020811061102f5761102e612abf565b5b01548360405160200161104392919061266d565b6040516020818303038152906040528051906020012092506110a1565b826021826020811061107557611074612abf565b5b015460405160200161108892919061266d565b6040516020818303038152906040528051906020012092505b6002826110ae9190612b4c565b915080806110bb90612b7d565b915050611007565b50819250505090565b60456020528060005260406000206000915090508060000160009054906101000a900463ffffffff16908060000160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b6111286117f7565b73ffffffffffffffffffffffffffffffffffffffff166111466112c8565b73ffffffffffffffffffffffffffffffffffffffff161461119c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119390612c12565b60405180910390fd5b6111a660006117ff565b565b600080878a8a89896040516020016111c4959493929190612c53565b60405160208183030381529060405280519060200120905060008467ffffffffffffffff16905060005b60208110156112b4576001808316141561124c5786818151811061121557611214612abf565b5b60200260200101518360405160200161122f92919061266d565b604051602081830303815290604052805190602001209250611292565b828782815181106112605761125f612abf565b5b602002602001015160405160200161127992919061266d565b6040516020818303038152906040528051906020012092505b60028261129f9190612b4c565b915080806112ac90612b7d565b9150506111ee565b508382149250505098975050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008083836040516020016113079291906128cc565b6040516020818303038152906040528051906020012090506113497f0000000000000000000000000000000000000000000000000000000000000000826118c3565b91505092915050565b604260009054906101000a900463ffffffff1681565b604660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60436020528060005260406000206000915054906101000a900460ff1681565b600081565b6113bb6117f7565b73ffffffffffffffffffffffffffffffffffffffff166113d96112c8565b73ffffffffffffffffffffffffffffffffffffffff161461142f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142690612c12565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561149f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149690612d24565b60405180910390fd5b6114a8816117ff565b50565b61152e846323b872dd60e01b8585856040516024016114cc93929190612d44565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506118d8565b50505050565b6000838686858560405160200161154f959493929190612c53565b6040516020818303038152906040528051906020012090506001602060026115779190612eae565b6115819190612ef9565b604154106115c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bb90612f9f565b60405180910390fd5b6001604160008282546115d79190612fbf565b925050819055506000604154905060005b6020811015611680576001808316141561161e57826001826020811061161157611610612abf565b5b0181905550505050611693565b6001816020811061163257611631612abf565b5b01548360405160200161164692919061266d565b60405160208183030381529060405280519060200120925060028261166b9190612b4c565b9150808061167890612b7d565b9150506115e8565b5060006116905761168f613015565b5b50505b5050505050565b61171b8363a9059cbb60e01b84846040516024016116b9929190612429565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506118d8565b505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528360601b60148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037826000f5915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e890613090565b60405180910390fd5b92915050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006118d083833061199f565b905092915050565b600061193a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611a1f9092919063ffffffff16565b905060008151111561199a578080602001905181019061195a919061247e565b611999576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199090613122565b60405180910390fd5b5b505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528460601b60148201527f5af43d82803e903d91602b57fd5bf3ff0000000000000000000000000000000060288201528260601b603882015283604c82015260378120606c820152605560378201209150509392505050565b6060611a2e8484600085611a37565b90509392505050565b606082471015611a7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a73906131b4565b60405180910390fd5b611a8585611b4b565b611ac4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abb90613220565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611aed91906127a5565b60006040518083038185875af1925050503d8060008114611b2a576040519150601f19603f3d011682016040523d82523d6000602084013e611b2f565b606091505b5091509150611b3f828286611b5e565b92505050949350505050565b600080823b905060008111915050919050565b60608315611b6e57829050611bbe565b600083511115611b815782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb59190613284565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611bec81611bd9565b8114611bf757600080fd5b50565b600081359050611c0981611be3565b92915050565b600060208284031215611c2557611c24611bcf565b5b6000611c3384828501611bfa565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c6782611c3c565b9050919050565b611c7781611c5c565b82525050565b6000602082019050611c926000830184611c6e565b92915050565b611ca181611c5c565b8114611cac57600080fd5b50565b600081359050611cbe81611c98565b92915050565b6000819050919050565b611cd781611cc4565b8114611ce257600080fd5b50565b600081359050611cf481611cce565b92915050565b600063ffffffff82169050919050565b611d1381611cfa565b8114611d1e57600080fd5b50565b600081359050611d3081611d0a565b92915050565b60008060008060808587031215611d5057611d4f611bcf565b5b6000611d5e87828801611caf565b9450506020611d6f87828801611ce5565b9350506040611d8087828801611d21565b9250506060611d9187828801611caf565b91505092959194509250565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611deb82611da2565b810181811067ffffffffffffffff82111715611e0a57611e09611db3565b5b80604052505050565b6000611e1d611bc5565b9050611e298282611de2565b919050565b600067ffffffffffffffff821115611e4957611e48611db3565b5b602082029050602081019050919050565b600080fd5b6000611e72611e6d84611e2e565b611e13565b90508083825260208201905060208402830185811115611e9557611e94611e5a565b5b835b81811015611ebe5780611eaa8882611bfa565b845260208401935050602081019050611e97565b5050509392505050565b600082601f830112611edd57611edc611d9d565b5b8135611eed848260208601611e5f565b91505092915050565b6000806000806000806000806000806101408b8d031215611f1a57611f19611bcf565b5b6000611f288d828e01611caf565b9a50506020611f398d828e01611ce5565b9950506040611f4a8d828e01611d21565b9850506060611f5b8d828e01611d21565b9750506080611f6c8d828e01611caf565b96505060a08b013567ffffffffffffffff811115611f8d57611f8c611bd4565b5b611f998d828e01611ec8565b95505060c0611faa8d828e01611d21565b94505060e0611fbb8d828e01611ce5565b935050610100611fcd8d828e01611bfa565b925050610120611fdf8d828e01611bfa565b9150509295989b9194979a5092959850565b6000806040838503121561200857612007611bcf565b5b600061201685828601611d21565b925050602061202785828601611caf565b9150509250929050565b61203a81611cc4565b82525050565b60006020820190506120556000830184612031565b92915050565b61206481611bd9565b82525050565b600060208201905061207f600083018461205b565b92915050565b60006020828403121561209b5761209a611bcf565b5b60006120a984828501611caf565b91505092915050565b6120bb81611cfa565b82525050565b60006040820190506120d660008301856120b2565b6120e36020830184611c6e565b9392505050565b600067ffffffffffffffff82169050919050565b612107816120ea565b811461211257600080fd5b50565b600081359050612124816120fe565b92915050565b600080600080600080600080610100898b03121561214b5761214a611bcf565b5b60006121598b828c01611caf565b985050602061216a8b828c01611ce5565b975050604061217b8b828c01611d21565b965050606061218c8b828c01611d21565b955050608061219d8b828c01611caf565b94505060a089013567ffffffffffffffff8111156121be576121bd611bd4565b5b6121ca8b828c01611ec8565b93505060c06121db8b828c01612115565b92505060e06121ec8b828c01611bfa565b9150509295985092959890939650565b60008115159050919050565b612211816121fc565b82525050565b600060208201905061222c6000830184612208565b92915050565b600060208201905061224760008301846120b2565b92915050565b6000819050919050565b600061227261226d61226884611c3c565b61224d565b611c3c565b9050919050565b600061228482612257565b9050919050565b600061229682612279565b9050919050565b6122a68161228b565b82525050565b60006020820190506122c1600083018461229d565b92915050565b6000602082840312156122dd576122dc611bcf565b5b60006122eb84828501611ce5565b91505092915050565b600082825260208201905092915050565b7f4272696467653a3a6272696467653a2044455354494e4154494f4e5f43414e5460008201527f5f42455f495453454c4600000000000000000000000000000000000000000000602082015250565b6000612361602a836122f4565b915061236c82612305565b604082019050919050565b6000602082019050818103600083015261239081612354565b9050919050565b7f4272696467653a3a6272696467653a20414d4f554e545f444f45535f4e4f545f60008201527f4d415443485f4d53475f56414c55450000000000000000000000000000000000602082015250565b60006123f3602f836122f4565b91506123fe82612397565b604082019050919050565b60006020820190508181036000830152612422816123e6565b9050919050565b600060408201905061243e6000830185611c6e565b61244b6020830184612031565b9392505050565b61245b816121fc565b811461246657600080fd5b50565b60008151905061247881612452565b92915050565b60006020828403121561249457612493611bcf565b5b60006124a284828501612469565b91505092915050565b600060c0820190506124c06000830189611c6e565b6124cd6020830188612031565b6124da60408301876120b2565b6124e760608301866120b2565b6124f46080830185611c6e565b61250160a08301846120b2565b979650505050505050565b7f4272696467653a3a636c61696d3a20414c52454144595f434c41494d45440000600082015250565b6000612542601e836122f4565b915061254d8261250c565b602082019050919050565b6000602082019050818103600083015261257181612535565b9050919050565b7f4272696467653a3a636c61696d3a2044455354494e4154494f4e5f4e4554574f60008201527f524b5f444f45535f4e4f545f4d41544348000000000000000000000000000000602082015250565b60006125d46031836122f4565b91506125df82612578565b604082019050919050565b60006020820190508181036000830152612603816125c7565b9050919050565b60008151905061261981611be3565b92915050565b60006020828403121561263557612634611bcf565b5b60006126438482850161260a565b91505092915050565b6000819050919050565b61266761266282611bd9565b61264c565b82525050565b60006126798285612656565b6020820191506126898284612656565b6020820191508190509392505050565b7f4272696467653a3a636c61696d3a20474c4f42414c5f455849545f524f4f545f60008201527f444f45535f4e4f545f4d41544348000000000000000000000000000000000000602082015250565b60006126f5602e836122f4565b915061270082612699565b604082019050919050565b60006020820190508181036000830152612724816126e8565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561275f578082015181840152602081019050612744565b8381111561276e576000848401525b50505050565b600061277f8261272b565b6127898185612736565b9350612799818560208601612741565b80840191505092915050565b60006127b18284612774565b915081905092915050565b7f4272696467653a3a636c61696d3a204554485f5452414e534645525f4641494c60008201527f4544000000000000000000000000000000000000000000000000000000000000602082015250565b60006128186022836122f4565b9150612823826127bc565b604082019050919050565b600060208201905081810360008301526128478161280b565b9050919050565b60008160e01b9050919050565b60006128668261284e565b9050919050565b61287e61287982611cfa565b61285b565b82525050565b60008160601b9050919050565b600061289c82612884565b9050919050565b60006128ae82612891565b9050919050565b6128c66128c182611c5c565b6128a3565b82525050565b60006128d8828561286d565b6004820191506128e882846128b5565b6014820191508190509392505050565b7f6e616d6500000000000000000000000000000000000000000000000000000000600082015250565b600061292e6004836122f4565b9150612939826128f8565b602082019050919050565b7f73796d626f6c0000000000000000000000000000000000000000000000000000600082015250565b600061297a6006836122f4565b915061298582612944565b602082019050919050565b6000819050919050565b600060ff82169050919050565b60006129c26129bd6129b884612990565b61224d565b61299a565b9050919050565b6129d2816129a7565b82525050565b600060a08201905081810360008301526129f181612921565b90508181036020830152612a048161296d565b9050612a1360408301866129c9565b612a206060830185611c6e565b612a2d6080830184612031565b949350505050565b6000606082019050612a4a60008301866120b2565b612a576020830185611c6e565b612a646040830184611c6e565b949350505050565b600060a082019050612a8160008301886120b2565b612a8e60208301876120b2565b612a9b6040830186611c6e565b612aa86060830185612031565b612ab56080830184611c6e565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612b5782611cc4565b9150612b6283611cc4565b925082612b7257612b71612aee565b5b828204905092915050565b6000612b8882611cc4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612bbb57612bba612b1d565b5b600182019050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612bfc6020836122f4565b9150612c0782612bc6565b602082019050919050565b60006020820190508181036000830152612c2b81612bef565b9050919050565b6000819050919050565b612c4d612c4882611cc4565b612c32565b82525050565b6000612c5f828861286d565b600482019150612c6f82876128b5565b601482019150612c7f8286612c3c565b602082019150612c8f828561286d565b600482019150612c9f82846128b5565b6014820191508190509695505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612d0e6026836122f4565b9150612d1982612cb2565b604082019050919050565b60006020820190508181036000830152612d3d81612d01565b9050919050565b6000606082019050612d596000830186611c6e565b612d666020830185611c6e565b612d736040830184612031565b949350505050565b60008160011c9050919050565b6000808291508390505b6001851115612dd257808604811115612dae57612dad612b1d565b5b6001851615612dbd5780820291505b8081029050612dcb85612d7b565b9450612d92565b94509492505050565b600082612deb5760019050612ea7565b81612df95760009050612ea7565b8160018114612e0f5760028114612e1957612e48565b6001915050612ea7565b60ff841115612e2b57612e2a612b1d565b5b8360020a915084821115612e4257612e41612b1d565b5b50612ea7565b5060208310610133831016604e8410600b8410161715612e7d5782820a905083811115612e7857612e77612b1d565b5b612ea7565b612e8a8484846001612d88565b92509050818404811115612ea157612ea0612b1d565b5b81810290505b9392505050565b6000612eb982611cc4565b9150612ec483611cc4565b9250612ef17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612ddb565b905092915050565b6000612f0482611cc4565b9150612f0f83611cc4565b925082821015612f2257612f21612b1d565b5b828203905092915050565b7f4465706f736974436f6e74726163743a5f6465706f7369743a204d45524b4c4560008201527f5f545245455f46554c4c00000000000000000000000000000000000000000000602082015250565b6000612f89602a836122f4565b9150612f9482612f2d565b604082019050919050565b60006020820190508181036000830152612fb881612f7c565b9050919050565b6000612fca82611cc4565b9150612fd583611cc4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561300a57613009612b1d565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f455243313136373a2063726561746532206661696c6564000000000000000000600082015250565b600061307a6017836122f4565b915061308582613044565b602082019050919050565b600060208201905081810360008301526130a98161306d565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061310c602a836122f4565b9150613117826130b0565b604082019050919050565b6000602082019050818103600083015261313b816130ff565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061319e6026836122f4565b91506131a982613142565b604082019050919050565b600060208201905081810360008301526131cd81613191565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061320a601d836122f4565b9150613215826131d4565b602082019050919050565b60006020820190508181036000830152613239816131fd565b9050919050565b600081519050919050565b600061325682613240565b61326081856122f4565b9350613270818560208601612741565b61327981611da2565b840191505092915050565b6000602082019050818103600083015261329e818461324b565b90509291505056fea264697066735822122057e988cb850e607d998a7f1d6a06444da2af82a6cd12daa067e23b5f5ddb5b4964736f6c6343000809003360806040523480156200001157600080fd5b50600060019054906101000a900460ff166200003c5760008054906101000a900460ff16156200004d565b6200004c6200010960201b60201c565b5b6200008f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200008690620001d1565b60405180910390fd5b60008060019054906101000a900460ff161590508015620000e0576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015620001025760008060016101000a81548160ff0219169083151502179055505b50620001f3565b600062000121306200012760201b62000a451760201c565b15905090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000620001b9602e836200014a565b9150620001c6826200015b565b604082019050919050565b60006020820190508181036000830152620001ec81620001aa565b9050919050565b6121a180620002036000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80636c94522111610097578063a3c573eb11610066578063a3c573eb146102ae578063a457c2d7146102cc578063a9059cbb146102fc578063dd62ed3e1461032c576100f5565b80636c9452211461021457806370a082311461023057806395d89b41146102605780639dc29fac1461027e576100f5565b806323b872dd116100d357806323b872dd14610166578063313ce5671461019657806339509351146101b457806340c10f19146101e4576100f5565b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610148575b600080fd5b61010261035c565b60405161010f91906114ba565b60405180910390f35b610132600480360381019061012d9190611584565b6103ee565b60405161013f91906115df565b60405180910390f35b610150610411565b60405161015d9190611609565b60405180910390f35b610180600480360381019061017b9190611624565b61041b565b60405161018d91906115df565b60405180910390f35b61019e61044a565b6040516101ab9190611693565b60405180910390f35b6101ce60048036038101906101c99190611584565b610461565b6040516101db91906115df565b60405180910390f35b6101fe60048036038101906101f99190611584565b61050b565b60405161020b91906115df565b60405180910390f35b61022e6004803603810190610229919061180f565b6105b1565b005b61024a600480360381019061024591906118c2565b61070a565b6040516102579190611609565b60405180910390f35b610268610753565b60405161027591906114ba565b60405180910390f35b61029860048036038101906102939190611584565b6107e5565b6040516102a591906115df565b60405180910390f35b6102b661088b565b6040516102c391906118fe565b60405180910390f35b6102e660048036038101906102e19190611584565b6108b1565b6040516102f391906115df565b60405180910390f35b61031660048036038101906103119190611584565b61099b565b60405161032391906115df565b60405180910390f35b61034660048036038101906103419190611919565b6109be565b6040516103539190611609565b60405180910390f35b60606036805461036b90611988565b80601f016020809104026020016040519081016040528092919081815260200182805461039790611988565b80156103e45780601f106103b9576101008083540402835291602001916103e4565b820191906000526020600020905b8154815290600101906020018083116103c757829003601f168201915b5050505050905090565b6000806103f9610a68565b9050610406818585610a70565b600191505092915050565b6000603554905090565b600080610426610a68565b9050610433858285610c3b565b61043e858585610cc7565b60019150509392505050565b6000606560149054906101000a900460ff16905090565b60008061046c610a68565b9050610500818585603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104fb91906119e9565b610a70565b600191505092915050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461059d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059490611a8b565b60405180910390fd5b6105a78383610f4b565b6001905092915050565b600060019054906101000a900460ff166105d95760008054906101000a900460ff16156105e2565b6105e16110ac565b5b610621576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061890611b1d565b60405180910390fd5b60008060019054906101000a900460ff161590508015610671576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61067b86866110bd565b33606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083606560146101000a81548160ff021916908360ff1602179055506106e18383610f4b565b80156107025760008060016101000a81548160ff0219169083151502179055505b505050505050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606037805461076290611988565b80601f016020809104026020016040519081016040528092919081815260200182805461078e90611988565b80156107db5780601f106107b0576101008083540402835291602001916107db565b820191906000526020600020905b8154815290600101906020018083116107be57829003601f168201915b5050505050905090565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610877576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086e90611a8b565b60405180910390fd5b610881838361111a565b6001905092915050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806108bc610a68565b90506000603460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015610982576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097990611baf565b60405180910390fd5b61098f8286868403610a70565b60019250505092915050565b6000806109a6610a68565b90506109b3818585610cc7565b600191505092915050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ae0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad790611c41565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4790611cd3565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610c2e9190611609565b60405180910390a3505050565b6000610c4784846109be565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610cc15781811015610cb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610caa90611d3f565b60405180910390fd5b610cc08484848403610a70565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610d37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2e90611dd1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610da7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9e90611e63565b60405180910390fd5b610db28383836112f3565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610e39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3090611ef5565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ece91906119e9565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f329190611609565b60405180910390a3610f458484846112f8565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb290611f61565b60405180910390fd5b610fc7600083836112f3565b8060356000828254610fd991906119e9565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461102f91906119e9565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516110949190611609565b60405180910390a36110a8600083836112f8565b5050565b60006110b730610a45565b15905090565b600060019054906101000a900460ff1661110c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110390611ff3565b60405180910390fd5b61111682826112fd565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561118a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118190612085565b60405180910390fd5b611196826000836112f3565b6000603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561121d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121490612117565b60405180910390fd5b818103603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603560008282546112759190612137565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516112da9190611609565b60405180910390a36112ee836000846112f8565b505050565b505050565b505050565b600060019054906101000a900460ff1661134c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134390611ff3565b60405180910390fd5b816036908051906020019061136292919061137e565b50806037908051906020019061137992919061137e565b505050565b82805461138a90611988565b90600052602060002090601f0160209004810192826113ac57600085556113f3565b82601f106113c557805160ff19168380011785556113f3565b828001600101855582156113f3579182015b828111156113f25782518255916020019190600101906113d7565b5b5090506114009190611404565b5090565b5b8082111561141d576000816000905550600101611405565b5090565b600081519050919050565b600082825260208201905092915050565b60005b8381101561145b578082015181840152602081019050611440565b8381111561146a576000848401525b50505050565b6000601f19601f8301169050919050565b600061148c82611421565b611496818561142c565b93506114a681856020860161143d565b6114af81611470565b840191505092915050565b600060208201905081810360008301526114d48184611481565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061151b826114f0565b9050919050565b61152b81611510565b811461153657600080fd5b50565b60008135905061154881611522565b92915050565b6000819050919050565b6115618161154e565b811461156c57600080fd5b50565b60008135905061157e81611558565b92915050565b6000806040838503121561159b5761159a6114e6565b5b60006115a985828601611539565b92505060206115ba8582860161156f565b9150509250929050565b60008115159050919050565b6115d9816115c4565b82525050565b60006020820190506115f460008301846115d0565b92915050565b6116038161154e565b82525050565b600060208201905061161e60008301846115fa565b92915050565b60008060006060848603121561163d5761163c6114e6565b5b600061164b86828701611539565b935050602061165c86828701611539565b925050604061166d8682870161156f565b9150509250925092565b600060ff82169050919050565b61168d81611677565b82525050565b60006020820190506116a86000830184611684565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6116f082611470565b810181811067ffffffffffffffff8211171561170f5761170e6116b8565b5b80604052505050565b60006117226114dc565b905061172e82826116e7565b919050565b600067ffffffffffffffff82111561174e5761174d6116b8565b5b61175782611470565b9050602081019050919050565b82818337600083830152505050565b600061178661178184611733565b611718565b9050828152602081018484840111156117a2576117a16116b3565b5b6117ad848285611764565b509392505050565b600082601f8301126117ca576117c96116ae565b5b81356117da848260208601611773565b91505092915050565b6117ec81611677565b81146117f757600080fd5b50565b600081359050611809816117e3565b92915050565b600080600080600060a0868803121561182b5761182a6114e6565b5b600086013567ffffffffffffffff811115611849576118486114eb565b5b611855888289016117b5565b955050602086013567ffffffffffffffff811115611876576118756114eb565b5b611882888289016117b5565b9450506040611893888289016117fa565b93505060606118a488828901611539565b92505060806118b58882890161156f565b9150509295509295909350565b6000602082840312156118d8576118d76114e6565b5b60006118e684828501611539565b91505092915050565b6118f881611510565b82525050565b600060208201905061191360008301846118ef565b92915050565b600080604083850312156119305761192f6114e6565b5b600061193e85828601611539565b925050602061194f85828601611539565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806119a057607f821691505b602082108114156119b4576119b3611959565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006119f48261154e565b91506119ff8361154e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611a3457611a336119ba565b5b828201905092915050565b7f546f6b656e577261707065643a4e4f545f425249444745000000000000000000600082015250565b6000611a7560178361142c565b9150611a8082611a3f565b602082019050919050565b60006020820190508181036000830152611aa481611a68565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000611b07602e8361142c565b9150611b1282611aab565b604082019050919050565b60006020820190508181036000830152611b3681611afa565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611b9960258361142c565b9150611ba482611b3d565b604082019050919050565b60006020820190508181036000830152611bc881611b8c565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611c2b60248361142c565b9150611c3682611bcf565b604082019050919050565b60006020820190508181036000830152611c5a81611c1e565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611cbd60228361142c565b9150611cc882611c61565b604082019050919050565b60006020820190508181036000830152611cec81611cb0565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611d29601d8361142c565b9150611d3482611cf3565b602082019050919050565b60006020820190508181036000830152611d5881611d1c565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611dbb60258361142c565b9150611dc682611d5f565b604082019050919050565b60006020820190508181036000830152611dea81611dae565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611e4d60238361142c565b9150611e5882611df1565b604082019050919050565b60006020820190508181036000830152611e7c81611e40565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611edf60268361142c565b9150611eea82611e83565b604082019050919050565b60006020820190508181036000830152611f0e81611ed2565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000611f4b601f8361142c565b9150611f5682611f15565b602082019050919050565b60006020820190508181036000830152611f7a81611f3e565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000611fdd602b8361142c565b9150611fe882611f81565b604082019050919050565b6000602082019050818103600083015261200c81611fd0565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061206f60218361142c565b915061207a82612013565b604082019050919050565b6000602082019050818103600083015261209e81612062565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b600061210160228361142c565b915061210c826120a5565b604082019050919050565b60006020820190508181036000830152612130816120f4565b9050919050565b60006121428261154e565b915061214d8361154e565b9250828210156121605761215f6119ba565b5b82820390509291505056fea2646970667358221220004701245d464abf61f9addbf73cebeefa0067d5c507c5c7d0622e792ba6ae3c64736f6c63430008090033",
}

// BridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeMetaData.ABI instead.
var BridgeABI = BridgeMetaData.ABI

// BridgeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeMetaData.Bin instead.
var BridgeBin = BridgeMetaData.Bin

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend, _networkID uint32, _globalExitRootManager common.Address) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := BridgeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeBin), backend, _networkID, _globalExitRootManager)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// MAINNETNETWORKID is a free data retrieval call binding the contract method 0xed6be5c9.
//
// Solidity: function MAINNET_NETWORK_ID() view returns(uint32)
func (_Bridge *BridgeCaller) MAINNETNETWORKID(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "MAINNET_NETWORK_ID")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// MAINNETNETWORKID is a free data retrieval call binding the contract method 0xed6be5c9.
//
// Solidity: function MAINNET_NETWORK_ID() view returns(uint32)
func (_Bridge *BridgeSession) MAINNETNETWORKID() (uint32, error) {
	return _Bridge.Contract.MAINNETNETWORKID(&_Bridge.CallOpts)
}

// MAINNETNETWORKID is a free data retrieval call binding the contract method 0xed6be5c9.
//
// Solidity: function MAINNET_NETWORK_ID() view returns(uint32)
func (_Bridge *BridgeCallerSession) MAINNETNETWORKID() (uint32, error) {
	return _Bridge.Contract.MAINNETNETWORKID(&_Bridge.CallOpts)
}

// AddressToTokenInfo is a free data retrieval call binding the contract method 0x452a94b0.
//
// Solidity: function addressToTokenInfo(address ) view returns(uint32 originalNetwork, address originalTokenAddress)
func (_Bridge *BridgeCaller) AddressToTokenInfo(opts *bind.CallOpts, arg0 common.Address) (struct {
	OriginalNetwork      uint32
	OriginalTokenAddress common.Address
}, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "addressToTokenInfo", arg0)

	outstruct := new(struct {
		OriginalNetwork      uint32
		OriginalTokenAddress common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.OriginalNetwork = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.OriginalTokenAddress = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// AddressToTokenInfo is a free data retrieval call binding the contract method 0x452a94b0.
//
// Solidity: function addressToTokenInfo(address ) view returns(uint32 originalNetwork, address originalTokenAddress)
func (_Bridge *BridgeSession) AddressToTokenInfo(arg0 common.Address) (struct {
	OriginalNetwork      uint32
	OriginalTokenAddress common.Address
}, error) {
	return _Bridge.Contract.AddressToTokenInfo(&_Bridge.CallOpts, arg0)
}

// AddressToTokenInfo is a free data retrieval call binding the contract method 0x452a94b0.
//
// Solidity: function addressToTokenInfo(address ) view returns(uint32 originalNetwork, address originalTokenAddress)
func (_Bridge *BridgeCallerSession) AddressToTokenInfo(arg0 common.Address) (struct {
	OriginalNetwork      uint32
	OriginalTokenAddress common.Address
}, error) {
	return _Bridge.Contract.AddressToTokenInfo(&_Bridge.CallOpts, arg0)
}

// ClaimNullifier is a free data retrieval call binding the contract method 0xe7375881.
//
// Solidity: function claimNullifier(uint256 ) view returns(bool)
func (_Bridge *BridgeCaller) ClaimNullifier(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "claimNullifier", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ClaimNullifier is a free data retrieval call binding the contract method 0xe7375881.
//
// Solidity: function claimNullifier(uint256 ) view returns(bool)
func (_Bridge *BridgeSession) ClaimNullifier(arg0 *big.Int) (bool, error) {
	return _Bridge.Contract.ClaimNullifier(&_Bridge.CallOpts, arg0)
}

// ClaimNullifier is a free data retrieval call binding the contract method 0xe7375881.
//
// Solidity: function claimNullifier(uint256 ) view returns(bool)
func (_Bridge *BridgeCallerSession) ClaimNullifier(arg0 *big.Int) (bool, error) {
	return _Bridge.Contract.ClaimNullifier(&_Bridge.CallOpts, arg0)
}

// DepositCount is a free data retrieval call binding the contract method 0x2dfdf0b5.
//
// Solidity: function depositCount() view returns(uint256)
func (_Bridge *BridgeCaller) DepositCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "depositCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DepositCount is a free data retrieval call binding the contract method 0x2dfdf0b5.
//
// Solidity: function depositCount() view returns(uint256)
func (_Bridge *BridgeSession) DepositCount() (*big.Int, error) {
	return _Bridge.Contract.DepositCount(&_Bridge.CallOpts)
}

// DepositCount is a free data retrieval call binding the contract method 0x2dfdf0b5.
//
// Solidity: function depositCount() view returns(uint256)
func (_Bridge *BridgeCallerSession) DepositCount() (*big.Int, error) {
	return _Bridge.Contract.DepositCount(&_Bridge.CallOpts)
}

// GetDepositRoot is a free data retrieval call binding the contract method 0x3ae05047.
//
// Solidity: function getDepositRoot() view returns(bytes32)
func (_Bridge *BridgeCaller) GetDepositRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getDepositRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetDepositRoot is a free data retrieval call binding the contract method 0x3ae05047.
//
// Solidity: function getDepositRoot() view returns(bytes32)
func (_Bridge *BridgeSession) GetDepositRoot() ([32]byte, error) {
	return _Bridge.Contract.GetDepositRoot(&_Bridge.CallOpts)
}

// GetDepositRoot is a free data retrieval call binding the contract method 0x3ae05047.
//
// Solidity: function getDepositRoot() view returns(bytes32)
func (_Bridge *BridgeCallerSession) GetDepositRoot() ([32]byte, error) {
	return _Bridge.Contract.GetDepositRoot(&_Bridge.CallOpts)
}

// GetTokenWrappedAddress is a free data retrieval call binding the contract method 0x22e95f2c.
//
// Solidity: function getTokenWrappedAddress(uint32 originalNetwork, address originalTokenAddress) view returns(address)
func (_Bridge *BridgeCaller) GetTokenWrappedAddress(opts *bind.CallOpts, originalNetwork uint32, originalTokenAddress common.Address) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getTokenWrappedAddress", originalNetwork, originalTokenAddress)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetTokenWrappedAddress is a free data retrieval call binding the contract method 0x22e95f2c.
//
// Solidity: function getTokenWrappedAddress(uint32 originalNetwork, address originalTokenAddress) view returns(address)
func (_Bridge *BridgeSession) GetTokenWrappedAddress(originalNetwork uint32, originalTokenAddress common.Address) (common.Address, error) {
	return _Bridge.Contract.GetTokenWrappedAddress(&_Bridge.CallOpts, originalNetwork, originalTokenAddress)
}

// GetTokenWrappedAddress is a free data retrieval call binding the contract method 0x22e95f2c.
//
// Solidity: function getTokenWrappedAddress(uint32 originalNetwork, address originalTokenAddress) view returns(address)
func (_Bridge *BridgeCallerSession) GetTokenWrappedAddress(originalNetwork uint32, originalTokenAddress common.Address) (common.Address, error) {
	return _Bridge.Contract.GetTokenWrappedAddress(&_Bridge.CallOpts, originalNetwork, originalTokenAddress)
}

// GlobalExitRootManager is a free data retrieval call binding the contract method 0xd02103ca.
//
// Solidity: function globalExitRootManager() view returns(address)
func (_Bridge *BridgeCaller) GlobalExitRootManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "globalExitRootManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GlobalExitRootManager is a free data retrieval call binding the contract method 0xd02103ca.
//
// Solidity: function globalExitRootManager() view returns(address)
func (_Bridge *BridgeSession) GlobalExitRootManager() (common.Address, error) {
	return _Bridge.Contract.GlobalExitRootManager(&_Bridge.CallOpts)
}

// GlobalExitRootManager is a free data retrieval call binding the contract method 0xd02103ca.
//
// Solidity: function globalExitRootManager() view returns(address)
func (_Bridge *BridgeCallerSession) GlobalExitRootManager() (common.Address, error) {
	return _Bridge.Contract.GlobalExitRootManager(&_Bridge.CallOpts)
}

// NetworkID is a free data retrieval call binding the contract method 0xbab161bf.
//
// Solidity: function networkID() view returns(uint32)
func (_Bridge *BridgeCaller) NetworkID(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "networkID")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// NetworkID is a free data retrieval call binding the contract method 0xbab161bf.
//
// Solidity: function networkID() view returns(uint32)
func (_Bridge *BridgeSession) NetworkID() (uint32, error) {
	return _Bridge.Contract.NetworkID(&_Bridge.CallOpts)
}

// NetworkID is a free data retrieval call binding the contract method 0xbab161bf.
//
// Solidity: function networkID() view returns(uint32)
func (_Bridge *BridgeCallerSession) NetworkID() (uint32, error) {
	return _Bridge.Contract.NetworkID(&_Bridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeSession) Owner() (common.Address, error) {
	return _Bridge.Contract.Owner(&_Bridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeCallerSession) Owner() (common.Address, error) {
	return _Bridge.Contract.Owner(&_Bridge.CallOpts)
}

// PrecalculatedWrapperAddress is a free data retrieval call binding the contract method 0xb7e6a7d4.
//
// Solidity: function precalculatedWrapperAddress(uint32 originalNetwork, address originalTokenAddress) view returns(address)
func (_Bridge *BridgeCaller) PrecalculatedWrapperAddress(opts *bind.CallOpts, originalNetwork uint32, originalTokenAddress common.Address) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "precalculatedWrapperAddress", originalNetwork, originalTokenAddress)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PrecalculatedWrapperAddress is a free data retrieval call binding the contract method 0xb7e6a7d4.
//
// Solidity: function precalculatedWrapperAddress(uint32 originalNetwork, address originalTokenAddress) view returns(address)
func (_Bridge *BridgeSession) PrecalculatedWrapperAddress(originalNetwork uint32, originalTokenAddress common.Address) (common.Address, error) {
	return _Bridge.Contract.PrecalculatedWrapperAddress(&_Bridge.CallOpts, originalNetwork, originalTokenAddress)
}

// PrecalculatedWrapperAddress is a free data retrieval call binding the contract method 0xb7e6a7d4.
//
// Solidity: function precalculatedWrapperAddress(uint32 originalNetwork, address originalTokenAddress) view returns(address)
func (_Bridge *BridgeCallerSession) PrecalculatedWrapperAddress(originalNetwork uint32, originalTokenAddress common.Address) (common.Address, error) {
	return _Bridge.Contract.PrecalculatedWrapperAddress(&_Bridge.CallOpts, originalNetwork, originalTokenAddress)
}

// TokenImplementation is a free data retrieval call binding the contract method 0x2f3a3d5d.
//
// Solidity: function tokenImplementation() view returns(address)
func (_Bridge *BridgeCaller) TokenImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "tokenImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenImplementation is a free data retrieval call binding the contract method 0x2f3a3d5d.
//
// Solidity: function tokenImplementation() view returns(address)
func (_Bridge *BridgeSession) TokenImplementation() (common.Address, error) {
	return _Bridge.Contract.TokenImplementation(&_Bridge.CallOpts)
}

// TokenImplementation is a free data retrieval call binding the contract method 0x2f3a3d5d.
//
// Solidity: function tokenImplementation() view returns(address)
func (_Bridge *BridgeCallerSession) TokenImplementation() (common.Address, error) {
	return _Bridge.Contract.TokenImplementation(&_Bridge.CallOpts)
}

// TokenInfoToAddress is a free data retrieval call binding the contract method 0x0db4afff.
//
// Solidity: function tokenInfoToAddress(bytes32 ) view returns(address)
func (_Bridge *BridgeCaller) TokenInfoToAddress(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "tokenInfoToAddress", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenInfoToAddress is a free data retrieval call binding the contract method 0x0db4afff.
//
// Solidity: function tokenInfoToAddress(bytes32 ) view returns(address)
func (_Bridge *BridgeSession) TokenInfoToAddress(arg0 [32]byte) (common.Address, error) {
	return _Bridge.Contract.TokenInfoToAddress(&_Bridge.CallOpts, arg0)
}

// TokenInfoToAddress is a free data retrieval call binding the contract method 0x0db4afff.
//
// Solidity: function tokenInfoToAddress(bytes32 ) view returns(address)
func (_Bridge *BridgeCallerSession) TokenInfoToAddress(arg0 [32]byte) (common.Address, error) {
	return _Bridge.Contract.TokenInfoToAddress(&_Bridge.CallOpts, arg0)
}

// VerifyMerkleProof is a free data retrieval call binding the contract method 0x7d8f0469.
//
// Solidity: function verifyMerkleProof(address token, uint256 amount, uint32 originalNetwork, uint32 destinationNetwork, address destinationAddress, bytes32[] smtProof, uint64 index, bytes32 root) pure returns(bool)
func (_Bridge *BridgeCaller) VerifyMerkleProof(opts *bind.CallOpts, token common.Address, amount *big.Int, originalNetwork uint32, destinationNetwork uint32, destinationAddress common.Address, smtProof [][32]byte, index uint64, root [32]byte) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "verifyMerkleProof", token, amount, originalNetwork, destinationNetwork, destinationAddress, smtProof, index, root)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyMerkleProof is a free data retrieval call binding the contract method 0x7d8f0469.
//
// Solidity: function verifyMerkleProof(address token, uint256 amount, uint32 originalNetwork, uint32 destinationNetwork, address destinationAddress, bytes32[] smtProof, uint64 index, bytes32 root) pure returns(bool)
func (_Bridge *BridgeSession) VerifyMerkleProof(token common.Address, amount *big.Int, originalNetwork uint32, destinationNetwork uint32, destinationAddress common.Address, smtProof [][32]byte, index uint64, root [32]byte) (bool, error) {
	return _Bridge.Contract.VerifyMerkleProof(&_Bridge.CallOpts, token, amount, originalNetwork, destinationNetwork, destinationAddress, smtProof, index, root)
}

// VerifyMerkleProof is a free data retrieval call binding the contract method 0x7d8f0469.
//
// Solidity: function verifyMerkleProof(address token, uint256 amount, uint32 originalNetwork, uint32 destinationNetwork, address destinationAddress, bytes32[] smtProof, uint64 index, bytes32 root) pure returns(bool)
func (_Bridge *BridgeCallerSession) VerifyMerkleProof(token common.Address, amount *big.Int, originalNetwork uint32, destinationNetwork uint32, destinationAddress common.Address, smtProof [][32]byte, index uint64, root [32]byte) (bool, error) {
	return _Bridge.Contract.VerifyMerkleProof(&_Bridge.CallOpts, token, amount, originalNetwork, destinationNetwork, destinationAddress, smtProof, index, root)
}

// Bridge is a paid mutator transaction binding the contract method 0x0e21fbd7.
//
// Solidity: function bridge(address token, uint256 amount, uint32 destinationNetwork, address destinationAddress) payable returns()
func (_Bridge *BridgeTransactor) Bridge(opts *bind.TransactOpts, token common.Address, amount *big.Int, destinationNetwork uint32, destinationAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "bridge", token, amount, destinationNetwork, destinationAddress)
}

// Bridge is a paid mutator transaction binding the contract method 0x0e21fbd7.
//
// Solidity: function bridge(address token, uint256 amount, uint32 destinationNetwork, address destinationAddress) payable returns()
func (_Bridge *BridgeSession) Bridge(token common.Address, amount *big.Int, destinationNetwork uint32, destinationAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.Bridge(&_Bridge.TransactOpts, token, amount, destinationNetwork, destinationAddress)
}

// Bridge is a paid mutator transaction binding the contract method 0x0e21fbd7.
//
// Solidity: function bridge(address token, uint256 amount, uint32 destinationNetwork, address destinationAddress) payable returns()
func (_Bridge *BridgeTransactorSession) Bridge(token common.Address, amount *big.Int, destinationNetwork uint32, destinationAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.Bridge(&_Bridge.TransactOpts, token, amount, destinationNetwork, destinationAddress)
}

// Claim is a paid mutator transaction binding the contract method 0x122650ff.
//
// Solidity: function claim(address originalTokenAddress, uint256 amount, uint32 originalNetwork, uint32 destinationNetwork, address destinationAddress, bytes32[] smtProof, uint32 index, uint256 globalExitRootNum, bytes32 mainnetExitRoot, bytes32 rollupExitRoot) returns()
func (_Bridge *BridgeTransactor) Claim(opts *bind.TransactOpts, originalTokenAddress common.Address, amount *big.Int, originalNetwork uint32, destinationNetwork uint32, destinationAddress common.Address, smtProof [][32]byte, index uint32, globalExitRootNum *big.Int, mainnetExitRoot [32]byte, rollupExitRoot [32]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "claim", originalTokenAddress, amount, originalNetwork, destinationNetwork, destinationAddress, smtProof, index, globalExitRootNum, mainnetExitRoot, rollupExitRoot)
}

// Claim is a paid mutator transaction binding the contract method 0x122650ff.
//
// Solidity: function claim(address originalTokenAddress, uint256 amount, uint32 originalNetwork, uint32 destinationNetwork, address destinationAddress, bytes32[] smtProof, uint32 index, uint256 globalExitRootNum, bytes32 mainnetExitRoot, bytes32 rollupExitRoot) returns()
func (_Bridge *BridgeSession) Claim(originalTokenAddress common.Address, amount *big.Int, originalNetwork uint32, destinationNetwork uint32, destinationAddress common.Address, smtProof [][32]byte, index uint32, globalExitRootNum *big.Int, mainnetExitRoot [32]byte, rollupExitRoot [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.Claim(&_Bridge.TransactOpts, originalTokenAddress, amount, originalNetwork, destinationNetwork, destinationAddress, smtProof, index, globalExitRootNum, mainnetExitRoot, rollupExitRoot)
}

// Claim is a paid mutator transaction binding the contract method 0x122650ff.
//
// Solidity: function claim(address originalTokenAddress, uint256 amount, uint32 originalNetwork, uint32 destinationNetwork, address destinationAddress, bytes32[] smtProof, uint32 index, uint256 globalExitRootNum, bytes32 mainnetExitRoot, bytes32 rollupExitRoot) returns()
func (_Bridge *BridgeTransactorSession) Claim(originalTokenAddress common.Address, amount *big.Int, originalNetwork uint32, destinationNetwork uint32, destinationAddress common.Address, smtProof [][32]byte, index uint32, globalExitRootNum *big.Int, mainnetExitRoot [32]byte, rollupExitRoot [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.Claim(&_Bridge.TransactOpts, originalTokenAddress, amount, originalNetwork, destinationNetwork, destinationAddress, smtProof, index, globalExitRootNum, mainnetExitRoot, rollupExitRoot)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bridge.Contract.RenounceOwnership(&_Bridge.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bridge.Contract.RenounceOwnership(&_Bridge.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOwnership(&_Bridge.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOwnership(&_Bridge.TransactOpts, newOwner)
}

// BridgeBridgeEventIterator is returned from FilterBridgeEvent and is used to iterate over the raw logs and unpacked data for BridgeEvent events raised by the Bridge contract.
type BridgeBridgeEventIterator struct {
	Event *BridgeBridgeEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeBridgeEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeBridgeEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeBridgeEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeBridgeEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeBridgeEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeBridgeEvent represents a BridgeEvent event raised by the Bridge contract.
type BridgeBridgeEvent struct {
	TokenAddres        common.Address
	Amount             *big.Int
	OriginNetwork      uint32
	DestinationNetwork uint32
	DestinationAddress common.Address
	DepositCount       uint32
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterBridgeEvent is a free log retrieval operation binding the contract event 0xb9cc79b4411bd33ec9620f8fe3d6236a5d18050ca48e991864dc0556a83d1a2b.
//
// Solidity: event BridgeEvent(address tokenAddres, uint256 amount, uint32 originNetwork, uint32 destinationNetwork, address destinationAddress, uint32 depositCount)
func (_Bridge *BridgeFilterer) FilterBridgeEvent(opts *bind.FilterOpts) (*BridgeBridgeEventIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "BridgeEvent")
	if err != nil {
		return nil, err
	}
	return &BridgeBridgeEventIterator{contract: _Bridge.contract, event: "BridgeEvent", logs: logs, sub: sub}, nil
}

// WatchBridgeEvent is a free log subscription operation binding the contract event 0xb9cc79b4411bd33ec9620f8fe3d6236a5d18050ca48e991864dc0556a83d1a2b.
//
// Solidity: event BridgeEvent(address tokenAddres, uint256 amount, uint32 originNetwork, uint32 destinationNetwork, address destinationAddress, uint32 depositCount)
func (_Bridge *BridgeFilterer) WatchBridgeEvent(opts *bind.WatchOpts, sink chan<- *BridgeBridgeEvent) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "BridgeEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeBridgeEvent)
				if err := _Bridge.contract.UnpackLog(event, "BridgeEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeEvent is a log parse operation binding the contract event 0xb9cc79b4411bd33ec9620f8fe3d6236a5d18050ca48e991864dc0556a83d1a2b.
//
// Solidity: event BridgeEvent(address tokenAddres, uint256 amount, uint32 originNetwork, uint32 destinationNetwork, address destinationAddress, uint32 depositCount)
func (_Bridge *BridgeFilterer) ParseBridgeEvent(log types.Log) (*BridgeBridgeEvent, error) {
	event := new(BridgeBridgeEvent)
	if err := _Bridge.contract.UnpackLog(event, "BridgeEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeClaimEventIterator is returned from FilterClaimEvent and is used to iterate over the raw logs and unpacked data for ClaimEvent events raised by the Bridge contract.
type BridgeClaimEventIterator struct {
	Event *BridgeClaimEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeClaimEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeClaimEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeClaimEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeClaimEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeClaimEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeClaimEvent represents a ClaimEvent event raised by the Bridge contract.
type BridgeClaimEvent struct {
	Index              uint32
	OriginalNetwork    uint32
	Token              common.Address
	Amount             *big.Int
	DestinationAddress common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterClaimEvent is a free log retrieval operation binding the contract event 0x6aec77db51699eb95c99cdf3d230d727c40d03cc47ade310b68e3c4185b90e72.
//
// Solidity: event ClaimEvent(uint32 index, uint32 originalNetwork, address token, uint256 amount, address destinationAddress)
func (_Bridge *BridgeFilterer) FilterClaimEvent(opts *bind.FilterOpts) (*BridgeClaimEventIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ClaimEvent")
	if err != nil {
		return nil, err
	}
	return &BridgeClaimEventIterator{contract: _Bridge.contract, event: "ClaimEvent", logs: logs, sub: sub}, nil
}

// WatchClaimEvent is a free log subscription operation binding the contract event 0x6aec77db51699eb95c99cdf3d230d727c40d03cc47ade310b68e3c4185b90e72.
//
// Solidity: event ClaimEvent(uint32 index, uint32 originalNetwork, address token, uint256 amount, address destinationAddress)
func (_Bridge *BridgeFilterer) WatchClaimEvent(opts *bind.WatchOpts, sink chan<- *BridgeClaimEvent) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ClaimEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeClaimEvent)
				if err := _Bridge.contract.UnpackLog(event, "ClaimEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimEvent is a log parse operation binding the contract event 0x6aec77db51699eb95c99cdf3d230d727c40d03cc47ade310b68e3c4185b90e72.
//
// Solidity: event ClaimEvent(uint32 index, uint32 originalNetwork, address token, uint256 amount, address destinationAddress)
func (_Bridge *BridgeFilterer) ParseClaimEvent(log types.Log) (*BridgeClaimEvent, error) {
	event := new(BridgeClaimEvent)
	if err := _Bridge.contract.UnpackLog(event, "ClaimEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeNewWrappedTokenIterator is returned from FilterNewWrappedToken and is used to iterate over the raw logs and unpacked data for NewWrappedToken events raised by the Bridge contract.
type BridgeNewWrappedTokenIterator struct {
	Event *BridgeNewWrappedToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeNewWrappedTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeNewWrappedToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeNewWrappedToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeNewWrappedTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeNewWrappedTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeNewWrappedToken represents a NewWrappedToken event raised by the Bridge contract.
type BridgeNewWrappedToken struct {
	OriginalNetwork      uint32
	OriginalTokenAddress common.Address
	WrappedTokenAddress  common.Address
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterNewWrappedToken is a free log retrieval operation binding the contract event 0xccd7715648d1f2bb13e158f96b5b6c3aeda555d4cb87112e274a6f28bc571d59.
//
// Solidity: event NewWrappedToken(uint32 originalNetwork, address originalTokenAddress, address wrappedTokenAddress)
func (_Bridge *BridgeFilterer) FilterNewWrappedToken(opts *bind.FilterOpts) (*BridgeNewWrappedTokenIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "NewWrappedToken")
	if err != nil {
		return nil, err
	}
	return &BridgeNewWrappedTokenIterator{contract: _Bridge.contract, event: "NewWrappedToken", logs: logs, sub: sub}, nil
}

// WatchNewWrappedToken is a free log subscription operation binding the contract event 0xccd7715648d1f2bb13e158f96b5b6c3aeda555d4cb87112e274a6f28bc571d59.
//
// Solidity: event NewWrappedToken(uint32 originalNetwork, address originalTokenAddress, address wrappedTokenAddress)
func (_Bridge *BridgeFilterer) WatchNewWrappedToken(opts *bind.WatchOpts, sink chan<- *BridgeNewWrappedToken) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "NewWrappedToken")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeNewWrappedToken)
				if err := _Bridge.contract.UnpackLog(event, "NewWrappedToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewWrappedToken is a log parse operation binding the contract event 0xccd7715648d1f2bb13e158f96b5b6c3aeda555d4cb87112e274a6f28bc571d59.
//
// Solidity: event NewWrappedToken(uint32 originalNetwork, address originalTokenAddress, address wrappedTokenAddress)
func (_Bridge *BridgeFilterer) ParseNewWrappedToken(log types.Log) (*BridgeNewWrappedToken, error) {
	event := new(BridgeNewWrappedToken)
	if err := _Bridge.contract.UnpackLog(event, "NewWrappedToken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Bridge contract.
type BridgeOwnershipTransferredIterator struct {
	Event *BridgeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeOwnershipTransferred represents a OwnershipTransferred event raised by the Bridge contract.
type BridgeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BridgeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeOwnershipTransferredIterator{contract: _Bridge.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BridgeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeOwnershipTransferred)
				if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) ParseOwnershipTransferred(log types.Log) (*BridgeOwnershipTransferred, error) {
	event := new(BridgeOwnershipTransferred)
	if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
