// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pb "github.com/0xPolygonHermez/zkevm-node/proverclient/pb"
	mock "github.com/stretchr/testify/mock"
)

// ProverClientMock is an autogenerated mock type for the proverClientInterface type
type ProverClientMock struct {
	mock.Mock
}

// GetGenProofID provides a mock function with given fields: ctx, inputProver
func (_m *ProverClientMock) GetGenProofID(ctx context.Context, inputProver *pb.InputProver) (string, error) {
	ret := _m.Called(ctx, inputProver)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *pb.InputProver) string); ok {
		r0 = rf(ctx, inputProver)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.InputProver) error); ok {
		r1 = rf(ctx, inputProver)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResGetProof provides a mock function with given fields: ctx, genProofID, batchNumber
func (_m *ProverClientMock) GetResGetProof(ctx context.Context, genProofID string, batchNumber uint64) (*pb.GetProofResponse, error) {
	ret := _m.Called(ctx, genProofID, batchNumber)

	var r0 *pb.GetProofResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) *pb.GetProofResponse); ok {
		r0 = rf(ctx, genProofID, batchNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetProofResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, uint64) error); ok {
		r1 = rf(ctx, genProofID, batchNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetURI provides a mock function with given fields:
func (_m *ProverClientMock) GetURI() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsIdle provides a mock function with given fields: ctx
func (_m *ProverClientMock) IsIdle(ctx context.Context) bool {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewProverClientMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewProverClientMock creates a new instance of ProverClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProverClientMock(t mockConstructorTestingTNewProverClientMock) *ProverClientMock {
	mock := &ProverClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
