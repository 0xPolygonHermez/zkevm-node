// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	ethtxmanager "github.com/0xPolygonHermez/zkevm-node/ethtxmanager"

	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v4"

	types "github.com/0xPolygonHermez/zkevm-node/etherman/types"
)

// EthTxManager is an autogenerated mock type for the ethTxManager type
type EthTxManager struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, owner, id, from, to, value, data, dbTx
func (_m *EthTxManager) Add(ctx context.Context, owner string, id string, from common.Address, to *common.Address, value *big.Int, data []byte, dbTx pgx.Tx) error {
	ret := _m.Called(ctx, owner, id, from, to, value, data, dbTx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, common.Address, *common.Address, *big.Int, []byte, pgx.Tx) error); ok {
		r0 = rf(ctx, owner, id, from, to, value, data, dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ManageTxs provides a mock function with given fields:
func (_m *EthTxManager) ManageTxs() {
	_m.Called()
}

// Result provides a mock function with given fields: ctx, owner, id, dbTx
func (_m *EthTxManager) Result(ctx context.Context, owner string, id string, dbTx pgx.Tx) (ethtxmanager.MonitoredTxResult, error) {
	ret := _m.Called(ctx, owner, id, dbTx)

	var r0 ethtxmanager.MonitoredTxResult
	if rf, ok := ret.Get(0).(func(context.Context, string, string, pgx.Tx) ethtxmanager.MonitoredTxResult); ok {
		r0 = rf(ctx, owner, id, dbTx)
	} else {
		r0 = ret.Get(0).(ethtxmanager.MonitoredTxResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, pgx.Tx) error); ok {
		r1 = rf(ctx, owner, id, dbTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetStatusDone provides a mock function with given fields: ctx, owner, id, dbTx
func (_m *EthTxManager) SetStatusDone(ctx context.Context, owner string, id string, dbTx pgx.Tx) error {
	ret := _m.Called(ctx, owner, id, dbTx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, pgx.Tx) error); ok {
		r0 = rf(ctx, owner, id, dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyBatches provides a mock function with given fields: ctx, lastVerifiedBatch, batchNum, inputs
func (_m *EthTxManager) VerifyBatches(ctx context.Context, lastVerifiedBatch uint64, batchNum uint64, inputs *types.FinalProofInputs) error {
	ret := _m.Called(ctx, lastVerifiedBatch, batchNum, inputs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64, *types.FinalProofInputs) error); ok {
		r0 = rf(ctx, lastVerifiedBatch, batchNum, inputs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewEthTxManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewEthTxManager creates a new instance of EthTxManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEthTxManager(t mockConstructorTestingTNewEthTxManager) *EthTxManager {
	mock := &EthTxManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
