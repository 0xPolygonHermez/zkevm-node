// Code generated by mockery. DO NOT EDIT.

package synchronizer

import (
	context "context"
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	etherman "github.com/0xPolygonHermez/zkevm-node/etherman"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// ethermanMock is an autogenerated mock type for the EthermanInterface type
type ethermanMock struct {
	mock.Mock
}

type ethermanMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ethermanMock) EXPECT() *ethermanMock_Expecter {
	return &ethermanMock_Expecter{mock: &_m.Mock}
}

// EthBlockByNumber provides a mock function with given fields: ctx, blockNumber
func (_m *ethermanMock) EthBlockByNumber(ctx context.Context, blockNumber uint64) (*types.Block, error) {
	ret := _m.Called(ctx, blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for EthBlockByNumber")
	}

	var r0 *types.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*types.Block, error)); ok {
		return rf(ctx, blockNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *types.Block); ok {
		r0 = rf(ctx, blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ethermanMock_EthBlockByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EthBlockByNumber'
type ethermanMock_EthBlockByNumber_Call struct {
	*mock.Call
}

// EthBlockByNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - blockNumber uint64
func (_e *ethermanMock_Expecter) EthBlockByNumber(ctx interface{}, blockNumber interface{}) *ethermanMock_EthBlockByNumber_Call {
	return &ethermanMock_EthBlockByNumber_Call{Call: _e.mock.On("EthBlockByNumber", ctx, blockNumber)}
}

func (_c *ethermanMock_EthBlockByNumber_Call) Run(run func(ctx context.Context, blockNumber uint64)) *ethermanMock_EthBlockByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *ethermanMock_EthBlockByNumber_Call) Return(_a0 *types.Block, _a1 error) *ethermanMock_EthBlockByNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ethermanMock_EthBlockByNumber_Call) RunAndReturn(run func(context.Context, uint64) (*types.Block, error)) *ethermanMock_EthBlockByNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBatchNumber provides a mock function with given fields:
func (_m *ethermanMock) GetLatestBatchNumber() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBatchNumber")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ethermanMock_GetLatestBatchNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBatchNumber'
type ethermanMock_GetLatestBatchNumber_Call struct {
	*mock.Call
}

// GetLatestBatchNumber is a helper method to define mock.On call
func (_e *ethermanMock_Expecter) GetLatestBatchNumber() *ethermanMock_GetLatestBatchNumber_Call {
	return &ethermanMock_GetLatestBatchNumber_Call{Call: _e.mock.On("GetLatestBatchNumber")}
}

func (_c *ethermanMock_GetLatestBatchNumber_Call) Run(run func()) *ethermanMock_GetLatestBatchNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ethermanMock_GetLatestBatchNumber_Call) Return(_a0 uint64, _a1 error) *ethermanMock_GetLatestBatchNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ethermanMock_GetLatestBatchNumber_Call) RunAndReturn(run func() (uint64, error)) *ethermanMock_GetLatestBatchNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestVerifiedBatchNum provides a mock function with given fields:
func (_m *ethermanMock) GetLatestVerifiedBatchNum() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLatestVerifiedBatchNum")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ethermanMock_GetLatestVerifiedBatchNum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestVerifiedBatchNum'
type ethermanMock_GetLatestVerifiedBatchNum_Call struct {
	*mock.Call
}

// GetLatestVerifiedBatchNum is a helper method to define mock.On call
func (_e *ethermanMock_Expecter) GetLatestVerifiedBatchNum() *ethermanMock_GetLatestVerifiedBatchNum_Call {
	return &ethermanMock_GetLatestVerifiedBatchNum_Call{Call: _e.mock.On("GetLatestVerifiedBatchNum")}
}

func (_c *ethermanMock_GetLatestVerifiedBatchNum_Call) Run(run func()) *ethermanMock_GetLatestVerifiedBatchNum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ethermanMock_GetLatestVerifiedBatchNum_Call) Return(_a0 uint64, _a1 error) *ethermanMock_GetLatestVerifiedBatchNum_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ethermanMock_GetLatestVerifiedBatchNum_Call) RunAndReturn(run func() (uint64, error)) *ethermanMock_GetLatestVerifiedBatchNum_Call {
	_c.Call.Return(run)
	return _c
}

// GetRollupInfoByBlockRange provides a mock function with given fields: ctx, fromBlock, toBlock
func (_m *ethermanMock) GetRollupInfoByBlockRange(ctx context.Context, fromBlock uint64, toBlock *uint64) ([]etherman.Block, map[common.Hash][]etherman.Order, error) {
	ret := _m.Called(ctx, fromBlock, toBlock)

	if len(ret) == 0 {
		panic("no return value specified for GetRollupInfoByBlockRange")
	}

	var r0 []etherman.Block
	var r1 map[common.Hash][]etherman.Order
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *uint64) ([]etherman.Block, map[common.Hash][]etherman.Order, error)); ok {
		return rf(ctx, fromBlock, toBlock)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *uint64) []etherman.Block); ok {
		r0 = rf(ctx, fromBlock, toBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]etherman.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, *uint64) map[common.Hash][]etherman.Order); ok {
		r1 = rf(ctx, fromBlock, toBlock)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[common.Hash][]etherman.Order)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint64, *uint64) error); ok {
		r2 = rf(ctx, fromBlock, toBlock)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ethermanMock_GetRollupInfoByBlockRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRollupInfoByBlockRange'
type ethermanMock_GetRollupInfoByBlockRange_Call struct {
	*mock.Call
}

// GetRollupInfoByBlockRange is a helper method to define mock.On call
//   - ctx context.Context
//   - fromBlock uint64
//   - toBlock *uint64
func (_e *ethermanMock_Expecter) GetRollupInfoByBlockRange(ctx interface{}, fromBlock interface{}, toBlock interface{}) *ethermanMock_GetRollupInfoByBlockRange_Call {
	return &ethermanMock_GetRollupInfoByBlockRange_Call{Call: _e.mock.On("GetRollupInfoByBlockRange", ctx, fromBlock, toBlock)}
}

func (_c *ethermanMock_GetRollupInfoByBlockRange_Call) Run(run func(ctx context.Context, fromBlock uint64, toBlock *uint64)) *ethermanMock_GetRollupInfoByBlockRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(*uint64))
	})
	return _c
}

func (_c *ethermanMock_GetRollupInfoByBlockRange_Call) Return(_a0 []etherman.Block, _a1 map[common.Hash][]etherman.Order, _a2 error) *ethermanMock_GetRollupInfoByBlockRange_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ethermanMock_GetRollupInfoByBlockRange_Call) RunAndReturn(run func(context.Context, uint64, *uint64) ([]etherman.Block, map[common.Hash][]etherman.Order, error)) *ethermanMock_GetRollupInfoByBlockRange_Call {
	_c.Call.Return(run)
	return _c
}

// GetTrustedSequencerURL provides a mock function with given fields:
func (_m *ethermanMock) GetTrustedSequencerURL() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTrustedSequencerURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ethermanMock_GetTrustedSequencerURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrustedSequencerURL'
type ethermanMock_GetTrustedSequencerURL_Call struct {
	*mock.Call
}

// GetTrustedSequencerURL is a helper method to define mock.On call
func (_e *ethermanMock_Expecter) GetTrustedSequencerURL() *ethermanMock_GetTrustedSequencerURL_Call {
	return &ethermanMock_GetTrustedSequencerURL_Call{Call: _e.mock.On("GetTrustedSequencerURL")}
}

func (_c *ethermanMock_GetTrustedSequencerURL_Call) Run(run func()) *ethermanMock_GetTrustedSequencerURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ethermanMock_GetTrustedSequencerURL_Call) Return(_a0 string, _a1 error) *ethermanMock_GetTrustedSequencerURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ethermanMock_GetTrustedSequencerURL_Call) RunAndReturn(run func() (string, error)) *ethermanMock_GetTrustedSequencerURL_Call {
	_c.Call.Return(run)
	return _c
}

// HeaderByNumber provides a mock function with given fields: ctx, number
func (_m *ethermanMock) HeaderByNumber(ctx context.Context, number *big.Int) (*types.Header, error) {
	ret := _m.Called(ctx, number)

	if len(ret) == 0 {
		panic("no return value specified for HeaderByNumber")
	}

	var r0 *types.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) (*types.Header, error)); ok {
		return rf(ctx, number)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) *types.Header); ok {
		r0 = rf(ctx, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *big.Int) error); ok {
		r1 = rf(ctx, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ethermanMock_HeaderByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeaderByNumber'
type ethermanMock_HeaderByNumber_Call struct {
	*mock.Call
}

// HeaderByNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - number *big.Int
func (_e *ethermanMock_Expecter) HeaderByNumber(ctx interface{}, number interface{}) *ethermanMock_HeaderByNumber_Call {
	return &ethermanMock_HeaderByNumber_Call{Call: _e.mock.On("HeaderByNumber", ctx, number)}
}

func (_c *ethermanMock_HeaderByNumber_Call) Run(run func(ctx context.Context, number *big.Int)) *ethermanMock_HeaderByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*big.Int))
	})
	return _c
}

func (_c *ethermanMock_HeaderByNumber_Call) Return(_a0 *types.Header, _a1 error) *ethermanMock_HeaderByNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ethermanMock_HeaderByNumber_Call) RunAndReturn(run func(context.Context, *big.Int) (*types.Header, error)) *ethermanMock_HeaderByNumber_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyGenBlockNumber provides a mock function with given fields: ctx, genBlockNumber
func (_m *ethermanMock) VerifyGenBlockNumber(ctx context.Context, genBlockNumber uint64) (bool, error) {
	ret := _m.Called(ctx, genBlockNumber)

	if len(ret) == 0 {
		panic("no return value specified for VerifyGenBlockNumber")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (bool, error)); ok {
		return rf(ctx, genBlockNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) bool); ok {
		r0 = rf(ctx, genBlockNumber)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, genBlockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ethermanMock_VerifyGenBlockNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyGenBlockNumber'
type ethermanMock_VerifyGenBlockNumber_Call struct {
	*mock.Call
}

// VerifyGenBlockNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - genBlockNumber uint64
func (_e *ethermanMock_Expecter) VerifyGenBlockNumber(ctx interface{}, genBlockNumber interface{}) *ethermanMock_VerifyGenBlockNumber_Call {
	return &ethermanMock_VerifyGenBlockNumber_Call{Call: _e.mock.On("VerifyGenBlockNumber", ctx, genBlockNumber)}
}

func (_c *ethermanMock_VerifyGenBlockNumber_Call) Run(run func(ctx context.Context, genBlockNumber uint64)) *ethermanMock_VerifyGenBlockNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *ethermanMock_VerifyGenBlockNumber_Call) Return(_a0 bool, _a1 error) *ethermanMock_VerifyGenBlockNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ethermanMock_VerifyGenBlockNumber_Call) RunAndReturn(run func(context.Context, uint64) (bool, error)) *ethermanMock_VerifyGenBlockNumber_Call {
	_c.Call.Return(run)
	return _c
}

// newEthermanMock creates a new instance of ethermanMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newEthermanMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ethermanMock {
	mock := &ethermanMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
