// Code generated by mockery. DO NOT EDIT.

package mock_syncinterfaces

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SyncTrustedStateExecutor is an autogenerated mock type for the SyncTrustedStateExecutor type
type SyncTrustedStateExecutor struct {
	mock.Mock
}

type SyncTrustedStateExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *SyncTrustedStateExecutor) EXPECT() *SyncTrustedStateExecutor_Expecter {
	return &SyncTrustedStateExecutor_Expecter{mock: &_m.Mock}
}

// CleanTrustedState provides a mock function with given fields:
func (_m *SyncTrustedStateExecutor) CleanTrustedState() {
	_m.Called()
}

// SyncTrustedStateExecutor_CleanTrustedState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanTrustedState'
type SyncTrustedStateExecutor_CleanTrustedState_Call struct {
	*mock.Call
}

// CleanTrustedState is a helper method to define mock.On call
func (_e *SyncTrustedStateExecutor_Expecter) CleanTrustedState() *SyncTrustedStateExecutor_CleanTrustedState_Call {
	return &SyncTrustedStateExecutor_CleanTrustedState_Call{Call: _e.mock.On("CleanTrustedState")}
}

func (_c *SyncTrustedStateExecutor_CleanTrustedState_Call) Run(run func()) *SyncTrustedStateExecutor_CleanTrustedState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SyncTrustedStateExecutor_CleanTrustedState_Call) Return() *SyncTrustedStateExecutor_CleanTrustedState_Call {
	_c.Call.Return()
	return _c
}

func (_c *SyncTrustedStateExecutor_CleanTrustedState_Call) RunAndReturn(run func()) *SyncTrustedStateExecutor_CleanTrustedState_Call {
	_c.Call.Return(run)
	return _c
}

// SyncTrustedState provides a mock function with given fields: ctx, latestSyncedBatch
func (_m *SyncTrustedStateExecutor) SyncTrustedState(ctx context.Context, latestSyncedBatch uint64) error {
	ret := _m.Called(ctx, latestSyncedBatch)

	if len(ret) == 0 {
		panic("no return value specified for SyncTrustedState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, latestSyncedBatch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SyncTrustedStateExecutor_SyncTrustedState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncTrustedState'
type SyncTrustedStateExecutor_SyncTrustedState_Call struct {
	*mock.Call
}

// SyncTrustedState is a helper method to define mock.On call
//   - ctx context.Context
//   - latestSyncedBatch uint64
func (_e *SyncTrustedStateExecutor_Expecter) SyncTrustedState(ctx interface{}, latestSyncedBatch interface{}) *SyncTrustedStateExecutor_SyncTrustedState_Call {
	return &SyncTrustedStateExecutor_SyncTrustedState_Call{Call: _e.mock.On("SyncTrustedState", ctx, latestSyncedBatch)}
}

func (_c *SyncTrustedStateExecutor_SyncTrustedState_Call) Run(run func(ctx context.Context, latestSyncedBatch uint64)) *SyncTrustedStateExecutor_SyncTrustedState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *SyncTrustedStateExecutor_SyncTrustedState_Call) Return(_a0 error) *SyncTrustedStateExecutor_SyncTrustedState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SyncTrustedStateExecutor_SyncTrustedState_Call) RunAndReturn(run func(context.Context, uint64) error) *SyncTrustedStateExecutor_SyncTrustedState_Call {
	_c.Call.Return(run)
	return _c
}

// NewSyncTrustedStateExecutor creates a new instance of SyncTrustedStateExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSyncTrustedStateExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *SyncTrustedStateExecutor {
	mock := &SyncTrustedStateExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
