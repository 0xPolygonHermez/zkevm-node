// Code generated by mockery. DO NOT EDIT.

package mock_syncinterfaces

import (
	pgx "github.com/jackc/pgx/v4"
	mock "github.com/stretchr/testify/mock"
)

// SynchronizerFlushIDManager is an autogenerated mock type for the SynchronizerFlushIDManager type
type SynchronizerFlushIDManager struct {
	mock.Mock
}

type SynchronizerFlushIDManager_Expecter struct {
	mock *mock.Mock
}

func (_m *SynchronizerFlushIDManager) EXPECT() *SynchronizerFlushIDManager_Expecter {
	return &SynchronizerFlushIDManager_Expecter{mock: &_m.Mock}
}

// CheckFlushID provides a mock function with given fields: dbTx
func (_m *SynchronizerFlushIDManager) CheckFlushID(dbTx pgx.Tx) error {
	ret := _m.Called(dbTx)

	if len(ret) == 0 {
		panic("no return value specified for CheckFlushID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(pgx.Tx) error); ok {
		r0 = rf(dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SynchronizerFlushIDManager_CheckFlushID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckFlushID'
type SynchronizerFlushIDManager_CheckFlushID_Call struct {
	*mock.Call
}

// CheckFlushID is a helper method to define mock.On call
//   - dbTx pgx.Tx
func (_e *SynchronizerFlushIDManager_Expecter) CheckFlushID(dbTx interface{}) *SynchronizerFlushIDManager_CheckFlushID_Call {
	return &SynchronizerFlushIDManager_CheckFlushID_Call{Call: _e.mock.On("CheckFlushID", dbTx)}
}

func (_c *SynchronizerFlushIDManager_CheckFlushID_Call) Run(run func(dbTx pgx.Tx)) *SynchronizerFlushIDManager_CheckFlushID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pgx.Tx))
	})
	return _c
}

func (_c *SynchronizerFlushIDManager_CheckFlushID_Call) Return(_a0 error) *SynchronizerFlushIDManager_CheckFlushID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SynchronizerFlushIDManager_CheckFlushID_Call) RunAndReturn(run func(pgx.Tx) error) *SynchronizerFlushIDManager_CheckFlushID_Call {
	_c.Call.Return(run)
	return _c
}

// PendingFlushID provides a mock function with given fields: flushID, proverID
func (_m *SynchronizerFlushIDManager) PendingFlushID(flushID uint64, proverID string) {
	_m.Called(flushID, proverID)
}

// SynchronizerFlushIDManager_PendingFlushID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PendingFlushID'
type SynchronizerFlushIDManager_PendingFlushID_Call struct {
	*mock.Call
}

// PendingFlushID is a helper method to define mock.On call
//   - flushID uint64
//   - proverID string
func (_e *SynchronizerFlushIDManager_Expecter) PendingFlushID(flushID interface{}, proverID interface{}) *SynchronizerFlushIDManager_PendingFlushID_Call {
	return &SynchronizerFlushIDManager_PendingFlushID_Call{Call: _e.mock.On("PendingFlushID", flushID, proverID)}
}

func (_c *SynchronizerFlushIDManager_PendingFlushID_Call) Run(run func(flushID uint64, proverID string)) *SynchronizerFlushIDManager_PendingFlushID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(string))
	})
	return _c
}

func (_c *SynchronizerFlushIDManager_PendingFlushID_Call) Return() *SynchronizerFlushIDManager_PendingFlushID_Call {
	_c.Call.Return()
	return _c
}

func (_c *SynchronizerFlushIDManager_PendingFlushID_Call) RunAndReturn(run func(uint64, string)) *SynchronizerFlushIDManager_PendingFlushID_Call {
	_c.Call.Return(run)
	return _c
}

// NewSynchronizerFlushIDManager creates a new instance of SynchronizerFlushIDManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSynchronizerFlushIDManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *SynchronizerFlushIDManager {
	mock := &SynchronizerFlushIDManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
