// Code generated by mockery. DO NOT EDIT.

package mock_syncinterfaces

import (
	context "context"

	actions "github.com/0xPolygonHermez/zkevm-node/synchronizer/actions"

	etherman "github.com/0xPolygonHermez/zkevm-node/etherman"

	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v4"
)

// L1EventProcessorManager is an autogenerated mock type for the L1EventProcessorManager type
type L1EventProcessorManager struct {
	mock.Mock
}

type L1EventProcessorManager_Expecter struct {
	mock *mock.Mock
}

func (_m *L1EventProcessorManager) EXPECT() *L1EventProcessorManager_Expecter {
	return &L1EventProcessorManager_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: forkId, event
func (_m *L1EventProcessorManager) Get(forkId actions.ForkIdType, event etherman.EventOrder) actions.L1EventProcessor {
	ret := _m.Called(forkId, event)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 actions.L1EventProcessor
	if rf, ok := ret.Get(0).(func(actions.ForkIdType, etherman.EventOrder) actions.L1EventProcessor); ok {
		r0 = rf(forkId, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(actions.L1EventProcessor)
		}
	}

	return r0
}

// L1EventProcessorManager_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type L1EventProcessorManager_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - forkId actions.ForkIdType
//   - event etherman.EventOrder
func (_e *L1EventProcessorManager_Expecter) Get(forkId interface{}, event interface{}) *L1EventProcessorManager_Get_Call {
	return &L1EventProcessorManager_Get_Call{Call: _e.mock.On("Get", forkId, event)}
}

func (_c *L1EventProcessorManager_Get_Call) Run(run func(forkId actions.ForkIdType, event etherman.EventOrder)) *L1EventProcessorManager_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(actions.ForkIdType), args[1].(etherman.EventOrder))
	})
	return _c
}

func (_c *L1EventProcessorManager_Get_Call) Return(_a0 actions.L1EventProcessor) *L1EventProcessorManager_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *L1EventProcessorManager_Get_Call) RunAndReturn(run func(actions.ForkIdType, etherman.EventOrder) actions.L1EventProcessor) *L1EventProcessorManager_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function with given fields: ctx, forkId, order, block, dbTx
func (_m *L1EventProcessorManager) Process(ctx context.Context, forkId actions.ForkIdType, order etherman.Order, block *etherman.Block, dbTx pgx.Tx) error {
	ret := _m.Called(ctx, forkId, order, block, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, actions.ForkIdType, etherman.Order, *etherman.Block, pgx.Tx) error); ok {
		r0 = rf(ctx, forkId, order, block, dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// L1EventProcessorManager_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type L1EventProcessorManager_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - ctx context.Context
//   - forkId actions.ForkIdType
//   - order etherman.Order
//   - block *etherman.Block
//   - dbTx pgx.Tx
func (_e *L1EventProcessorManager_Expecter) Process(ctx interface{}, forkId interface{}, order interface{}, block interface{}, dbTx interface{}) *L1EventProcessorManager_Process_Call {
	return &L1EventProcessorManager_Process_Call{Call: _e.mock.On("Process", ctx, forkId, order, block, dbTx)}
}

func (_c *L1EventProcessorManager_Process_Call) Run(run func(ctx context.Context, forkId actions.ForkIdType, order etherman.Order, block *etherman.Block, dbTx pgx.Tx)) *L1EventProcessorManager_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(actions.ForkIdType), args[2].(etherman.Order), args[3].(*etherman.Block), args[4].(pgx.Tx))
	})
	return _c
}

func (_c *L1EventProcessorManager_Process_Call) Return(_a0 error) *L1EventProcessorManager_Process_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *L1EventProcessorManager_Process_Call) RunAndReturn(run func(context.Context, actions.ForkIdType, etherman.Order, *etherman.Block, pgx.Tx) error) *L1EventProcessorManager_Process_Call {
	_c.Call.Return(run)
	return _c
}

// NewL1EventProcessorManager creates a new instance of L1EventProcessorManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewL1EventProcessorManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *L1EventProcessorManager {
	mock := &L1EventProcessorManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
