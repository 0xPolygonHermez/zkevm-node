// Code generated by mockery. DO NOT EDIT.

package l1_parallel_sync

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// workersInterfaceMock is an autogenerated mock type for the workersInterface type
type workersInterfaceMock struct {
	mock.Mock
}

type workersInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *workersInterfaceMock) EXPECT() *workersInterfaceMock_Expecter {
	return &workersInterfaceMock_Expecter{mock: &_m.Mock}
}

// String provides a mock function with given fields:
func (_m *workersInterfaceMock) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// workersInterfaceMock_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type workersInterfaceMock_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *workersInterfaceMock_Expecter) String() *workersInterfaceMock_String_Call {
	return &workersInterfaceMock_String_Call{Call: _e.mock.On("String")}
}

func (_c *workersInterfaceMock_String_Call) Run(run func()) *workersInterfaceMock_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *workersInterfaceMock_String_Call) Return(_a0 string) *workersInterfaceMock_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *workersInterfaceMock_String_Call) RunAndReturn(run func() string) *workersInterfaceMock_String_Call {
	_c.Call.Return(run)
	return _c
}

// ToStringBrief provides a mock function with given fields:
func (_m *workersInterfaceMock) ToStringBrief() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ToStringBrief")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// workersInterfaceMock_ToStringBrief_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToStringBrief'
type workersInterfaceMock_ToStringBrief_Call struct {
	*mock.Call
}

// ToStringBrief is a helper method to define mock.On call
func (_e *workersInterfaceMock_Expecter) ToStringBrief() *workersInterfaceMock_ToStringBrief_Call {
	return &workersInterfaceMock_ToStringBrief_Call{Call: _e.mock.On("ToStringBrief")}
}

func (_c *workersInterfaceMock_ToStringBrief_Call) Run(run func()) *workersInterfaceMock_ToStringBrief_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *workersInterfaceMock_ToStringBrief_Call) Return(_a0 string) *workersInterfaceMock_ToStringBrief_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *workersInterfaceMock_ToStringBrief_Call) RunAndReturn(run func() string) *workersInterfaceMock_ToStringBrief_Call {
	_c.Call.Return(run)
	return _c
}

// asyncRequestRollupInfoByBlockRange provides a mock function with given fields: ctx, request
func (_m *workersInterfaceMock) asyncRequestRollupInfoByBlockRange(ctx context.Context, request requestRollupInfoByBlockRange) (chan responseRollupInfoByBlockRange, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for asyncRequestRollupInfoByBlockRange")
	}

	var r0 chan responseRollupInfoByBlockRange
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, requestRollupInfoByBlockRange) (chan responseRollupInfoByBlockRange, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, requestRollupInfoByBlockRange) chan responseRollupInfoByBlockRange); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan responseRollupInfoByBlockRange)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, requestRollupInfoByBlockRange) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// workersInterfaceMock_asyncRequestRollupInfoByBlockRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'asyncRequestRollupInfoByBlockRange'
type workersInterfaceMock_asyncRequestRollupInfoByBlockRange_Call struct {
	*mock.Call
}

// asyncRequestRollupInfoByBlockRange is a helper method to define mock.On call
//   - ctx context.Context
//   - request requestRollupInfoByBlockRange
func (_e *workersInterfaceMock_Expecter) asyncRequestRollupInfoByBlockRange(ctx interface{}, request interface{}) *workersInterfaceMock_asyncRequestRollupInfoByBlockRange_Call {
	return &workersInterfaceMock_asyncRequestRollupInfoByBlockRange_Call{Call: _e.mock.On("asyncRequestRollupInfoByBlockRange", ctx, request)}
}

func (_c *workersInterfaceMock_asyncRequestRollupInfoByBlockRange_Call) Run(run func(ctx context.Context, request requestRollupInfoByBlockRange)) *workersInterfaceMock_asyncRequestRollupInfoByBlockRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(requestRollupInfoByBlockRange))
	})
	return _c
}

func (_c *workersInterfaceMock_asyncRequestRollupInfoByBlockRange_Call) Return(_a0 chan responseRollupInfoByBlockRange, _a1 error) *workersInterfaceMock_asyncRequestRollupInfoByBlockRange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *workersInterfaceMock_asyncRequestRollupInfoByBlockRange_Call) RunAndReturn(run func(context.Context, requestRollupInfoByBlockRange) (chan responseRollupInfoByBlockRange, error)) *workersInterfaceMock_asyncRequestRollupInfoByBlockRange_Call {
	_c.Call.Return(run)
	return _c
}

// getResponseChannelForRollupInfo provides a mock function with given fields:
func (_m *workersInterfaceMock) getResponseChannelForRollupInfo() chan responseRollupInfoByBlockRange {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getResponseChannelForRollupInfo")
	}

	var r0 chan responseRollupInfoByBlockRange
	if rf, ok := ret.Get(0).(func() chan responseRollupInfoByBlockRange); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan responseRollupInfoByBlockRange)
		}
	}

	return r0
}

// workersInterfaceMock_getResponseChannelForRollupInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getResponseChannelForRollupInfo'
type workersInterfaceMock_getResponseChannelForRollupInfo_Call struct {
	*mock.Call
}

// getResponseChannelForRollupInfo is a helper method to define mock.On call
func (_e *workersInterfaceMock_Expecter) getResponseChannelForRollupInfo() *workersInterfaceMock_getResponseChannelForRollupInfo_Call {
	return &workersInterfaceMock_getResponseChannelForRollupInfo_Call{Call: _e.mock.On("getResponseChannelForRollupInfo")}
}

func (_c *workersInterfaceMock_getResponseChannelForRollupInfo_Call) Run(run func()) *workersInterfaceMock_getResponseChannelForRollupInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *workersInterfaceMock_getResponseChannelForRollupInfo_Call) Return(_a0 chan responseRollupInfoByBlockRange) *workersInterfaceMock_getResponseChannelForRollupInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *workersInterfaceMock_getResponseChannelForRollupInfo_Call) RunAndReturn(run func() chan responseRollupInfoByBlockRange) *workersInterfaceMock_getResponseChannelForRollupInfo_Call {
	_c.Call.Return(run)
	return _c
}

// howManyRunningWorkers provides a mock function with given fields:
func (_m *workersInterfaceMock) howManyRunningWorkers() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for howManyRunningWorkers")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// workersInterfaceMock_howManyRunningWorkers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'howManyRunningWorkers'
type workersInterfaceMock_howManyRunningWorkers_Call struct {
	*mock.Call
}

// howManyRunningWorkers is a helper method to define mock.On call
func (_e *workersInterfaceMock_Expecter) howManyRunningWorkers() *workersInterfaceMock_howManyRunningWorkers_Call {
	return &workersInterfaceMock_howManyRunningWorkers_Call{Call: _e.mock.On("howManyRunningWorkers")}
}

func (_c *workersInterfaceMock_howManyRunningWorkers_Call) Run(run func()) *workersInterfaceMock_howManyRunningWorkers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *workersInterfaceMock_howManyRunningWorkers_Call) Return(_a0 int) *workersInterfaceMock_howManyRunningWorkers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *workersInterfaceMock_howManyRunningWorkers_Call) RunAndReturn(run func() int) *workersInterfaceMock_howManyRunningWorkers_Call {
	_c.Call.Return(run)
	return _c
}

// initialize provides a mock function with given fields:
func (_m *workersInterfaceMock) initialize() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for initialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// workersInterfaceMock_initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'initialize'
type workersInterfaceMock_initialize_Call struct {
	*mock.Call
}

// initialize is a helper method to define mock.On call
func (_e *workersInterfaceMock_Expecter) initialize() *workersInterfaceMock_initialize_Call {
	return &workersInterfaceMock_initialize_Call{Call: _e.mock.On("initialize")}
}

func (_c *workersInterfaceMock_initialize_Call) Run(run func()) *workersInterfaceMock_initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *workersInterfaceMock_initialize_Call) Return(_a0 error) *workersInterfaceMock_initialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *workersInterfaceMock_initialize_Call) RunAndReturn(run func() error) *workersInterfaceMock_initialize_Call {
	_c.Call.Return(run)
	return _c
}

// requestLastBlockWithRetries provides a mock function with given fields: ctx, timeout, maxPermittedRetries
func (_m *workersInterfaceMock) requestLastBlockWithRetries(ctx context.Context, timeout time.Duration, maxPermittedRetries int) responseL1LastBlock {
	ret := _m.Called(ctx, timeout, maxPermittedRetries)

	if len(ret) == 0 {
		panic("no return value specified for requestLastBlockWithRetries")
	}

	var r0 responseL1LastBlock
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, int) responseL1LastBlock); ok {
		r0 = rf(ctx, timeout, maxPermittedRetries)
	} else {
		r0 = ret.Get(0).(responseL1LastBlock)
	}

	return r0
}

// workersInterfaceMock_requestLastBlockWithRetries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'requestLastBlockWithRetries'
type workersInterfaceMock_requestLastBlockWithRetries_Call struct {
	*mock.Call
}

// requestLastBlockWithRetries is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
//   - maxPermittedRetries int
func (_e *workersInterfaceMock_Expecter) requestLastBlockWithRetries(ctx interface{}, timeout interface{}, maxPermittedRetries interface{}) *workersInterfaceMock_requestLastBlockWithRetries_Call {
	return &workersInterfaceMock_requestLastBlockWithRetries_Call{Call: _e.mock.On("requestLastBlockWithRetries", ctx, timeout, maxPermittedRetries)}
}

func (_c *workersInterfaceMock_requestLastBlockWithRetries_Call) Run(run func(ctx context.Context, timeout time.Duration, maxPermittedRetries int)) *workersInterfaceMock_requestLastBlockWithRetries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration), args[2].(int))
	})
	return _c
}

func (_c *workersInterfaceMock_requestLastBlockWithRetries_Call) Return(_a0 responseL1LastBlock) *workersInterfaceMock_requestLastBlockWithRetries_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *workersInterfaceMock_requestLastBlockWithRetries_Call) RunAndReturn(run func(context.Context, time.Duration, int) responseL1LastBlock) *workersInterfaceMock_requestLastBlockWithRetries_Call {
	_c.Call.Return(run)
	return _c
}

// stop provides a mock function with given fields:
func (_m *workersInterfaceMock) stop() {
	_m.Called()
}

// workersInterfaceMock_stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'stop'
type workersInterfaceMock_stop_Call struct {
	*mock.Call
}

// stop is a helper method to define mock.On call
func (_e *workersInterfaceMock_Expecter) stop() *workersInterfaceMock_stop_Call {
	return &workersInterfaceMock_stop_Call{Call: _e.mock.On("stop")}
}

func (_c *workersInterfaceMock_stop_Call) Run(run func()) *workersInterfaceMock_stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *workersInterfaceMock_stop_Call) Return() *workersInterfaceMock_stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *workersInterfaceMock_stop_Call) RunAndReturn(run func()) *workersInterfaceMock_stop_Call {
	_c.Call.Return(run)
	return _c
}

// waitFinishAllWorkers provides a mock function with given fields:
func (_m *workersInterfaceMock) waitFinishAllWorkers() {
	_m.Called()
}

// workersInterfaceMock_waitFinishAllWorkers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'waitFinishAllWorkers'
type workersInterfaceMock_waitFinishAllWorkers_Call struct {
	*mock.Call
}

// waitFinishAllWorkers is a helper method to define mock.On call
func (_e *workersInterfaceMock_Expecter) waitFinishAllWorkers() *workersInterfaceMock_waitFinishAllWorkers_Call {
	return &workersInterfaceMock_waitFinishAllWorkers_Call{Call: _e.mock.On("waitFinishAllWorkers")}
}

func (_c *workersInterfaceMock_waitFinishAllWorkers_Call) Run(run func()) *workersInterfaceMock_waitFinishAllWorkers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *workersInterfaceMock_waitFinishAllWorkers_Call) Return() *workersInterfaceMock_waitFinishAllWorkers_Call {
	_c.Call.Return()
	return _c
}

func (_c *workersInterfaceMock_waitFinishAllWorkers_Call) RunAndReturn(run func()) *workersInterfaceMock_waitFinishAllWorkers_Call {
	_c.Call.Return(run)
	return _c
}

// newWorkersInterfaceMock creates a new instance of workersInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newWorkersInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *workersInterfaceMock {
	mock := &workersInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
