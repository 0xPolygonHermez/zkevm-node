// Code generated by mockery v2.39.0. DO NOT EDIT.

package l1_parallel_sync

import (
	etherman "github.com/0xPolygonHermez/zkevm-node/etherman"
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"
)

// synchronizerProcessBlockRangeInterfaceMock is an autogenerated mock type for the synchronizerProcessBlockRangeInterface type
type synchronizerProcessBlockRangeInterfaceMock struct {
	mock.Mock
}

// ProcessBlockRange provides a mock function with given fields: blocks, order
func (_m *synchronizerProcessBlockRangeInterfaceMock) ProcessBlockRange(blocks []etherman.Block, order map[common.Hash][]etherman.Order) error {
	ret := _m.Called(blocks, order)

	if len(ret) == 0 {
		panic("no return value specified for ProcessBlockRange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]etherman.Block, map[common.Hash][]etherman.Order) error); ok {
		r0 = rf(blocks, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newSynchronizerProcessBlockRangeInterfaceMock creates a new instance of synchronizerProcessBlockRangeInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newSynchronizerProcessBlockRangeInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *synchronizerProcessBlockRangeInterfaceMock {
	mock := &synchronizerProcessBlockRangeInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
