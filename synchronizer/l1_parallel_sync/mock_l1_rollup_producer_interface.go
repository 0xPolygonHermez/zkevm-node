// Code generated by mockery. DO NOT EDIT.

package l1_parallel_sync

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// l1RollupProducerInterfaceMock is an autogenerated mock type for the l1RollupProducerInterface type
type l1RollupProducerInterfaceMock struct {
	mock.Mock
}

type l1RollupProducerInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *l1RollupProducerInterfaceMock) EXPECT() *l1RollupProducerInterfaceMock_Expecter {
	return &l1RollupProducerInterfaceMock_Expecter{mock: &_m.Mock}
}

// Abort provides a mock function with given fields:
func (_m *l1RollupProducerInterfaceMock) Abort() {
	_m.Called()
}

// l1RollupProducerInterfaceMock_Abort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Abort'
type l1RollupProducerInterfaceMock_Abort_Call struct {
	*mock.Call
}

// Abort is a helper method to define mock.On call
func (_e *l1RollupProducerInterfaceMock_Expecter) Abort() *l1RollupProducerInterfaceMock_Abort_Call {
	return &l1RollupProducerInterfaceMock_Abort_Call{Call: _e.mock.On("Abort")}
}

func (_c *l1RollupProducerInterfaceMock_Abort_Call) Run(run func()) *l1RollupProducerInterfaceMock_Abort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *l1RollupProducerInterfaceMock_Abort_Call) Return() *l1RollupProducerInterfaceMock_Abort_Call {
	_c.Call.Return()
	return _c
}

func (_c *l1RollupProducerInterfaceMock_Abort_Call) RunAndReturn(run func()) *l1RollupProducerInterfaceMock_Abort_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields: startingBlockNumber
func (_m *l1RollupProducerInterfaceMock) Reset(startingBlockNumber uint64) {
	_m.Called(startingBlockNumber)
}

// l1RollupProducerInterfaceMock_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type l1RollupProducerInterfaceMock_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
//   - startingBlockNumber uint64
func (_e *l1RollupProducerInterfaceMock_Expecter) Reset(startingBlockNumber interface{}) *l1RollupProducerInterfaceMock_Reset_Call {
	return &l1RollupProducerInterfaceMock_Reset_Call{Call: _e.mock.On("Reset", startingBlockNumber)}
}

func (_c *l1RollupProducerInterfaceMock_Reset_Call) Run(run func(startingBlockNumber uint64)) *l1RollupProducerInterfaceMock_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *l1RollupProducerInterfaceMock_Reset_Call) Return() *l1RollupProducerInterfaceMock_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *l1RollupProducerInterfaceMock_Reset_Call) RunAndReturn(run func(uint64)) *l1RollupProducerInterfaceMock_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *l1RollupProducerInterfaceMock) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// l1RollupProducerInterfaceMock_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type l1RollupProducerInterfaceMock_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *l1RollupProducerInterfaceMock_Expecter) Start(ctx interface{}) *l1RollupProducerInterfaceMock_Start_Call {
	return &l1RollupProducerInterfaceMock_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *l1RollupProducerInterfaceMock_Start_Call) Run(run func(ctx context.Context)) *l1RollupProducerInterfaceMock_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *l1RollupProducerInterfaceMock_Start_Call) Return(_a0 error) *l1RollupProducerInterfaceMock_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *l1RollupProducerInterfaceMock_Start_Call) RunAndReturn(run func(context.Context) error) *l1RollupProducerInterfaceMock_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *l1RollupProducerInterfaceMock) Stop() {
	_m.Called()
}

// l1RollupProducerInterfaceMock_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type l1RollupProducerInterfaceMock_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *l1RollupProducerInterfaceMock_Expecter) Stop() *l1RollupProducerInterfaceMock_Stop_Call {
	return &l1RollupProducerInterfaceMock_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *l1RollupProducerInterfaceMock_Stop_Call) Run(run func()) *l1RollupProducerInterfaceMock_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *l1RollupProducerInterfaceMock_Stop_Call) Return() *l1RollupProducerInterfaceMock_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *l1RollupProducerInterfaceMock_Stop_Call) RunAndReturn(run func()) *l1RollupProducerInterfaceMock_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// newL1RollupProducerInterfaceMock creates a new instance of l1RollupProducerInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newL1RollupProducerInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *l1RollupProducerInterfaceMock {
	mock := &l1RollupProducerInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
