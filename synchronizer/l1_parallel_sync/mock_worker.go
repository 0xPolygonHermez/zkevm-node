// Code generated by mockery. DO NOT EDIT.

package l1_parallel_sync

import (
	context "context"
	sync "sync"

	mock "github.com/stretchr/testify/mock"
)

// workerMock is an autogenerated mock type for the worker type
type workerMock struct {
	mock.Mock
}

type workerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *workerMock) EXPECT() *workerMock_Expecter {
	return &workerMock_Expecter{mock: &_m.Mock}
}

// String provides a mock function with given fields:
func (_m *workerMock) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// workerMock_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type workerMock_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *workerMock_Expecter) String() *workerMock_String_Call {
	return &workerMock_String_Call{Call: _e.mock.On("String")}
}

func (_c *workerMock_String_Call) Run(run func()) *workerMock_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *workerMock_String_Call) Return(_a0 string) *workerMock_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *workerMock_String_Call) RunAndReturn(run func() string) *workerMock_String_Call {
	_c.Call.Return(run)
	return _c
}

// asyncRequestRollupInfoByBlockRange provides a mock function with given fields: ctx, ch, wg, request
func (_m *workerMock) asyncRequestRollupInfoByBlockRange(ctx contextWithCancel, ch chan responseRollupInfoByBlockRange, wg *sync.WaitGroup, request requestRollupInfoByBlockRange) error {
	ret := _m.Called(ctx, ch, wg, request)

	if len(ret) == 0 {
		panic("no return value specified for asyncRequestRollupInfoByBlockRange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(contextWithCancel, chan responseRollupInfoByBlockRange, *sync.WaitGroup, requestRollupInfoByBlockRange) error); ok {
		r0 = rf(ctx, ch, wg, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// workerMock_asyncRequestRollupInfoByBlockRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'asyncRequestRollupInfoByBlockRange'
type workerMock_asyncRequestRollupInfoByBlockRange_Call struct {
	*mock.Call
}

// asyncRequestRollupInfoByBlockRange is a helper method to define mock.On call
//   - ctx contextWithCancel
//   - ch chan responseRollupInfoByBlockRange
//   - wg *sync.WaitGroup
//   - request requestRollupInfoByBlockRange
func (_e *workerMock_Expecter) asyncRequestRollupInfoByBlockRange(ctx interface{}, ch interface{}, wg interface{}, request interface{}) *workerMock_asyncRequestRollupInfoByBlockRange_Call {
	return &workerMock_asyncRequestRollupInfoByBlockRange_Call{Call: _e.mock.On("asyncRequestRollupInfoByBlockRange", ctx, ch, wg, request)}
}

func (_c *workerMock_asyncRequestRollupInfoByBlockRange_Call) Run(run func(ctx contextWithCancel, ch chan responseRollupInfoByBlockRange, wg *sync.WaitGroup, request requestRollupInfoByBlockRange)) *workerMock_asyncRequestRollupInfoByBlockRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(contextWithCancel), args[1].(chan responseRollupInfoByBlockRange), args[2].(*sync.WaitGroup), args[3].(requestRollupInfoByBlockRange))
	})
	return _c
}

func (_c *workerMock_asyncRequestRollupInfoByBlockRange_Call) Return(_a0 error) *workerMock_asyncRequestRollupInfoByBlockRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *workerMock_asyncRequestRollupInfoByBlockRange_Call) RunAndReturn(run func(contextWithCancel, chan responseRollupInfoByBlockRange, *sync.WaitGroup, requestRollupInfoByBlockRange) error) *workerMock_asyncRequestRollupInfoByBlockRange_Call {
	_c.Call.Return(run)
	return _c
}

// isIdle provides a mock function with given fields:
func (_m *workerMock) isIdle() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for isIdle")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// workerMock_isIdle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'isIdle'
type workerMock_isIdle_Call struct {
	*mock.Call
}

// isIdle is a helper method to define mock.On call
func (_e *workerMock_Expecter) isIdle() *workerMock_isIdle_Call {
	return &workerMock_isIdle_Call{Call: _e.mock.On("isIdle")}
}

func (_c *workerMock_isIdle_Call) Run(run func()) *workerMock_isIdle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *workerMock_isIdle_Call) Return(_a0 bool) *workerMock_isIdle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *workerMock_isIdle_Call) RunAndReturn(run func() bool) *workerMock_isIdle_Call {
	_c.Call.Return(run)
	return _c
}

// requestLastBlock provides a mock function with given fields: ctx
func (_m *workerMock) requestLastBlock(ctx context.Context) responseL1LastBlock {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for requestLastBlock")
	}

	var r0 responseL1LastBlock
	if rf, ok := ret.Get(0).(func(context.Context) responseL1LastBlock); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(responseL1LastBlock)
	}

	return r0
}

// workerMock_requestLastBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'requestLastBlock'
type workerMock_requestLastBlock_Call struct {
	*mock.Call
}

// requestLastBlock is a helper method to define mock.On call
//   - ctx context.Context
func (_e *workerMock_Expecter) requestLastBlock(ctx interface{}) *workerMock_requestLastBlock_Call {
	return &workerMock_requestLastBlock_Call{Call: _e.mock.On("requestLastBlock", ctx)}
}

func (_c *workerMock_requestLastBlock_Call) Run(run func(ctx context.Context)) *workerMock_requestLastBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *workerMock_requestLastBlock_Call) Return(_a0 responseL1LastBlock) *workerMock_requestLastBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *workerMock_requestLastBlock_Call) RunAndReturn(run func(context.Context) responseL1LastBlock) *workerMock_requestLastBlock_Call {
	_c.Call.Return(run)
	return _c
}

// newWorkerMock creates a new instance of workerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newWorkerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *workerMock {
	mock := &workerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
