// Code generated by mockery. DO NOT EDIT.

package mock_l2_sync_etrog

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v4"
)

// L1SyncChecker is an autogenerated mock type for the L1SyncChecker type
type L1SyncChecker struct {
	mock.Mock
}

type L1SyncChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *L1SyncChecker) EXPECT() *L1SyncChecker_Expecter {
	return &L1SyncChecker_Expecter{mock: &_m.Mock}
}

// CheckL1SyncStatusEnoughToProcessBatch provides a mock function with given fields: ctx, batchNumber, globalExitRoot, dbTx
func (_m *L1SyncChecker) CheckL1SyncStatusEnoughToProcessBatch(ctx context.Context, batchNumber uint64, globalExitRoot common.Hash, dbTx pgx.Tx) error {
	ret := _m.Called(ctx, batchNumber, globalExitRoot, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for CheckL1SyncStatusEnoughToProcessBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, common.Hash, pgx.Tx) error); ok {
		r0 = rf(ctx, batchNumber, globalExitRoot, dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// L1SyncChecker_CheckL1SyncStatusEnoughToProcessBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckL1SyncStatusEnoughToProcessBatch'
type L1SyncChecker_CheckL1SyncStatusEnoughToProcessBatch_Call struct {
	*mock.Call
}

// CheckL1SyncStatusEnoughToProcessBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - batchNumber uint64
//   - globalExitRoot common.Hash
//   - dbTx pgx.Tx
func (_e *L1SyncChecker_Expecter) CheckL1SyncStatusEnoughToProcessBatch(ctx interface{}, batchNumber interface{}, globalExitRoot interface{}, dbTx interface{}) *L1SyncChecker_CheckL1SyncStatusEnoughToProcessBatch_Call {
	return &L1SyncChecker_CheckL1SyncStatusEnoughToProcessBatch_Call{Call: _e.mock.On("CheckL1SyncStatusEnoughToProcessBatch", ctx, batchNumber, globalExitRoot, dbTx)}
}

func (_c *L1SyncChecker_CheckL1SyncStatusEnoughToProcessBatch_Call) Run(run func(ctx context.Context, batchNumber uint64, globalExitRoot common.Hash, dbTx pgx.Tx)) *L1SyncChecker_CheckL1SyncStatusEnoughToProcessBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(common.Hash), args[3].(pgx.Tx))
	})
	return _c
}

func (_c *L1SyncChecker_CheckL1SyncStatusEnoughToProcessBatch_Call) Return(_a0 error) *L1SyncChecker_CheckL1SyncStatusEnoughToProcessBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *L1SyncChecker_CheckL1SyncStatusEnoughToProcessBatch_Call) RunAndReturn(run func(context.Context, uint64, common.Hash, pgx.Tx) error) *L1SyncChecker_CheckL1SyncStatusEnoughToProcessBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewL1SyncChecker creates a new instance of L1SyncChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewL1SyncChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *L1SyncChecker {
	mock := &L1SyncChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
