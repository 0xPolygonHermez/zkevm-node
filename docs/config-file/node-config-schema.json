{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"$id": "github.com/0xPolygonHermez/zkevm-node/config/config",
	"properties": {
		"IsTrustedSequencer": {
			"type": "boolean",
			"description": "This define is a trusted node (`true`) or a permission less (`false`). If you don't known\nset to `false`",
			"default": false
		},
		"ForkUpgradeBatchNumber": {
			"type": "integer",
			"description": "Last batch number before  a forkid change (fork upgrade). That implies that\ngreater batch numbers are going to be trusted but no virtualized neither verified.\nSo after the batch number `ForkUpgradeBatchNumber` is virtualized and verified you could update\nthe system (SC,...) to new forkId and remove this value to allow the system to keep\nVirtualizing and verifying the new batchs.\nCheck issue [#2236](https://github.com/0xPolygonHermez/zkevm-node/issues/2236) to known more\nThis value overwrite `SequenceSender.ForkUpgradeBatchNumber`",
			"default": 0
		},
		"ForkUpgradeNewForkId": {
			"type": "integer",
			"description": "Which is the new forkId",
			"default": 0
		},
		"Log": {
			"properties": {
				"Environment": {
					"type": "string",
					"enum": [
						"production",
						"development"
					],
					"description": "Environment defining the log format (\"production\" or \"development\").\nIn development mode enables development mode (which makes DPanicLevel logs panic), uses a console encoder, writes to standard error, and disables sampling. Stacktraces are automatically included on logs of WarnLevel and above.\nCheck [here](https://pkg.go.dev/go.uber.org/zap@v1.24.0#NewDevelopmentConfig)",
					"default": "development"
				},
				"Level": {
					"type": "string",
					"enum": [
						"debug",
						"info",
						"warn",
						"error",
						"dpanic",
						"panic",
						"fatal"
					],
					"description": "Level of log. As lower value more logs are going to be generated",
					"default": "info"
				},
				"Outputs": {
					"items": {
						"type": "string"
					},
					"type": "array",
					"description": "Outputs",
					"default": [
						"stderr"
					]
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "Configure Log level for all the services, allow also to store the logs in a file"
		},
		"Etherman": {
			"properties": {
				"URL": {
					"type": "string",
					"description": "URL is the URL of the Ethereum node for L1",
					"default": "http://localhost:8545"
				},
				"ForkIDChunkSize": {
					"type": "integer",
					"description": "ForkIDChunkSize is the max interval for each call to L1 provider to get the forkIDs",
					"default": 20000
				},
				"MultiGasProvider": {
					"type": "boolean",
					"description": "allow that L1 gas price calculation use multiples sources",
					"default": false
				},
				"Etherscan": {
					"properties": {
						"ApiKey": {
							"type": "string",
							"description": "Need API key to use etherscan, if it's empty etherscan is not used",
							"default": ""
						},
						"Url": {
							"type": "string",
							"description": "URL of the etherscan API. Overwritten with a hardcoded URL: \"https://api.etherscan.io/api?module=gastracker\u0026action=gasoracle\u0026apikey=\"",
							"default": ""
						}
					},
					"additionalProperties": false,
					"type": "object",
					"description": "Configuration for use Etherscan as used as gas provider, basically it needs the API-KEY"
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "Configuration of the etherman (client for access L1)"
		},
		"EthTxManager": {
			"properties": {
				"FrequencyToMonitorTxs": {
					"type": "string",
					"title": "Duration",
					"description": "FrequencyToMonitorTxs frequency of the resending failed txs",
					"default": "1s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"WaitTxToBeMined": {
					"type": "string",
					"title": "Duration",
					"description": "WaitTxToBeMined time to wait after transaction was sent to the ethereum",
					"default": "2m0s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"PrivateKeys": {
					"items": {
						"properties": {
							"Path": {
								"type": "string",
								"description": "Path is the file path for the key store file"
							},
							"Password": {
								"type": "string",
								"description": "Password is the password to decrypt the key store file"
							}
						},
						"additionalProperties": false,
						"type": "object",
						"description": "KeystoreFileConfig has all the information needed to load a private key from a key store file"
					},
					"type": "array",
					"description": "PrivateKeys defines all the key store files that are going\nto be read in order to provide the private keys to sign the L1 txs"
				},
				"ForcedGas": {
					"type": "integer",
					"description": "ForcedGas is the amount of gas to be forced in case of gas estimation error",
					"default": 0
				},
				"GasPriceMarginFactor": {
					"type": "number",
					"description": "GasPriceMarginFactor is used to multiply the suggested gas price provided by the network\nin order to allow a different gas price to be set for all the transactions and making it\neasier to have the txs prioritized in the pool, default value is 1.\n\nex:\nsuggested gas price: 100\nGasPriceMarginFactor: 1\ngas price = 100\n\nsuggested gas price: 100\nGasPriceMarginFactor: 1.1\ngas price = 110",
					"default": 1
				},
				"MaxGasPriceLimit": {
					"type": "integer",
					"description": "MaxGasPriceLimit helps avoiding transactions to be sent over an specified\ngas price amount, default value is 0, which means no limit.\nIf the gas price provided by the network and adjusted by the GasPriceMarginFactor\nis greater than this configuration, transaction will have its gas price set to\nthe value configured in this config as the limit.\n\nex:\n\nsuggested gas price: 100\ngas price margin factor: 20%\nmax gas price limit: 150\ntx gas price = 120\n\nsuggested gas price: 100\ngas price margin factor: 20%\nmax gas price limit: 110\ntx gas price = 110",
					"default": 0
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "Configuration for ethereum transaction manager"
		},
		"Pool": {
			"properties": {
				"IntervalToRefreshBlockedAddresses": {
					"type": "string",
					"title": "Duration",
					"description": "IntervalToRefreshBlockedAddresses is the time it takes to sync the\nblocked address list from db to memory",
					"default": "5m0s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"IntervalToRefreshGasPrices": {
					"type": "string",
					"title": "Duration",
					"description": "IntervalToRefreshGasPrices is the time to wait to refresh the gas prices",
					"default": "5s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"MaxTxBytesSize": {
					"type": "integer",
					"description": "MaxTxBytesSize is the max size of a transaction in bytes",
					"default": 100132
				},
				"MaxTxDataBytesSize": {
					"type": "integer",
					"description": "MaxTxDataBytesSize is the max size of the data field of a transaction in bytes",
					"default": 100000
				},
				"DB": {
					"properties": {
						"Name": {
							"type": "string",
							"description": "Database name",
							"default": "pool_db"
						},
						"User": {
							"type": "string",
							"description": "Database User name",
							"default": "pool_user"
						},
						"Password": {
							"type": "string",
							"description": "Database Password of the user",
							"default": "pool_password"
						},
						"Host": {
							"type": "string",
							"description": "Host address of database",
							"default": "zkevm-pool-db"
						},
						"Port": {
							"type": "string",
							"description": "Port Number of database",
							"default": "5432"
						},
						"EnableLog": {
							"type": "boolean",
							"description": "EnableLog",
							"default": false
						},
						"MaxConns": {
							"type": "integer",
							"description": "MaxConns is the maximum number of connections in the pool.",
							"default": 200
						}
					},
					"additionalProperties": false,
					"type": "object",
					"description": "DB is the database configuration"
				},
				"DefaultMinGasPriceAllowed": {
					"type": "integer",
					"description": "DefaultMinGasPriceAllowed is the default min gas price to suggest",
					"default": 1000000000
				},
				"MinAllowedGasPriceInterval": {
					"type": "string",
					"title": "Duration",
					"description": "MinAllowedGasPriceInterval is the interval to look back of the suggested min gas price for a tx",
					"default": "5m0s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"PollMinAllowedGasPriceInterval": {
					"type": "string",
					"title": "Duration",
					"description": "PollMinAllowedGasPriceInterval is the interval to poll the suggested min gas price for a tx",
					"default": "15s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"AccountQueue": {
					"type": "integer",
					"description": "AccountQueue represents the maximum number of non-executable transaction slots permitted per account",
					"default": 64
				},
				"GlobalQueue": {
					"type": "integer",
					"description": "GlobalQueue represents the maximum number of non-executable transaction slots for all accounts",
					"default": 1024
				},
				"EffectiveGasPrice": {
					"properties": {
						"Enabled": {
							"type": "boolean",
							"description": "Enabled is a flag to enable/disable the effective gas price",
							"default": false
						},
						"L1GasPriceFactor": {
							"type": "number",
							"description": "L1GasPriceFactor is the percentage of the L1 gas price that will be used as the L2 min gas price",
							"default": 0.25
						},
						"ByteGasCost": {
							"type": "integer",
							"description": "ByteGasCost is the gas cost per byte that is not 0",
							"default": 16
						},
						"ZeroByteGasCost": {
							"type": "integer",
							"description": "ZeroByteGasCost is the gas cost per byte that is 0",
							"default": 4
						},
						"NetProfit": {
							"type": "number",
							"description": "NetProfit is the profit margin to apply to the calculated breakEvenGasPrice",
							"default": 1
						},
						"BreakEvenFactor": {
							"type": "number",
							"description": "BreakEvenFactor is the factor to apply to the calculated breakevenGasPrice when comparing it with the gasPriceSigned of a tx",
							"default": 1.1
						},
						"FinalDeviationPct": {
							"type": "integer",
							"description": "FinalDeviationPct is the max allowed deviation percentage BreakEvenGasPrice on re-calculation",
							"default": 10
						}
					},
					"additionalProperties": false,
					"type": "object",
					"description": "EffectiveGasPrice is the config for the effective gas price calculation"
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "Pool service configuration"
		},
		"RPC": {
			"properties": {
				"Host": {
					"type": "string",
					"description": "Host defines the network adapter that will be used to serve the HTTP requests",
					"default": "0.0.0.0"
				},
				"Port": {
					"type": "integer",
					"description": "Port defines the port to serve the endpoints via HTTP",
					"default": 8545
				},
				"ReadTimeout": {
					"type": "string",
					"title": "Duration",
					"description": "ReadTimeout is the HTTP server read timeout\ncheck net/http.server.ReadTimeout and net/http.server.ReadHeaderTimeout",
					"default": "1m0s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"WriteTimeout": {
					"type": "string",
					"title": "Duration",
					"description": "WriteTimeout is the HTTP server write timeout\ncheck net/http.server.WriteTimeout",
					"default": "1m0s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"MaxRequestsPerIPAndSecond": {
					"type": "number",
					"description": "MaxRequestsPerIPAndSecond defines how much requests a single IP can\nsend within a single second",
					"default": 500
				},
				"SequencerNodeURI": {
					"type": "string",
					"description": "SequencerNodeURI is used allow Non-Sequencer nodes\nto relay transactions to the Sequencer node",
					"default": ""
				},
				"MaxCumulativeGasUsed": {
					"type": "integer",
					"description": "MaxCumulativeGasUsed is the max gas allowed per batch",
					"default": 0
				},
				"WebSockets": {
					"properties": {
						"Enabled": {
							"type": "boolean",
							"description": "Enabled defines if the WebSocket requests are enabled or disabled",
							"default": true
						},
						"Host": {
							"type": "string",
							"description": "Host defines the network adapter that will be used to serve the WS requests",
							"default": "0.0.0.0"
						},
						"Port": {
							"type": "integer",
							"description": "Port defines the port to serve the endpoints via WS",
							"default": 8546
						},
						"ReadLimit": {
							"type": "integer",
							"description": "ReadLimit defines the maximum size of a message read from the client (in bytes)",
							"default": 104857600
						}
					},
					"additionalProperties": false,
					"type": "object",
					"description": "WebSockets configuration"
				},
				"EnableL2SuggestedGasPricePolling": {
					"type": "boolean",
					"description": "EnableL2SuggestedGasPricePolling enables polling of the L2 gas price to block tx in the RPC with lower gas price.",
					"default": true
				},
				"BatchRequestsEnabled": {
					"type": "boolean",
					"description": "BatchRequestsEnabled defines if the Batch requests are enabled or disabled",
					"default": false
				},
				"BatchRequestsLimit": {
					"type": "integer",
					"description": "BatchRequestsLimit defines the limit of requests that can be incorporated into each batch request",
					"default": 20
				},
				"L2Coinbase": {
					"items": {
						"type": "integer"
					},
					"type": "array",
					"maxItems": 20,
					"minItems": 20,
					"description": "L2Coinbase defines which address is going to receive the fees"
				},
				"MaxLogsCount": {
					"type": "integer",
					"description": "MaxLogsCount is a configuration to set the max number of logs that can be returned\nin a single call to the state, if zero it means no limit",
					"default": 10000
				},
				"MaxLogsBlockRange": {
					"type": "integer",
					"description": "MaxLogsBlockRange is a configuration to set the max range for block number when querying TXs\nlogs in a single call to the state, if zero it means no limit",
					"default": 10000
				},
				"MaxNativeBlockHashBlockRange": {
					"type": "integer",
					"description": "MaxNativeBlockHashBlockRange is a configuration to set the max range for block number when querying\nnative block hashes in a single call to the state, if zero it means no limit",
					"default": 60000
				},
				"EnableHttpLog": {
					"type": "boolean",
					"description": "EnableHttpLog allows the user to enable or disable the logs related to the HTTP\nrequests to be captured by the server.",
					"default": true
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "Configuration for RPC service. THis one offers a extended Ethereum JSON-RPC API interface to interact with the node"
		},
		"Synchronizer": {
			"properties": {
				"SyncInterval": {
					"type": "string",
					"title": "Duration",
					"description": "SyncInterval is the delay interval between reading new rollup information",
					"default": "1s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"SyncChunkSize": {
					"type": "integer",
					"description": "SyncChunkSize is the number of blocks to sync on each chunk",
					"default": 100
				},
				"TrustedSequencerURL": {
					"type": "string",
					"description": "TrustedSequencerURL is the rpc url to connect and sync the trusted state",
					"default": ""
				},
				"L1SynchronizationMode": {
					"type": "string",
					"enum": [
						"sequential",
						"parallel"
					],
					"description": "L1SynchronizationMode define how to synchronize with L1:\n- parallel: Request data to L1 in parallel, and process sequentially. The advantage is that executor is not blocked waiting for L1 data\n- sequential: Request data to L1 and execute",
					"default": "parallel"
				},
				"L1ParallelSynchronization": {
					"properties": {
						"MaxClients": {
							"type": "integer",
							"description": "MaxClients Number of clients used to synchronize with L1",
							"default": 10
						},
						"MaxPendingNoProcessedBlocks": {
							"type": "integer",
							"description": "MaxPendingNoProcessedBlocks Size of the buffer used to store rollup information from L1, must be \u003e= to NumberOfEthereumClientsToSync\nsugested twice of NumberOfParallelOfEthereumClients",
							"default": 25
						},
						"RequestLastBlockPeriod": {
							"type": "string",
							"title": "Duration",
							"description": "RequestLastBlockPeriod is the time to wait to request the\nlast block to L1 to known if we need to retrieve more data.\nThis value only apply when the system is synchronized",
							"default": "5s",
							"examples": [
								"1m",
								"300ms"
							]
						},
						"PerformanceWarning": {
							"properties": {
								"AceptableInacctivityTime": {
									"type": "string",
									"title": "Duration",
									"description": "AceptableInacctivityTime is the expected maximum time that the consumer\ncould wait until new data is produced. If the time is greater it emmit a log to warn about\nthat. The idea is keep working the consumer as much as possible, so if the producer is not\nfast enought then you could increse the number of parallel clients to sync with L1",
									"default": "5s",
									"examples": [
										"1m",
										"300ms"
									]
								},
								"ApplyAfterNumRollupReceived": {
									"type": "integer",
									"description": "ApplyAfterNumRollupReceived is the number of iterations to\nstart checking the time waiting for new rollup info data",
									"default": 10
								}
							},
							"additionalProperties": false,
							"type": "object",
							"description": "Consumer Configuration for the consumer of rollup information from L1"
						},
						"RequestLastBlockTimeout": {
							"type": "string",
							"title": "Duration",
							"description": "RequestLastBlockTimeout Timeout for request LastBlock On L1",
							"default": "5s",
							"examples": [
								"1m",
								"300ms"
							]
						},
						"RequestLastBlockMaxRetries": {
							"type": "integer",
							"description": "RequestLastBlockMaxRetries Max number of retries to request LastBlock On L1",
							"default": 3
						},
						"StatisticsPeriod": {
							"type": "string",
							"title": "Duration",
							"description": "StatisticsPeriod how ofter show a log with statistics (0 is disabled)",
							"default": "5m0s",
							"examples": [
								"1m",
								"300ms"
							]
						},
						"TimeOutMainLoop": {
							"type": "string",
							"title": "Duration",
							"description": "TimeOutMainLoop is the timeout for the main loop of the L1 synchronizer when is not updated",
							"default": "5m0s",
							"examples": [
								"1m",
								"300ms"
							]
						},
						"RollupInfoRetriesSpacing": {
							"type": "string",
							"title": "Duration",
							"description": "RollupInfoRetriesSpacing is the minimum time between retries to request rollup info (it will sleep for fulfill this time) to avoid spamming L1",
							"default": "5s",
							"examples": [
								"1m",
								"300ms"
							]
						},
						"FallbackToSequentialModeOnSynchronized": {
							"type": "boolean",
							"description": "FallbackToSequentialModeOnSynchronized if true switch to sequential mode if the system is synchronized",
							"default": false
						}
					},
					"additionalProperties": false,
					"type": "object",
					"description": "L1ParallelSynchronization Configuration for parallel mode (if L1SynchronizationMode equal to 'parallel')"
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "Configuration of service `Syncrhonizer`. For this service is also really important the value of `IsTrustedSequencer`\nbecause depending of this values is going to ask to a trusted node for trusted transactions or not"
		},
		"Sequencer": {
			"properties": {
				"WaitPeriodPoolIsEmpty": {
					"type": "string",
					"title": "Duration",
					"description": "WaitPeriodPoolIsEmpty is the time the sequencer waits until\ntrying to add new txs to the state",
					"default": "1s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"BlocksAmountForTxsToBeDeleted": {
					"type": "integer",
					"description": "BlocksAmountForTxsToBeDeleted is blocks amount after which txs will be deleted from the pool",
					"default": 100
				},
				"FrequencyToCheckTxsForDelete": {
					"type": "string",
					"title": "Duration",
					"description": "FrequencyToCheckTxsForDelete is frequency with which txs will be checked for deleting",
					"default": "12h0m0s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"TxLifetimeCheckTimeout": {
					"type": "string",
					"title": "Duration",
					"description": "TxLifetimeCheckTimeout is the time the sequencer waits to check txs lifetime",
					"default": "10m0s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"MaxTxLifetime": {
					"type": "string",
					"title": "Duration",
					"description": "MaxTxLifetime is the time a tx can be in the sequencer/worker memory",
					"default": "3h0m0s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"Finalizer": {
					"properties": {
						"GERDeadlineTimeout": {
							"type": "string",
							"title": "Duration",
							"description": "GERDeadlineTimeout is the time the finalizer waits after receiving closing signal to update Global Exit Root",
							"default": "5s",
							"examples": [
								"1m",
								"300ms"
							]
						},
						"ForcedBatchDeadlineTimeout": {
							"type": "string",
							"title": "Duration",
							"description": "ForcedBatchDeadlineTimeout is the time the finalizer waits after receiving closing signal to process Forced Batches",
							"default": "1m0s",
							"examples": [
								"1m",
								"300ms"
							]
						},
						"SleepDuration": {
							"type": "string",
							"title": "Duration",
							"description": "SleepDuration is the time the finalizer sleeps between each iteration, if there are no transactions to be processed",
							"default": "100ms",
							"examples": [
								"1m",
								"300ms"
							]
						},
						"ResourcePercentageToCloseBatch": {
							"type": "integer",
							"description": "ResourcePercentageToCloseBatch is the percentage window of the resource left out for the batch to be closed",
							"default": 10
						},
						"GERFinalityNumberOfBlocks": {
							"type": "integer",
							"description": "GERFinalityNumberOfBlocks is number of blocks to consider GER final",
							"default": 64
						},
						"ClosingSignalsManagerWaitForCheckingL1Timeout": {
							"type": "string",
							"title": "Duration",
							"description": "ClosingSignalsManagerWaitForCheckingL1Timeout is used by the closing signals manager to wait for its operation",
							"default": "10s",
							"examples": [
								"1m",
								"300ms"
							]
						},
						"ClosingSignalsManagerWaitForCheckingGER": {
							"type": "string",
							"title": "Duration",
							"description": "ClosingSignalsManagerWaitForCheckingGER is used by the closing signals manager to wait for its operation",
							"default": "10s",
							"examples": [
								"1m",
								"300ms"
							]
						},
						"ClosingSignalsManagerWaitForCheckingForcedBatches": {
							"type": "string",
							"title": "Duration",
							"description": "ClosingSignalsManagerWaitForCheckingL1Timeout is used by the closing signals manager to wait for its operation",
							"default": "10s",
							"examples": [
								"1m",
								"300ms"
							]
						},
						"ForcedBatchesFinalityNumberOfBlocks": {
							"type": "integer",
							"description": "ForcedBatchesFinalityNumberOfBlocks is number of blocks to consider GER final",
							"default": 64
						},
						"TimestampResolution": {
							"type": "string",
							"title": "Duration",
							"description": "TimestampResolution is the resolution of the timestamp used to close a batch",
							"default": "10s",
							"examples": [
								"1m",
								"300ms"
							]
						},
						"StopSequencerOnBatchNum": {
							"type": "integer",
							"description": "StopSequencerOnBatchNum specifies the batch number where the Sequencer will stop to process more transactions and generate new batches. The Sequencer will halt after it closes the batch equal to this number",
							"default": 0
						},
						"SequentialReprocessFullBatch": {
							"type": "boolean",
							"description": "SequentialReprocessFullBatch indicates if the reprocess of a closed batch (sanity check) must be done in a\nsequential way (instead than in parallel)",
							"default": false
						}
					},
					"additionalProperties": false,
					"type": "object",
					"description": "Finalizer's specific config properties"
				},
				"DBManager": {
					"properties": {
						"PoolRetrievalInterval": {
							"type": "string",
							"title": "Duration",
							"default": "500ms",
							"examples": [
								"1m",
								"300ms"
							]
						},
						"L2ReorgRetrievalInterval": {
							"type": "string",
							"title": "Duration",
							"default": "5s",
							"examples": [
								"1m",
								"300ms"
							]
						}
					},
					"additionalProperties": false,
					"type": "object",
					"description": "DBManager's specific config properties"
				},
				"StreamServer": {
					"properties": {
						"Port": {
							"type": "integer",
							"description": "Port to listen on",
							"default": 0
						},
						"Filename": {
							"type": "string",
							"description": "Filename of the binary data file",
							"default": ""
						},
						"Enabled": {
							"type": "boolean",
							"description": "Enabled is a flag to enable/disable the data streamer",
							"default": false
						},
						"Log": {
							"properties": {
								"Environment": {
									"type": "string",
									"enum": [
										"production",
										"development"
									],
									"default": ""
								},
								"Level": {
									"type": "string",
									"enum": [
										"debug",
										"info",
										"warn",
										"error",
										"dpanic",
										"panic",
										"fatal"
									],
									"default": ""
								},
								"Outputs": {
									"items": {
										"type": "string"
									},
									"type": "array"
								}
							},
							"additionalProperties": false,
							"type": "object",
							"description": "Log is the log configuration"
						}
					},
					"additionalProperties": false,
					"type": "object",
					"description": "StreamServerCfg is the config for the stream server"
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "Configuration of the sequencer service"
		},
		"SequenceSender": {
			"properties": {
				"WaitPeriodSendSequence": {
					"type": "string",
					"title": "Duration",
					"description": "WaitPeriodSendSequence is the time the sequencer waits until\ntrying to send a sequence to L1",
					"default": "5s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"LastBatchVirtualizationTimeMaxWaitPeriod": {
					"type": "string",
					"title": "Duration",
					"description": "LastBatchVirtualizationTimeMaxWaitPeriod is time since sequences should be sent",
					"default": "5s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"MaxTxSizeForL1": {
					"type": "integer",
					"description": "MaxTxSizeForL1 is the maximum size a single transaction can have. This field has\nnon-trivial consequences: larger transactions than 128KB are significantly harder and\nmore expensive to propagate; larger transactions also take more resources\nto validate whether they fit into the pool or not.",
					"default": 131072
				},
				"SenderAddress": {
					"items": {
						"type": "integer"
					},
					"type": "array",
					"maxItems": 20,
					"minItems": 20,
					"description": "SenderAddress defines which private key the eth tx manager needs to use\nto sign the L1 txs"
				},
				"L2Coinbase": {
					"items": {
						"type": "integer"
					},
					"type": "array",
					"maxItems": 20,
					"minItems": 20,
					"description": "L2Coinbase defines which address is going to receive the fees",
					"default": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266"
				},
				"PrivateKey": {
					"properties": {
						"Path": {
							"type": "string",
							"description": "Path is the file path for the key store file",
							"default": "/pk/sequencer.keystore"
						},
						"Password": {
							"type": "string",
							"description": "Password is the password to decrypt the key store file",
							"default": "testonly"
						}
					},
					"additionalProperties": false,
					"type": "object",
					"description": "PrivateKey defines all the key store files that are going\nto be read in order to provide the private keys to sign the L1 txs"
				},
				"ForkUpgradeBatchNumber": {
					"type": "integer",
					"description": "Batch number where there is a forkid change (fork upgrade)",
					"default": 0
				},
				"GasOffset": {
					"type": "integer",
					"description": "GasOffset is the amount of gas to be added to the gas estimation in order\nto provide an amount that is higher than the estimated one. This is used\nto avoid the TX getting reverted in case something has changed in the network\nstate after the estimation which can cause the TX to require more gas to be\nexecuted.\n\nex:\ngas estimation: 1000\ngas offset: 100\nfinal gas: 1100",
					"default": 80000
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "Configuration of the sequence sender service"
		},
		"Aggregator": {
			"properties": {
				"Host": {
					"type": "string",
					"description": "Host for the grpc server",
					"default": "0.0.0.0"
				},
				"Port": {
					"type": "integer",
					"description": "Port for the grpc server",
					"default": 50081
				},
				"RetryTime": {
					"type": "string",
					"title": "Duration",
					"description": "RetryTime is the time the aggregator main loop sleeps if there are no proofs to aggregate\nor batches to generate proofs. It is also used in the isSynced loop",
					"default": "5s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"VerifyProofInterval": {
					"type": "string",
					"title": "Duration",
					"description": "VerifyProofInterval is the interval of time to verify/send an proof in L1",
					"default": "1m30s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"ProofStatePollingInterval": {
					"type": "string",
					"title": "Duration",
					"description": "ProofStatePollingInterval is the interval time to polling the prover about the generation state of a proof",
					"default": "5s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"TxProfitabilityCheckerType": {
					"type": "string",
					"description": "TxProfitabilityCheckerType type for checking is it profitable for aggregator to validate batch\npossible values: base/acceptall",
					"default": "acceptall"
				},
				"TxProfitabilityMinReward": {
					"properties": {},
					"additionalProperties": false,
					"type": "object",
					"description": "TxProfitabilityMinReward min reward for base tx profitability checker when aggregator will validate batch\nthis parameter is used for the base tx profitability checker"
				},
				"IntervalAfterWhichBatchConsolidateAnyway": {
					"type": "string",
					"title": "Duration",
					"description": "IntervalAfterWhichBatchConsolidateAnyway this is interval for the main sequencer, that will check if there is no transactions",
					"default": "0s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"ChainID": {
					"type": "integer",
					"description": "ChainID is the L2 ChainID provided by the Network Config",
					"default": 0
				},
				"ForkId": {
					"type": "integer",
					"description": "ForkID is the L2 ForkID provided by the Network Config",
					"default": 0
				},
				"SenderAddress": {
					"type": "string",
					"description": "SenderAddress defines which private key the eth tx manager needs to use\nto sign the L1 txs",
					"default": ""
				},
				"CleanupLockedProofsInterval": {
					"type": "string",
					"title": "Duration",
					"description": "CleanupLockedProofsInterval is the interval of time to clean up locked proofs.",
					"default": "2m0s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"GeneratingProofCleanupThreshold": {
					"type": "string",
					"description": "GeneratingProofCleanupThreshold represents the time interval after\nwhich a proof in generating state is considered to be stuck and\nallowed to be cleared.",
					"default": "10m"
				},
				"GasOffset": {
					"type": "integer",
					"description": "GasOffset is the amount of gas to be added to the gas estimation in order\nto provide an amount that is higher than the estimated one. This is used\nto avoid the TX getting reverted in case something has changed in the network\nstate after the estimation which can cause the TX to require more gas to be\nexecuted.\n\nex:\ngas estimation: 1000\ngas offset: 100\nfinal gas: 1100",
					"default": 0
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "Configuration of the aggregator service"
		},
		"NetworkConfig": {
			"properties": {
				"l1Config": {
					"properties": {
						"chainId": {
							"type": "integer",
							"description": "Chain ID of the L1 network",
							"default": 0
						},
						"polygonZkEVMAddress": {
							"items": {
								"type": "integer"
							},
							"type": "array",
							"maxItems": 20,
							"minItems": 20,
							"description": "Address of the L1 contract"
						},
						"maticTokenAddress": {
							"items": {
								"type": "integer"
							},
							"type": "array",
							"maxItems": 20,
							"minItems": 20,
							"description": "Address of the L1 Matic token Contract"
						},
						"polygonZkEVMGlobalExitRootAddress": {
							"items": {
								"type": "integer"
							},
							"type": "array",
							"maxItems": 20,
							"minItems": 20,
							"description": "Address of the L1 GlobalExitRootManager contract"
						}
					},
					"additionalProperties": false,
					"type": "object",
					"description": "L1: Configuration related to L1"
				},
				"L2GlobalExitRootManagerAddr": {
					"items": {
						"type": "integer"
					},
					"type": "array",
					"maxItems": 20,
					"minItems": 20,
					"description": "DEPRECATED L2: address of the `PolygonZkEVMGlobalExitRootL2 proxy` smart contract"
				},
				"L2BridgeAddr": {
					"items": {
						"type": "integer"
					},
					"type": "array",
					"maxItems": 20,
					"minItems": 20,
					"description": "L2: address of the `PolygonZkEVMBridge proxy` smart contract"
				},
				"Genesis": {
					"properties": {
						"GenesisBlockNum": {
							"type": "integer",
							"description": "GenesisBlockNum is the block number where the polygonZKEVM smc was deployed on L1",
							"default": 0
						},
						"Root": {
							"items": {
								"type": "integer"
							},
							"type": "array",
							"maxItems": 32,
							"minItems": 32,
							"description": "Root hash of the genesis block"
						},
						"GenesisActions": {
							"items": {
								"properties": {
									"address": {
										"type": "string"
									},
									"type": {
										"type": "integer"
									},
									"storagePosition": {
										"type": "string"
									},
									"bytecode": {
										"type": "string"
									},
									"key": {
										"type": "string"
									},
									"value": {
										"type": "string"
									},
									"root": {
										"type": "string"
									}
								},
								"additionalProperties": false,
								"type": "object",
								"description": "GenesisAction represents one of the values set on the SMT during genesis."
							},
							"type": "array",
							"description": "Contracts to be deployed to L2"
						}
					},
					"additionalProperties": false,
					"type": "object",
					"description": "L1: Genesis of the rollup, first block number and root"
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "Configuration of the genesis of the network. This is used to known the initial state of the network"
		},
		"L2GasPriceSuggester": {
			"properties": {
				"Type": {
					"type": "string",
					"default": "follower"
				},
				"DefaultGasPriceWei": {
					"type": "integer",
					"description": "DefaultGasPriceWei is used to set the gas price to be used by the default gas pricer or as minimim gas price by the follower gas pricer.",
					"default": 2000000000
				},
				"MaxGasPriceWei": {
					"type": "integer",
					"description": "MaxGasPriceWei is used to limit the gas price returned by the follower gas pricer to a maximum value. It is ignored if 0.",
					"default": 0
				},
				"MaxPrice": {
					"properties": {},
					"additionalProperties": false,
					"type": "object"
				},
				"IgnorePrice": {
					"properties": {},
					"additionalProperties": false,
					"type": "object"
				},
				"CheckBlocks": {
					"type": "integer",
					"default": 0
				},
				"Percentile": {
					"type": "integer",
					"default": 0
				},
				"UpdatePeriod": {
					"type": "string",
					"title": "Duration",
					"default": "10s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"CleanHistoryPeriod": {
					"type": "string",
					"title": "Duration",
					"default": "1h0m0s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"CleanHistoryTimeRetention": {
					"type": "string",
					"title": "Duration",
					"default": "5m0s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"Factor": {
					"type": "number",
					"default": 0.15
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "Configuration of the gas price suggester service"
		},
		"Executor": {
			"properties": {
				"URI": {
					"type": "string",
					"default": "zkevm-prover:50071"
				},
				"MaxResourceExhaustedAttempts": {
					"type": "integer",
					"description": "MaxResourceExhaustedAttempts is the max number of attempts to make a transaction succeed because of resource exhaustion",
					"default": 3
				},
				"WaitOnResourceExhaustion": {
					"type": "string",
					"title": "Duration",
					"description": "WaitOnResourceExhaustion is the time to wait before retrying a transaction because of resource exhaustion",
					"default": "1s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"MaxGRPCMessageSize": {
					"type": "integer",
					"default": 100000000
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "Configuration of the executor service"
		},
		"MTClient": {
			"properties": {
				"URI": {
					"type": "string",
					"description": "URI is the server URI.",
					"default": "zkevm-prover:50061"
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "Configuration of the merkle tree client service. Not use in the node, only for testing"
		},
		"Metrics": {
			"properties": {
				"Host": {
					"type": "string",
					"description": "Host is the address to bind the metrics server",
					"default": "0.0.0.0"
				},
				"Port": {
					"type": "integer",
					"description": "Port is the port to bind the metrics server",
					"default": 9091
				},
				"Enabled": {
					"type": "boolean",
					"description": "Enabled is the flag to enable/disable the metrics server",
					"default": false
				},
				"ProfilingHost": {
					"type": "string",
					"description": "ProfilingHost is the address to bind the profiling server",
					"default": ""
				},
				"ProfilingPort": {
					"type": "integer",
					"description": "ProfilingPort is the port to bind the profiling server",
					"default": 0
				},
				"ProfilingEnabled": {
					"type": "boolean",
					"description": "ProfilingEnabled is the flag to enable/disable the profiling server",
					"default": false
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "Configuration of the metrics service, basically is where is going to publish the metrics"
		},
		"EventLog": {
			"properties": {
				"DB": {
					"properties": {
						"Name": {
							"type": "string",
							"description": "Database name",
							"default": ""
						},
						"User": {
							"type": "string",
							"description": "Database User name",
							"default": ""
						},
						"Password": {
							"type": "string",
							"description": "Database Password of the user",
							"default": ""
						},
						"Host": {
							"type": "string",
							"description": "Host address of database",
							"default": ""
						},
						"Port": {
							"type": "string",
							"description": "Port Number of database",
							"default": ""
						},
						"EnableLog": {
							"type": "boolean",
							"description": "EnableLog",
							"default": false
						},
						"MaxConns": {
							"type": "integer",
							"description": "MaxConns is the maximum number of connections in the pool.",
							"default": 0
						}
					},
					"additionalProperties": false,
					"type": "object",
					"description": "DB is the database configuration"
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "Configuration of the event database connection"
		},
		"HashDB": {
			"properties": {
				"Name": {
					"type": "string",
					"description": "Database name",
					"default": "prover_db"
				},
				"User": {
					"type": "string",
					"description": "Database User name",
					"default": "prover_user"
				},
				"Password": {
					"type": "string",
					"description": "Database Password of the user",
					"default": "prover_pass"
				},
				"Host": {
					"type": "string",
					"description": "Host address of database",
					"default": "zkevm-state-db"
				},
				"Port": {
					"type": "string",
					"description": "Port Number of database",
					"default": "5432"
				},
				"EnableLog": {
					"type": "boolean",
					"description": "EnableLog",
					"default": false
				},
				"MaxConns": {
					"type": "integer",
					"description": "MaxConns is the maximum number of connections in the pool.",
					"default": 200
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "Configuration of the hash database connection"
		},
		"State": {
			"properties": {
				"MaxCumulativeGasUsed": {
					"type": "integer",
					"description": "MaxCumulativeGasUsed is the max gas allowed per batch",
					"default": 0
				},
				"ChainID": {
					"type": "integer",
					"description": "ChainID is the L2 ChainID provided by the Network Config",
					"default": 0
				},
				"ForkIDIntervals": {
					"items": {
						"properties": {
							"FromBatchNumber": {
								"type": "integer"
							},
							"ToBatchNumber": {
								"type": "integer"
							},
							"ForkId": {
								"type": "integer"
							},
							"Version": {
								"type": "string"
							},
							"BlockNumber": {
								"type": "integer"
							}
						},
						"additionalProperties": false,
						"type": "object",
						"description": "ForkIDInterval is a fork id interval"
					},
					"type": "array",
					"description": "ForkIdIntervals is the list of fork id intervals"
				},
				"MaxResourceExhaustedAttempts": {
					"type": "integer",
					"description": "MaxResourceExhaustedAttempts is the max number of attempts to make a transaction succeed because of resource exhaustion",
					"default": 0
				},
				"WaitOnResourceExhaustion": {
					"type": "string",
					"title": "Duration",
					"description": "WaitOnResourceExhaustion is the time to wait before retrying a transaction because of resource exhaustion",
					"default": "0s",
					"examples": [
						"1m",
						"300ms"
					]
				},
				"ForkUpgradeBatchNumber": {
					"type": "integer",
					"description": "Batch number from which there is a forkid change (fork upgrade)",
					"default": 0
				},
				"ForkUpgradeNewForkId": {
					"type": "integer",
					"description": "New fork id to be used for batches greaters than ForkUpgradeBatchNumber (fork upgrade)",
					"default": 0
				},
				"DB": {
					"properties": {
						"Name": {
							"type": "string",
							"description": "Database name",
							"default": "state_db"
						},
						"User": {
							"type": "string",
							"description": "Database User name",
							"default": "state_user"
						},
						"Password": {
							"type": "string",
							"description": "Database Password of the user",
							"default": "state_password"
						},
						"Host": {
							"type": "string",
							"description": "Host address of database",
							"default": "zkevm-state-db"
						},
						"Port": {
							"type": "string",
							"description": "Port Number of database",
							"default": "5432"
						},
						"EnableLog": {
							"type": "boolean",
							"description": "EnableLog",
							"default": false
						},
						"MaxConns": {
							"type": "integer",
							"description": "MaxConns is the maximum number of connections in the pool.",
							"default": 200
						}
					},
					"additionalProperties": false,
					"type": "object",
					"description": "DB is the database configuration"
				},
				"Batch": {
					"properties": {
						"Constraints": {
							"properties": {
								"MaxTxsPerBatch": {
									"type": "integer",
									"default": 300
								},
								"MaxBatchBytesSize": {
									"type": "integer",
									"default": 120000
								},
								"MaxCumulativeGasUsed": {
									"type": "integer",
									"default": 30000000
								},
								"MaxKeccakHashes": {
									"type": "integer",
									"default": 2145
								},
								"MaxPoseidonHashes": {
									"type": "integer",
									"default": 252357
								},
								"MaxPoseidonPaddings": {
									"type": "integer",
									"default": 135191
								},
								"MaxMemAligns": {
									"type": "integer",
									"default": 236585
								},
								"MaxArithmetics": {
									"type": "integer",
									"default": 236585
								},
								"MaxBinaries": {
									"type": "integer",
									"default": 473170
								},
								"MaxSteps": {
									"type": "integer",
									"default": 7570538
								}
							},
							"additionalProperties": false,
							"type": "object"
						}
					},
					"additionalProperties": false,
					"type": "object",
					"description": "Configuration for the batch constraints"
				},
				"MaxLogsCount": {
					"type": "integer",
					"description": "MaxLogsCount is a configuration to set the max number of logs that can be returned\nin a single call to the state, if zero it means no limit",
					"default": 0
				},
				"MaxLogsBlockRange": {
					"type": "integer",
					"description": "MaxLogsBlockRange is a configuration to set the max range for block number when querying TXs\nlogs in a single call to the state, if zero it means no limit",
					"default": 0
				},
				"MaxNativeBlockHashBlockRange": {
					"type": "integer",
					"description": "MaxNativeBlockHashBlockRange is a configuration to set the max range for block number when querying\nnative block hashes in a single call to the state, if zero it means no limit",
					"default": 0
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "State service configuration"
		}
	},
	"additionalProperties": false,
	"type": "object",
	"description": "Config represents the configuration of the entire Hermez Node The file is TOML format You could find some examples:\n\n[TOML format]: https://en.wikipedia.org/wiki/TOML"
}