// Code generated by mockery v2.13.1. DO NOT EDIT.

package sequencerv2

import (
	big "math/big"

	mock "github.com/stretchr/testify/mock"

	types "github.com/hermeznetwork/hermez-core/ethermanv2/types"
)

// ethermanMock is an autogenerated mock type for the etherman type
type ethermanMock struct {
	mock.Mock
}

// EstimateGasSequenceBatches provides a mock function with given fields: sequences
func (_m *ethermanMock) EstimateGasSequenceBatches(sequences []types.Sequence) (*big.Int, error) {
	ret := _m.Called(sequences)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func([]types.Sequence) *big.Int); ok {
		r0 = rf(sequences)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]types.Sequence) error); ok {
		r1 = rf(sequences)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSendSequenceFee provides a mock function with given fields:
func (_m *ethermanMock) GetSendSequenceFee() (*big.Int, error) {
	ret := _m.Called()

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewEthermanMock interface {
	mock.TestingT
	Cleanup(func())
}

// newEthermanMock creates a new instance of ethermanMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newEthermanMock(t mockConstructorTestingTnewEthermanMock) *ethermanMock {
	mock := &ethermanMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
