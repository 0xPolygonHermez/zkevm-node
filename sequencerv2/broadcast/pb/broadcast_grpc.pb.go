// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: broadcast.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BroadcastServiceClient is the client API for BroadcastService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BroadcastServiceClient interface {
	GetLastBatchNumber(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetLastBatchNumberResponse, error)
	GetTransactionsPerBatch(ctx context.Context, in *GetTransactionsPerBatchRequest, opts ...grpc.CallOption) (*GetTransactionsPerBatchResponse, error)
	GetLastBatchTransactions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetLastBatchTransactionsResponse, error)
}

type broadcastServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBroadcastServiceClient(cc grpc.ClientConnInterface) BroadcastServiceClient {
	return &broadcastServiceClient{cc}
}

func (c *broadcastServiceClient) GetLastBatchNumber(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetLastBatchNumberResponse, error) {
	out := new(GetLastBatchNumberResponse)
	err := c.cc.Invoke(ctx, "/broadcast.v1.BroadcastService/GetLastBatchNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastServiceClient) GetTransactionsPerBatch(ctx context.Context, in *GetTransactionsPerBatchRequest, opts ...grpc.CallOption) (*GetTransactionsPerBatchResponse, error) {
	out := new(GetTransactionsPerBatchResponse)
	err := c.cc.Invoke(ctx, "/broadcast.v1.BroadcastService/GetTransactionsPerBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastServiceClient) GetLastBatchTransactions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetLastBatchTransactionsResponse, error) {
	out := new(GetLastBatchTransactionsResponse)
	err := c.cc.Invoke(ctx, "/broadcast.v1.BroadcastService/GetLastBatchTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BroadcastServiceServer is the server API for BroadcastService service.
// All implementations must embed UnimplementedBroadcastServiceServer
// for forward compatibility
type BroadcastServiceServer interface {
	GetLastBatchNumber(context.Context, *Empty) (*GetLastBatchNumberResponse, error)
	GetTransactionsPerBatch(context.Context, *GetTransactionsPerBatchRequest) (*GetTransactionsPerBatchResponse, error)
	GetLastBatchTransactions(context.Context, *Empty) (*GetLastBatchTransactionsResponse, error)
	mustEmbedUnimplementedBroadcastServiceServer()
}

// UnimplementedBroadcastServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBroadcastServiceServer struct {
}

func (UnimplementedBroadcastServiceServer) GetLastBatchNumber(context.Context, *Empty) (*GetLastBatchNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastBatchNumber not implemented")
}
func (UnimplementedBroadcastServiceServer) GetTransactionsPerBatch(context.Context, *GetTransactionsPerBatchRequest) (*GetTransactionsPerBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsPerBatch not implemented")
}
func (UnimplementedBroadcastServiceServer) GetLastBatchTransactions(context.Context, *Empty) (*GetLastBatchTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastBatchTransactions not implemented")
}
func (UnimplementedBroadcastServiceServer) mustEmbedUnimplementedBroadcastServiceServer() {}

// UnsafeBroadcastServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BroadcastServiceServer will
// result in compilation errors.
type UnsafeBroadcastServiceServer interface {
	mustEmbedUnimplementedBroadcastServiceServer()
}

func RegisterBroadcastServiceServer(s grpc.ServiceRegistrar, srv BroadcastServiceServer) {
	s.RegisterService(&BroadcastService_ServiceDesc, srv)
}

func _BroadcastService_GetLastBatchNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServiceServer).GetLastBatchNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broadcast.v1.BroadcastService/GetLastBatchNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServiceServer).GetLastBatchNumber(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastService_GetTransactionsPerBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsPerBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServiceServer).GetTransactionsPerBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broadcast.v1.BroadcastService/GetTransactionsPerBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServiceServer).GetTransactionsPerBatch(ctx, req.(*GetTransactionsPerBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastService_GetLastBatchTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServiceServer).GetLastBatchTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broadcast.v1.BroadcastService/GetLastBatchTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServiceServer).GetLastBatchTransactions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BroadcastService_ServiceDesc is the grpc.ServiceDesc for BroadcastService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BroadcastService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broadcast.v1.BroadcastService",
	HandlerType: (*BroadcastServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLastBatchNumber",
			Handler:    _BroadcastService_GetLastBatchNumber_Handler,
		},
		{
			MethodName: "GetTransactionsPerBatch",
			Handler:    _BroadcastService_GetTransactionsPerBatch_Handler,
		},
		{
			MethodName: "GetLastBatchTransactions",
			Handler:    _BroadcastService_GetLastBatchTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "broadcast.proto",
}
