syntax = "proto3";

package zkprover;

option go_package = "proverclient";

service ZKProver {
  rpc GetStatus(NoParams) returns (State) {}
  rpc GenProof(stream InputProver) returns (stream State) {}
  rpc Cancel(NoParams) returns (State) {}
  rpc GetProof(NoParams) returns (Proof) {}
}

message NoParams {}

message State {
  enum Status {
    IDLE = 0;
    ERROR = 1;
    PENDING = 2;
    FINISHED = 3;
  }
  Status status = 1;
  Proof proof = 2;
}

message ProofX {
  repeated string proof = 1;
}

message PublicInputs {
  string oldStateRoot = 1;
  string oldLocalExitRoot = 2;
  string newStateRoot = 3;
  string newLocalExitRoot = 4;
  string sequencerAddr = 5;
  string batchHashData = 6;
  uint32 chainId = 7;
  uint32 batchNum = 8;
}

message Proof {
  repeated string proofA = 1;
  repeated ProofX proofB = 2;
  repeated string  proofC = 3;
  PublicInputsExtended publicInputsExtended = 4;
}

message InputProver {
  string message = 1;
  PublicInputs publicInputs = 2;
  string globalExitRoot = 3;
  repeated string txs = 4;
  map<string, string> keys = 5;
}

message PublicInputsExtended {
  PublicInputs publicInputs = 2;
  string inputHash = 5;
}