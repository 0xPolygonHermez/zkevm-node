syntax = "proto3";

package executor.v1;

option go_package = "github.com/0xPolygonHermez/zkevm-node/state/runtime/executor/pb";

service ExecutorService {
    /// Processes a batch
    rpc ProcessBatch(ProcessBatchRequest) returns (ProcessBatchResponse) {}
}

message ProcessBatchRequest {
    bytes old_state_root = 1;
    bytes old_acc_input_hash = 2;
    uint64 old_batch_num = 3;
    uint64 chain_id = 4;
    bytes batch_l2_data = 5;
    bytes global_exit_root = 6;
    uint64 eth_timestamp = 7;
    string coinbase = 8;
    uint32 update_merkle_tree = 9;
    bytes tx_hash_to_generate_execute_trace = 10;
    bytes tx_hash_to_generate_call_trace = 11;
    // flag to indicate that counters should not be taken into account
    uint64 no_counters = 12;
    // from is used for unsigned transactions with sender
    string from = 13;
    // For testing purposes only
    map<string, string> db = 14;
    map<string, string> contracts_bytecode = 15; // For debug/testing purpposes only. Don't fill this on production
}

message ProcessBatchResponse {
    bytes new_state_root = 1;
    bytes new_acc_input_hash = 2;
    bytes new_local_exit_root = 3;
    uint64 new_batch_num = 4;
    uint32 cnt_keccak_hashes = 5;
    uint32 cnt_poseidon_hashes = 6;
    uint32 cnt_poseidon_paddings = 7;
    uint32 cnt_mem_aligns = 8;
    uint32 cnt_arithmetics = 9;
    uint32 cnt_binaries = 10;
    uint32 cnt_steps = 11;
    uint64 cumulative_gas_used = 12;
    repeated ProcessTransactionResponse responses = 13;
    Error error = 14;
}

message CallTrace {
    TransactionContext context = 1;
    repeated TransactionStep steps = 2;
}

message TransactionContext {
    // CALL or CREATE
    string type = 1;
    // Sender of the transaction
    string from = 2;
    // Target of the transaction
    string to = 3;
    // Input data of the transaction
    bytes data = 4;
    // Gas of the transaction
    uint64 gas = 5;
    // Value of the transaction
    string value = 6;
    // Hash of the batch in which the transaction was included
    bytes batch = 7;
    // Returned data from the runtime (function result or data supplied with revert opcode)
    bytes output = 8;
    // Total gas used as result of execution
    uint64 gas_used = 9;
    // Gas Price
    string gas_price = 10;
    // Execution Time
    uint32 execution_time = 11;
    // Starting state root
    bytes old_state_root = 12;
}

message TransactionStep {
    bytes state_root = 1;
    // Call depth
    uint32 depth = 2;
    // Program counter
    uint64 pc = 3;
    // Remaining gas
    uint64 gas = 4;
    // Gas cost of the operation
    uint64 gas_cost = 5;
    // Gas refunded during the operation
    uint64 gas_refund = 6;
    // Opcode
    uint32 op = 7;
    // Content of the stack
    repeated string stack = 8;
    // Content of the memory
    bytes memory = 9;
    // Return Data
    bytes return_data = 10;
    // Contract information
    Contract contract = 11;
    // Error
    Error error = 12;
}

message Contract {
    string address = 1;
    string caller = 2;
    string value = 3;
    bytes data = 4;
    uint64 gas = 5;
}

message ProcessTransactionResponse {
    // Hash of the transaction
    bytes tx_hash = 1;
    // RLP encoded transaction
    // [nonce, gasPrice, gasLimit, to, value, data, v, r, s]
    bytes rlp_tx = 2;
    // Type indicates legacy transaction
    // It will be always 0 (legacy) in the executor
    uint32 type = 3;
    // Returned data from the runtime (function result or data supplied with revert opcode)
    bytes return_value = 4;
    // Total gas left as result of execution
    uint64 gas_left = 5;
    // Total gas used as result of execution or gas estimation
    uint64 gas_used = 6;
    // Total gas refunded as result of execution
    uint64 gas_refunded = 7;
    // Any error encountered during the execution
    Error error = 8;
    // New SC Address in case of SC creation
    string create_address = 9;
    // State Root
    bytes state_root = 10;
    // Logs emited by LOG opcode
    repeated Log logs = 11;
    // Trace
    repeated ExecutionTraceStep execution_trace = 13;
    CallTrace call_trace = 14;
}

message Log {
    // Address of the contract that generated the event
    string address = 1;
    // List of topics provided by the contract
    repeated bytes topics = 2;
    // Supplied by the contract, usually ABI-encoded
    bytes data = 3;
    // Batch in which the transaction was included
    uint64 batch_number = 4;
    // Hash of the transaction
    bytes tx_hash = 5;
    // Index of the transaction in the block
    uint32 tx_index = 6;
    // Hash of the batch in which the transaction was included
    bytes batch_hash = 7;
    // Index of the log in the block
    uint32 index = 8;
}

message ExecutionTraceStep {
    // Program Counter
    uint64 pc = 1;
    // OpCode
    string op = 2;
    // Remaining gas
    uint64 remaining_gas = 3;
    // Gas cost of the operation
    uint64 gas_cost = 4;
    // Content of memory
    bytes memory = 5;
    // Size of memory
    uint32 memory_size = 6;
    // Content of the stack
    repeated string stack = 7;
    // Returned data
    bytes return_data = 8;
    // Content of the storage
    map<string, string> storage = 9;
    // Call depth
    uint32 depth = 10;
    // Gas refund
    uint64 gas_refund = 11;
    // Error
    Error error = 12;
}

enum Error {
    ERROR_UNSPECIFIED = 0;
    // ERROR_NO_ERROR indicates the execution ended successfully
    ERROR_NO_ERROR = 1;
    // ERROR_OUT_OF_GAS indicates there is not enough balance to continue the execution
    ERROR_OUT_OF_GAS = 2;
    // ERROR_STACK_OVERFLOW indicates a stack overflow has happened
    ERROR_STACK_OVERFLOW = 3;
    // ERROR_STACK_UNDERFLOW indicates a stack overflow has happened
    ERROR_STACK_UNDERFLOW = 4;
    // ERROR_MAX_CODE_SIZE_EXCEEDED indicates the code size is beyond the maximum
    ERROR_MAX_CODE_SIZE_EXCEEDED = 5;
    // ERROR_CONTRACT_ADDRESS_COLLISION there is a collision regarding contract addresses
    ERROR_CONTRACT_ADDRESS_COLLISION = 6;
    // ERROR_EXECUTION_REVERTED indicates the execution has been reverted
    ERROR_EXECUTION_REVERTED = 7;
    // ERROR_OUT_OF_COUNTERS_STEP indicates there is not enough step counters to continue the execution
    ERROR_OUT_OF_COUNTERS_STEP = 8;
    // ERROR_OUT_OF_COUNTERS_KECCAK indicates there is not enough keccak counters to continue the execution
    ERROR_OUT_OF_COUNTERS_KECCAK = 9;
    // ERROR_OUT_OF_COUNTERS_BINARY indicates there is not enough binary counters to continue the execution
    ERROR_OUT_OF_COUNTERS_BINARY = 10;
    // ERROR_OUT_OF_COUNTERS_MEM indicates there is not enough memory aligncounters to continue the execution
    ERROR_OUT_OF_COUNTERS_MEM = 11;
    // ERROR_OUT_OF_COUNTERS_ARITH indicates there is not enough arith counters to continue the execution
    ERROR_OUT_OF_COUNTERS_ARITH = 12;
    // ERROR_OUT_OF_COUNTERS_PADDING indicates there is not enough padding counters to continue the execution
    ERROR_OUT_OF_COUNTERS_PADDING = 13;
    // ERROR_OUT_OF_COUNTERS_POSEIDON indicates there is not enough poseidon counters to continue the execution
    ERROR_OUT_OF_COUNTERS_POSEIDON = 14;
    // ERROR_INVALID_JUMP indicates there is an invalid jump opcode
    ERROR_INVALID_JUMP = 15;
    // ERROR_INVALID_OPCODE indicates there is an invalid opcode
    ERROR_INVALID_OPCODE = 16;
    // ERROR_INVALID_STATIC indicates there is an invalid static call
    ERROR_INVALID_STATIC = 17;
    // ERROR_INVALID_BYTECODE_STARTS_EF indicates there is a bytecode starting with 0xEF
    ERROR_INVALID_BYTECODE_STARTS_EF = 18;
    // ERROR_INTRINSIC_INVALID_SIGNATURE indicates the transaction is failing at the signature intrinsic check
    ERROR_INTRINSIC_INVALID_SIGNATURE = 19;
    // ERROR_INTRINSIC_INVALID_CHAIN_ID indicates the transaction is failing at the chain id intrinsic check
    ERROR_INTRINSIC_INVALID_CHAIN_ID = 20;
    // ERROR_INTRINSIC_INVALID_NONCE indicates the transaction is failing at the nonce intrinsic check
    ERROR_INTRINSIC_INVALID_NONCE = 21;
    // ERROR_INTRINSIC_INVALID_GAS indicates the transaction is failing at the gas limit intrinsic check
    ERROR_INTRINSIC_INVALID_GAS_LIMIT = 22;
    // ERROR_INTRINSIC_INVALID_BALANCE indicates the transaction is failing at balance intrinsic check
    ERROR_INTRINSIC_INVALID_BALANCE = 23;
    // ERROR_INTRINSIC_INVALID_BATCH_GAS_LIMIT indicates the batch is exceeding the batch gas limit
    ERROR_INTRINSIC_INVALID_BATCH_GAS_LIMIT = 24;
    // ERROR_INTRINSIC_INVALID_SENDER_CODE indicates the transaction sender is invalid
    ERROR_INTRINSIC_INVALID_SENDER_CODE = 25;
    // ERROR_INTRINSIC_TX_GAS_OVERFLOW indicates the transaction gasLimit*gasPrice > MAX_UINT_256 - 1
    ERROR_INTRINSIC_TX_GAS_OVERFLOW = 26;
    // ERROR_BATCH_DATA_TOO_BIG indicates the batch_l2_data is too big to be processed
    ERROR_BATCH_DATA_TOO_BIG = 27;
}