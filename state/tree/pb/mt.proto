/**
* Merkletree service.
**/


syntax = "proto3";

package mt.v1;

option go_package = "github.com/hermeznetwork/hermez-core/state/tree/pb";

service MTService {
    // Getters
    /// Get balance for a given address at a given root
    rpc GetBalance(CommonGetRequest) returns (GetBalanceResponse);
    /// Get nonce for a given address at a given root
    rpc GetNonce(CommonGetRequest) returns (GetNonceResponse);
    /// Get code for a given address at a given root
    rpc GetCode(CommonGetRequest) returns (GetCodeResponse);
    /// Get code hash for a given address at a given root
    rpc GetCodeHash(CommonGetRequest) returns (GetCodeHashResponse);
    /// Get smart contract storage for a given address and position at a given root
    rpc GetStorageAt(GetStorageAtRequest) returns (GetStorageAtResponse);
    /// Get set of reads and writes that updated the state at a given root
    rpc GetStateTransitionNodes(GetStateTransitionNodesRequest) returns (GetStateTransitionNodesResponse);
    /// Reverse a hash of an exisiting Merkletree node
    rpc ReverseHash(ReverseHashRequest) returns (ReverseHashResponse);

    // Setters
    /// Set the balance for an account at a root
    rpc SetBalance(SetBalanceRequest) returns (CommonSetResponse);
    /// Set the nonce of an account at a root
    rpc SetNonce(SetNonceRequest) returns (CommonSetResponse);
    /// Set the code for an account at a root
    rpc SetCode(SetCodeRequest) returns (CommonSetResponse);
    /// Set smart contract storage for an account and position at a root
    rpc SetStorageAt(SetStorageAtRequest) returns (CommonSetResponse);
    /// Set an entry of the reverse hash table
    rpc SetHashValue(HashValuePair) returns (SetHashValueResponse);
    /// Set many entries of the reverse hash table
    rpc SetStateTransitionNodes(SetStateTransitionNodesRequest) returns (SetStateTransitionNodesResponse);
}

// Messages common to Get and set requests
message HashValuePair {
    string hash = 1;
    string value = 2;
}

// Get requests

message CommonGetRequest {
    string eth_address = 1;
    string root = 2;
}
message GetStorageAtRequest {
    string eth_address = 1;
    uint64 position = 2;
    string root = 3;
}
message GetStateTransitionNodesRequest {
    string root = 1;
}
message ReverseHashRequest {
    string hash = 1;
    string root = 2;
}

// Set requests

message SetBalanceRequest {
    string eth_address = 1;
    string balance = 2;
    string root = 3;
}
message SetNonceRequest {
    string eth_address = 1;
    uint64 nonce = 2;
    string root = 3;
}
message SetCodeRequest {
    string eth_address = 1;
    string code = 2;
    string root = 3;
}
message SetCodeHashRequest {
    string eth_address = 1;
    string code_hash = 2;
    string root = 3;
}
message SetStorageAtRequest {
    string eth_address = 1;
    string position = 2;
    string value = 3;
    string root = 4;
}
message SetStateTransitionNodesRequest {
    repeated HashValuePair write_hash_values = 1;
    repeated HashValuePair read_hash_values = 2;
}

// Get responses

message GetBalanceResponse {
    string balance = 1;
}
message GetNonceResponse {
    uint64 nonce = 1;
}
message GetCodeResponse {
    string code = 1;
}
message GetCodeHashResponse {
    string hash = 1;
}
message GetStorageAtResponse {
    string value = 1;
}
message GetStateTransitionNodesResponse {
    repeated HashValuePair write_hash_values = 1;
    repeated HashValuePair read_hash_values = 2;
}
message ReverseHashResponse {
    string mt_node_value = 1;
}

// Set responses

message CommonSetResponse {
    bool success = 1;
    string new_root = 2;
    string error_description = 3;
}
message SetHashValueResponse {
    bool success = 1;
    string error_description = 2;
}
message SetStateTransitionNodesResponse {
    bool success = 1;
    string error_description = 2;
}
