// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: executor.proto

package executor

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RomError int32

const (
	RomError_ROM_ERROR_UNSPECIFIED RomError = 0
	// ROM_ERROR_NO_ERROR indicates the execution ended successfully
	RomError_ROM_ERROR_NO_ERROR RomError = 1
	// ROM_ERROR_OUT_OF_GAS indicates there is not enough balance to continue the execution
	RomError_ROM_ERROR_OUT_OF_GAS RomError = 2
	// ROM_ERROR_STACK_OVERFLOW indicates a stack overflow has happened
	RomError_ROM_ERROR_STACK_OVERFLOW RomError = 3
	// ROM_ERROR_STACK_UNDERFLOW indicates a stack overflow has happened
	RomError_ROM_ERROR_STACK_UNDERFLOW RomError = 4
	// ROM_ERROR_MAX_CODE_SIZE_EXCEEDED indicates the code size is beyond the maximum
	RomError_ROM_ERROR_MAX_CODE_SIZE_EXCEEDED RomError = 5
	// ROM_ERROR_CONTRACT_ADDRESS_COLLISION there is a collision regarding contract addresses
	RomError_ROM_ERROR_CONTRACT_ADDRESS_COLLISION RomError = 6
	// ROM_ERROR_EXECUTION_REVERTED indicates the execution has been reverted
	RomError_ROM_ERROR_EXECUTION_REVERTED RomError = 7
	// ROM_ERROR_OUT_OF_COUNTERS_STEP indicates there is not enough step counters to continue the execution
	RomError_ROM_ERROR_OUT_OF_COUNTERS_STEP RomError = 8
	// ROM_ERROR_OUT_OF_COUNTERS_KECCAK indicates there is not enough keccak counters to continue the execution
	RomError_ROM_ERROR_OUT_OF_COUNTERS_KECCAK RomError = 9
	// ROM_ERROR_OUT_OF_COUNTERS_BINARY indicates there is not enough binary counters to continue the execution
	RomError_ROM_ERROR_OUT_OF_COUNTERS_BINARY RomError = 10
	// ROM_ERROR_OUT_OF_COUNTERS_MEM indicates there is not enough memory aligncounters to continue the execution
	RomError_ROM_ERROR_OUT_OF_COUNTERS_MEM RomError = 11
	// ROM_ERROR_OUT_OF_COUNTERS_ARITH indicates there is not enough arith counters to continue the execution
	RomError_ROM_ERROR_OUT_OF_COUNTERS_ARITH RomError = 12
	// ROM_ERROR_OUT_OF_COUNTERS_PADDING indicates there is not enough padding counters to continue the execution
	RomError_ROM_ERROR_OUT_OF_COUNTERS_PADDING RomError = 13
	// ROM_ERROR_OUT_OF_COUNTERS_POSEIDON indicates there is not enough poseidon counters to continue the execution
	RomError_ROM_ERROR_OUT_OF_COUNTERS_POSEIDON RomError = 14
	// ROM_ERROR_OUT_OF_COUNTERS_SHA indicates there is not enough sha counters to continue the execution
	RomError_ROM_ERROR_OUT_OF_COUNTERS_SHA RomError = 15
	// ROM_ERROR_INVALID_JUMP indicates there is an invalid jump opcode
	RomError_ROM_ERROR_INVALID_JUMP RomError = 16
	// ROM_ERROR_INVALID_OPCODE indicates there is an invalid opcode
	RomError_ROM_ERROR_INVALID_OPCODE RomError = 17
	// ROM_ERROR_INVALID_STATIC indicates there is an invalid static call
	RomError_ROM_ERROR_INVALID_STATIC RomError = 18
	// ROM_ERROR_INVALID_BYTECODE_STARTS_EF indicates there is a bytecode starting with 0xEF
	RomError_ROM_ERROR_INVALID_BYTECODE_STARTS_EF RomError = 19
	// ROM_ERROR_INTRINSIC_INVALID_SIGNATURE indicates the transaction is failing at the signature intrinsic check
	RomError_ROM_ERROR_INTRINSIC_INVALID_SIGNATURE RomError = 20
	// ROM_ERROR_INTRINSIC_INVALID_CHAIN_ID indicates the transaction is failing at the chain id intrinsic check
	RomError_ROM_ERROR_INTRINSIC_INVALID_CHAIN_ID RomError = 21
	// ROM_ERROR_INTRINSIC_INVALID_NONCE indicates the transaction is failing at the nonce intrinsic check
	RomError_ROM_ERROR_INTRINSIC_INVALID_NONCE RomError = 22
	// ROM_ERROR_INTRINSIC_INVALID_GAS indicates the transaction is failing at the gas limit intrinsic check
	RomError_ROM_ERROR_INTRINSIC_INVALID_GAS_LIMIT RomError = 23
	// ROM_ERROR_INTRINSIC_INVALID_BALANCE indicates the transaction is failing at balance intrinsic check
	RomError_ROM_ERROR_INTRINSIC_INVALID_BALANCE RomError = 24
	// ROM_ERROR_INTRINSIC_INVALID_BATCH_GAS_LIMIT indicates the batch is exceeding the batch gas limit
	RomError_ROM_ERROR_INTRINSIC_INVALID_BATCH_GAS_LIMIT RomError = 25
	// ROM_ERROR_INTRINSIC_INVALID_SENDER_CODE indicates the transaction sender is invalid
	RomError_ROM_ERROR_INTRINSIC_INVALID_SENDER_CODE RomError = 26
	// ROM_ERROR_INTRINSIC_TX_GAS_OVERFLOW indicates the transaction gasLimit*gasPrice > MAX_UINT_256 - 1
	RomError_ROM_ERROR_INTRINSIC_TX_GAS_OVERFLOW RomError = 27
	// ROM_ERROR_BATCH_DATA_TOO_BIG indicates the batch_l2_data is too big to be processed
	RomError_ROM_ERROR_BATCH_DATA_TOO_BIG RomError = 28
	// ROM_ERROR_UNSUPPORTED_FORK_ID indicates that the fork id is not supported
	RomError_ROM_ERROR_UNSUPPORTED_FORK_ID RomError = 29
	// ROM_ERROR_INVALID_RLP indicates that there has been an error while parsing the RLP
	RomError_ROM_ERROR_INVALID_RLP RomError = 30
	// START V2 ROM ERRORS
	// ROM_ERROR_INVALID_DECODE_CHANGE_L2_BLOCK indicates that there has been an error while parsing decoding a change l2 block transaction
	RomError_ROM_ERROR_INVALID_DECODE_CHANGE_L2_BLOCK RomError = 31
	// ROM_ERROR_INVALID_NOT_FIRST_TX_CHANGE_L2_BLOCK indicates that the first transaction in a batch is not a change l2 block transaction
	RomError_ROM_ERROR_INVALID_NOT_FIRST_TX_CHANGE_L2_BLOCK RomError = 32
	// ROM_ERROR_INVALID_TX_CHANGE_L2_BLOCK_LIMIT_TIMESTAMP indicates that the change l2 block transaction has trigger an error during while executing
	RomError_ROM_ERROR_INVALID_TX_CHANGE_L2_BLOCK_LIMIT_TIMESTAMP RomError = 33
	// ROM_ERROR_INVALID_TX_CHANGE_L2_BLOCK_MIN_TIMESTAMP indicates that the change l2 block transaction has trigger an error during while executing
	RomError_ROM_ERROR_INVALID_TX_CHANGE_L2_BLOCK_MIN_TIMESTAMP RomError = 34
)

// Enum value maps for RomError.
var (
	RomError_name = map[int32]string{
		0:  "ROM_ERROR_UNSPECIFIED",
		1:  "ROM_ERROR_NO_ERROR",
		2:  "ROM_ERROR_OUT_OF_GAS",
		3:  "ROM_ERROR_STACK_OVERFLOW",
		4:  "ROM_ERROR_STACK_UNDERFLOW",
		5:  "ROM_ERROR_MAX_CODE_SIZE_EXCEEDED",
		6:  "ROM_ERROR_CONTRACT_ADDRESS_COLLISION",
		7:  "ROM_ERROR_EXECUTION_REVERTED",
		8:  "ROM_ERROR_OUT_OF_COUNTERS_STEP",
		9:  "ROM_ERROR_OUT_OF_COUNTERS_KECCAK",
		10: "ROM_ERROR_OUT_OF_COUNTERS_BINARY",
		11: "ROM_ERROR_OUT_OF_COUNTERS_MEM",
		12: "ROM_ERROR_OUT_OF_COUNTERS_ARITH",
		13: "ROM_ERROR_OUT_OF_COUNTERS_PADDING",
		14: "ROM_ERROR_OUT_OF_COUNTERS_POSEIDON",
		15: "ROM_ERROR_OUT_OF_COUNTERS_SHA",
		16: "ROM_ERROR_INVALID_JUMP",
		17: "ROM_ERROR_INVALID_OPCODE",
		18: "ROM_ERROR_INVALID_STATIC",
		19: "ROM_ERROR_INVALID_BYTECODE_STARTS_EF",
		20: "ROM_ERROR_INTRINSIC_INVALID_SIGNATURE",
		21: "ROM_ERROR_INTRINSIC_INVALID_CHAIN_ID",
		22: "ROM_ERROR_INTRINSIC_INVALID_NONCE",
		23: "ROM_ERROR_INTRINSIC_INVALID_GAS_LIMIT",
		24: "ROM_ERROR_INTRINSIC_INVALID_BALANCE",
		25: "ROM_ERROR_INTRINSIC_INVALID_BATCH_GAS_LIMIT",
		26: "ROM_ERROR_INTRINSIC_INVALID_SENDER_CODE",
		27: "ROM_ERROR_INTRINSIC_TX_GAS_OVERFLOW",
		28: "ROM_ERROR_BATCH_DATA_TOO_BIG",
		29: "ROM_ERROR_UNSUPPORTED_FORK_ID",
		30: "ROM_ERROR_INVALID_RLP",
		31: "ROM_ERROR_INVALID_DECODE_CHANGE_L2_BLOCK",
		32: "ROM_ERROR_INVALID_NOT_FIRST_TX_CHANGE_L2_BLOCK",
		33: "ROM_ERROR_INVALID_TX_CHANGE_L2_BLOCK_LIMIT_TIMESTAMP",
		34: "ROM_ERROR_INVALID_TX_CHANGE_L2_BLOCK_MIN_TIMESTAMP",
	}
	RomError_value = map[string]int32{
		"ROM_ERROR_UNSPECIFIED":                                0,
		"ROM_ERROR_NO_ERROR":                                   1,
		"ROM_ERROR_OUT_OF_GAS":                                 2,
		"ROM_ERROR_STACK_OVERFLOW":                             3,
		"ROM_ERROR_STACK_UNDERFLOW":                            4,
		"ROM_ERROR_MAX_CODE_SIZE_EXCEEDED":                     5,
		"ROM_ERROR_CONTRACT_ADDRESS_COLLISION":                 6,
		"ROM_ERROR_EXECUTION_REVERTED":                         7,
		"ROM_ERROR_OUT_OF_COUNTERS_STEP":                       8,
		"ROM_ERROR_OUT_OF_COUNTERS_KECCAK":                     9,
		"ROM_ERROR_OUT_OF_COUNTERS_BINARY":                     10,
		"ROM_ERROR_OUT_OF_COUNTERS_MEM":                        11,
		"ROM_ERROR_OUT_OF_COUNTERS_ARITH":                      12,
		"ROM_ERROR_OUT_OF_COUNTERS_PADDING":                    13,
		"ROM_ERROR_OUT_OF_COUNTERS_POSEIDON":                   14,
		"ROM_ERROR_OUT_OF_COUNTERS_SHA":                        15,
		"ROM_ERROR_INVALID_JUMP":                               16,
		"ROM_ERROR_INVALID_OPCODE":                             17,
		"ROM_ERROR_INVALID_STATIC":                             18,
		"ROM_ERROR_INVALID_BYTECODE_STARTS_EF":                 19,
		"ROM_ERROR_INTRINSIC_INVALID_SIGNATURE":                20,
		"ROM_ERROR_INTRINSIC_INVALID_CHAIN_ID":                 21,
		"ROM_ERROR_INTRINSIC_INVALID_NONCE":                    22,
		"ROM_ERROR_INTRINSIC_INVALID_GAS_LIMIT":                23,
		"ROM_ERROR_INTRINSIC_INVALID_BALANCE":                  24,
		"ROM_ERROR_INTRINSIC_INVALID_BATCH_GAS_LIMIT":          25,
		"ROM_ERROR_INTRINSIC_INVALID_SENDER_CODE":              26,
		"ROM_ERROR_INTRINSIC_TX_GAS_OVERFLOW":                  27,
		"ROM_ERROR_BATCH_DATA_TOO_BIG":                         28,
		"ROM_ERROR_UNSUPPORTED_FORK_ID":                        29,
		"ROM_ERROR_INVALID_RLP":                                30,
		"ROM_ERROR_INVALID_DECODE_CHANGE_L2_BLOCK":             31,
		"ROM_ERROR_INVALID_NOT_FIRST_TX_CHANGE_L2_BLOCK":       32,
		"ROM_ERROR_INVALID_TX_CHANGE_L2_BLOCK_LIMIT_TIMESTAMP": 33,
		"ROM_ERROR_INVALID_TX_CHANGE_L2_BLOCK_MIN_TIMESTAMP":   34,
	}
)

func (x RomError) Enum() *RomError {
	p := new(RomError)
	*p = x
	return p
}

func (x RomError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RomError) Descriptor() protoreflect.EnumDescriptor {
	return file_executor_proto_enumTypes[0].Descriptor()
}

func (RomError) Type() protoreflect.EnumType {
	return &file_executor_proto_enumTypes[0]
}

func (x RomError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RomError.Descriptor instead.
func (RomError) EnumDescriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{0}
}

type ExecutorError int32

const (
	ExecutorError_EXECUTOR_ERROR_UNSPECIFIED ExecutorError = 0
	// EXECUTOR_ERROR_NO_ERROR indicates there was no error
	ExecutorError_EXECUTOR_ERROR_NO_ERROR ExecutorError = 1
	// EXECUTOR_ERROR_DB_ERROR indicates that there is an error connecting to the database
	ExecutorError_EXECUTOR_ERROR_DB_ERROR ExecutorError = 2
	// EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_STEPS indicates that the main execution exceeded the maximum number of steps
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_STEPS ExecutorError = 3
	// EXECUTOR_ERROR_COUNTERS_OVERFLOW_KECCAK indicates that the keccak counter exceeded the maximum
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_KECCAK ExecutorError = 4
	// EXECUTOR_ERROR_COUNTERS_OVERFLOW_BINARY indicates that the binary counter exceeded the maximum
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_BINARY ExecutorError = 5
	// EXECUTOR_ERROR_COUNTERS_OVERFLOW_MEM indicates that the memory align counter exceeded the maximum
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_MEM ExecutorError = 6
	// EXECUTOR_ERROR_COUNTERS_OVERFLOW_ARITH indicates that the arith counter exceeded the maximum
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_ARITH ExecutorError = 7
	// EXECUTOR_ERROR_COUNTERS_OVERFLOW_PADDING indicates that the padding counter exceeded the maximum
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_PADDING ExecutorError = 8
	// EXECUTOR_ERROR_COUNTERS_OVERFLOW_POSEIDON indicates that the poseidon counter exceeded the maximum
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_POSEIDON ExecutorError = 9
	// EXECUTOR_ERROR_UNSUPPORTED_FORK_ID indicates that the fork id is not supported
	ExecutorError_EXECUTOR_ERROR_UNSUPPORTED_FORK_ID ExecutorError = 10
	// EXECUTOR_ERROR_BALANCE_MISMATCH indicates that there is a balance mismatch error in the ROM
	ExecutorError_EXECUTOR_ERROR_BALANCE_MISMATCH ExecutorError = 11
	// EXECUTOR_ERROR_FEA2SCALAR indicates that there is a fea2scalar error in the execution
	ExecutorError_EXECUTOR_ERROR_FEA2SCALAR ExecutorError = 12
	// EXECUTOR_ERROR_TOS32 indicates that there is a TOS32 error in the execution
	ExecutorError_EXECUTOR_ERROR_TOS32 ExecutorError = 13
	// EXECUTOR_ERROR_SM_MAIN_INVALID_UNSIGNED_TX indicates that there is an unsigned TX in a non-process batch (i.e. in a prover request)
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_INVALID_UNSIGNED_TX ExecutorError = 14
	// EXECUTOR_ERROR_SM_MAIN_INVALID_NO_COUNTERS indicates that there is a no-counters request in a non-process batch (i.e. in a prover request)
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_INVALID_NO_COUNTERS ExecutorError = 15
	// EXECUTOR_ERROR_SM_MAIN_ARITH_ECRECOVER_DIVIDE_BY_ZERO indicates that there is a divide-by-zero situation during an ECRecover
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_ARITH_ECRECOVER_DIVIDE_BY_ZERO ExecutorError = 16
	// EXECUTOR_ERROR_SM_MAIN_ADDRESS_OUT_OF_RANGE indicates that an address is out of valid memory space range
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_ADDRESS_OUT_OF_RANGE ExecutorError = 17
	// EXECUTOR_ERROR_SM_MAIN_ADDRESS_NEGATIVE indicates that an address is negative
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_ADDRESS_NEGATIVE ExecutorError = 18
	// EXECUTOR_ERROR_SM_MAIN_STORAGE_INVALID_KEY indicates that a register value is out of range while building storage key
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_STORAGE_INVALID_KEY ExecutorError = 19
	// EXECUTOR_ERROR_SM_MAIN_HASHK indicates that a register value is out of range while calculating a Keccak hash
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHK ExecutorError = 20
	// EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_OUT_OF_RANGE indicates that a size register value is out of range while calculating a Keccak hash
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_OUT_OF_RANGE ExecutorError = 21
	// EXECUTOR_ERROR_SM_MAIN_HASHK_POSITION_NEGATIVE indicates that a position register value is negative while calculating a Keccak hash
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHK_POSITION_NEGATIVE ExecutorError = 22
	// EXECUTOR_ERROR_SM_MAIN_HASHK_POSITION_PLUS_SIZE_OUT_OF_RANGE indicates that a position register value plus a size register value is out of range while calculating a Keccak hash
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHK_POSITION_PLUS_SIZE_OUT_OF_RANGE ExecutorError = 23
	// EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_ADDRESS_NOT_FOUND indicates that an address has not been found while calculating a Keccak hash digest
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_ADDRESS_NOT_FOUND ExecutorError = 24
	// EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT_COMPLETED indicates that the hash has not been completed while calling a Keccak hash digest
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT_COMPLETED ExecutorError = 25
	// EXECUTOR_ERROR_SM_MAIN_HASHP indicates that a register value is out of range while calculating a Poseidon hash
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHP ExecutorError = 26
	// EXECUTOR_ERROR_SM_MAIN_HASHP_SIZE_OUT_OF_RANGE indicates that a size register value is out of range while calculating a Poseidon hash
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHP_SIZE_OUT_OF_RANGE ExecutorError = 27
	// EXECUTOR_ERROR_SM_MAIN_HASHP_POSITION_NEGATIVE indicates that a position register value is negative while calculating a Poseidon hash
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHP_POSITION_NEGATIVE ExecutorError = 28
	// EXECUTOR_ERROR_SM_MAIN_HASHP_POSITION_PLUS_SIZE_OUT_OF_RANGE indicates that a position register value plus a size register value is out of range while calculating a Poseidon hash
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHP_POSITION_PLUS_SIZE_OUT_OF_RANGE ExecutorError = 29
	// EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_ADDRESS_NOT_FOUND indicates that an address has not been found while calculating a Poseidon hash digest
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_ADDRESS_NOT_FOUND ExecutorError = 30
	// EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_NOT_COMPLETED indicates that the hash has not been completed while calling a Poseidon hash digest
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_NOT_COMPLETED ExecutorError = 31
	// EXECUTOR_ERROR_SM_MAIN_MEMALIGN_OFFSET_OUT_OF_RANGE indicates that the an offset register value is out of range while doing a mem align operation
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_MEMALIGN_OFFSET_OUT_OF_RANGE ExecutorError = 32
	// EXECUTOR_ERROR_SM_MAIN_MULTIPLE_FREEIN indicates that we got more than one free inputs in one ROM instruction
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_MULTIPLE_FREEIN ExecutorError = 33
	// EXECUTOR_ERROR_SM_MAIN_ASSERT indicates that the ROM assert instruction failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_ASSERT ExecutorError = 34
	// EXECUTOR_ERROR_SM_MAIN_MEMORY indicates that the memory instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_MEMORY ExecutorError = 35
	// EXECUTOR_ERROR_SM_MAIN_STORAGE_READ_MISMATCH indicates that the storage read instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_STORAGE_READ_MISMATCH ExecutorError = 36
	// EXECUTOR_ERROR_SM_MAIN_STORAGE_WRITE_MISMATCH indicates that the storage read instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_STORAGE_WRITE_MISMATCH ExecutorError = 37
	// EXECUTOR_ERROR_SM_MAIN_HASHK_VALUE_MISMATCH indicates that the Keccak hash instruction value check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHK_VALUE_MISMATCH ExecutorError = 38
	// EXECUTOR_ERROR_SM_MAIN_HASHK_PADDING_MISMATCH indicates that the Keccak hash instruction padding check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHK_PADDING_MISMATCH ExecutorError = 39
	// EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_MISMATCH indicates that the Keccak hash instruction size check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_MISMATCH ExecutorError = 40
	// EXECUTOR_ERROR_SM_MAIN_HASHKLEN_LENGTH_MISMATCH indicates that the Keccak hash length instruction length check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHKLEN_LENGTH_MISMATCH ExecutorError = 41
	// EXECUTOR_ERROR_SM_MAIN_HASHKLEN_CALLED_TWICE indicates that the Keccak hash length instruction called once check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHKLEN_CALLED_TWICE ExecutorError = 42
	// EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT_FOUND indicates that the Keccak hash digest instruction slot not found
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT_FOUND ExecutorError = 43
	// EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_DIGEST_MISMATCH indicates that the Keccak hash digest instruction digest check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_DIGEST_MISMATCH ExecutorError = 44
	// EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_CALLED_TWICE indicates that the Keccak hash digest instruction called once check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_CALLED_TWICE ExecutorError = 45
	// EXECUTOR_ERROR_SM_MAIN_HASHP_VALUE_MISMATCH indicates that the Poseidon hash instruction value check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHP_VALUE_MISMATCH ExecutorError = 46
	// EXECUTOR_ERROR_SM_MAIN_HASHP_PADDING_MISMATCH indicates that the Poseidon hash instruction padding check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHP_PADDING_MISMATCH ExecutorError = 47
	// EXECUTOR_ERROR_SM_MAIN_HASHP_SIZE_MISMATCH indicates that the Poseidon hash instruction size check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHP_SIZE_MISMATCH ExecutorError = 48
	// EXECUTOR_ERROR_SM_MAIN_HASHPLEN_LENGTH_MISMATCH indicates that the Poseidon hash length instruction length check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHPLEN_LENGTH_MISMATCH ExecutorError = 49
	// EXECUTOR_ERROR_SM_MAIN_HASHPLEN_CALLED_TWICE indicates that the Poseidon hash length instruction called once check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHPLEN_CALLED_TWICE ExecutorError = 50
	// EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_DIGEST_MISMATCH indicates that the Poseidon hash digest instruction digest check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_DIGEST_MISMATCH ExecutorError = 51
	// EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_CALLED_TWICE indicates that the Poseidon hash digest instruction called once check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_CALLED_TWICE ExecutorError = 52
	// EXECUTOR_ERROR_SM_MAIN_ARITH_MISMATCH indicates that the arith instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_ARITH_MISMATCH ExecutorError = 53
	// EXECUTOR_ERROR_SM_MAIN_ARITH_ECRECOVER_MISMATCH indicates that the arith ECRecover instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_ARITH_ECRECOVER_MISMATCH ExecutorError = 54
	// EXECUTOR_ERROR_SM_MAIN_BINARY_ADD_MISMATCH indicates that the binary add instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_BINARY_ADD_MISMATCH ExecutorError = 55
	// EXECUTOR_ERROR_SM_MAIN_BINARY_SUB_MISMATCH indicates that the binary sub instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_BINARY_SUB_MISMATCH ExecutorError = 56
	// EXECUTOR_ERROR_SM_MAIN_BINARY_LT_MISMATCH indicates that the binary less than instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_BINARY_LT_MISMATCH ExecutorError = 57
	// EXECUTOR_ERROR_SM_MAIN_BINARY_SLT_MISMATCH indicates that the binary signed less than instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_BINARY_SLT_MISMATCH ExecutorError = 58
	// EXECUTOR_ERROR_SM_MAIN_BINARY_EQ_MISMATCH indicates that the binary equal instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_BINARY_EQ_MISMATCH ExecutorError = 59
	// EXECUTOR_ERROR_SM_MAIN_BINARY_AND_MISMATCH indicates that the binary and instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_BINARY_AND_MISMATCH ExecutorError = 60
	// EXECUTOR_ERROR_SM_MAIN_BINARY_OR_MISMATCH indicates that the binary or instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_BINARY_OR_MISMATCH ExecutorError = 61
	// EXECUTOR_ERROR_SM_MAIN_BINARY_XOR_MISMATCH indicates that the binary xor instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_BINARY_XOR_MISMATCH ExecutorError = 62
	// EXECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE_MISMATCH indicates that the memory align write instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE_MISMATCH ExecutorError = 63
	// EXECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE8_MISMATCH indicates that the memory align write 8 instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE8_MISMATCH ExecutorError = 64
	// EXECUTOR_ERROR_SM_MAIN_MEMALIGN_READ_MISMATCH indicates that the memory align read instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_MEMALIGN_READ_MISMATCH ExecutorError = 65
	// EXECUTOR_ERROR_SM_MAIN_JMPN_OUT_OF_RANGE indicates that the JMPN instruction found a jump position out of range
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_JMPN_OUT_OF_RANGE ExecutorError = 66
	// EXECUTOR_ERROR_SM_MAIN_HASHK_READ_OUT_OF_RANGE indicates that the main execution Keccak check found read out of range
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHK_READ_OUT_OF_RANGE ExecutorError = 67
	// EXECUTOR_ERROR_SM_MAIN_HASHP_READ_OUT_OF_RANGE indicates that the main execution Poseidon check found read out of range
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHP_READ_OUT_OF_RANGE ExecutorError = 68
	// EXECUTOR_ERROR_INVALID_OLD_STATE_ROOT indicates that the input parameter old_state_root is invalid
	ExecutorError_EXECUTOR_ERROR_INVALID_OLD_STATE_ROOT ExecutorError = 69
	// EXECUTOR_ERROR_INVALID_OLD_ACC_INPUT_HASH indicates that the input parameter old_acc_input_hash is invalid
	ExecutorError_EXECUTOR_ERROR_INVALID_OLD_ACC_INPUT_HASH ExecutorError = 70
	// EXECUTOR_ERROR_INVALID_CHAIN_ID indicates that the input parameter chain_id is invalid
	ExecutorError_EXECUTOR_ERROR_INVALID_CHAIN_ID ExecutorError = 71
	// EXECUTOR_ERROR_INVALID_BATCH_L2_DATA indicates that the input parameter batch_l2_data is invalid
	ExecutorError_EXECUTOR_ERROR_INVALID_BATCH_L2_DATA ExecutorError = 72
	// EXECUTOR_ERROR_INVALID_GLOBAL_EXIT_ROOT indicates that the input parameter global_exit_root is invalid
	ExecutorError_EXECUTOR_ERROR_INVALID_GLOBAL_EXIT_ROOT ExecutorError = 73
	// EXECUTOR_ERROR_INVALID_COINBASE indicates that the input parameter coinbase (i.e. sequencer address) is invalid
	ExecutorError_EXECUTOR_ERROR_INVALID_COINBASE ExecutorError = 74
	// EXECUTOR_ERROR_INVALID_FROM indicates that the input parameter from is invalid
	ExecutorError_EXECUTOR_ERROR_INVALID_FROM ExecutorError = 75
	// EXECUTOR_ERROR_INVALID_DB_KEY indicates that the input parameter db key is invalid
	ExecutorError_EXECUTOR_ERROR_INVALID_DB_KEY ExecutorError = 76
	// EXECUTOR_ERROR_INVALID_DB_VALUE indicates that the input parameter db value is invalid
	ExecutorError_EXECUTOR_ERROR_INVALID_DB_VALUE ExecutorError = 77
	// EXECUTOR_ERROR_INVALID_CONTRACTS_BYTECODE_KEY indicates that the input parameter contracts_bytecode key is invalid
	ExecutorError_EXECUTOR_ERROR_INVALID_CONTRACTS_BYTECODE_KEY ExecutorError = 78
	// EXECUTOR_ERROR_INVALID_CONTRACTS_BYTECODE_VALUE indicates that the input parameter contracts_bytecode value is invalid
	ExecutorError_EXECUTOR_ERROR_INVALID_CONTRACTS_BYTECODE_VALUE ExecutorError = 79
	// EXECUTOR_ERROR_INVALID_GET_KEY indicates that the input parameter get key is invalid, e.g. is true but fork_id<5
	ExecutorError_EXECUTOR_ERROR_INVALID_GET_KEY ExecutorError = 80
	// START V2 EXECUTOR ERRORS
	// EXECUTOR_ERROR_COUNTERS_OVERFLOW_SHA256 indicates that the SHA-256 counter exceeded the maximum
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_SHA256 ExecutorError = 81
	// EXECUTOR_ERROR_SM_MAIN_HASHS indicates that a register value is out of range while calculating a SHA-256 hash
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHS ExecutorError = 82
	// EXECUTOR_ERROR_SM_MAIN_HASHS_SIZE_OUT_OF_RANGE indicates that a size register value is out of range while calculating a SHA-256 hash
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHS_SIZE_OUT_OF_RANGE ExecutorError = 83
	// EXECUTOR_ERROR_SM_MAIN_HASHS_POSITION_NEGATIVE indicates that a position register value is negative while calculating a SHA-256 hash
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHS_POSITION_NEGATIVE ExecutorError = 84
	// EXECUTOR_ERROR_SM_MAIN_HASHS_POSITION_PLUS_SIZE_OUT_OF_RANGE indicates that a position register value plus a size register value is out of range while calculating a SHA-256 hash
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHS_POSITION_PLUS_SIZE_OUT_OF_RANGE ExecutorError = 85
	// EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_ADDRESS_NOT_FOUND indicates that an address has not been found while calculating a SHA-256 hash digest
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_ADDRESS_NOT_FOUND ExecutorError = 86
	// EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_NOT_COMPLETED indicates that the hash has not been completed while calling a SHA-256 hash digest
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_NOT_COMPLETED ExecutorError = 87
	// EXECUTOR_ERROR_SM_MAIN_HASHS_VALUE_MISMATCH indicates that the SHA-256 hash instruction value check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHS_VALUE_MISMATCH ExecutorError = 88
	// EXECUTOR_ERROR_SM_MAIN_HASHS_PADDING_MISMATCH indicates that the SHA-256 hash instruction padding check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHS_PADDING_MISMATCH ExecutorError = 89
	// EXECUTOR_ERROR_SM_MAIN_HASHS_SIZE_MISMATCH indicates that the SHA-256 hash instruction size check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHS_SIZE_MISMATCH ExecutorError = 90
	// EXECUTOR_ERROR_SM_MAIN_HASHSLEN_LENGTH_MISMATCH indicates that the SHA-256 hash length instruction length check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHSLEN_LENGTH_MISMATCH ExecutorError = 91
	// EXECUTOR_ERROR_SM_MAIN_HASHSLEN_CALLED_TWICE indicates that the SHA-256 hash length instruction called once check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHSLEN_CALLED_TWICE ExecutorError = 92
	// EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_NOT_FOUND indicates that the SHA-256 hash digest instruction slot not found
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_NOT_FOUND ExecutorError = 93
	// EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_DIGEST_MISMATCH indicates that the SHA-256 hash digest instruction digest check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_DIGEST_MISMATCH ExecutorError = 94
	// EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_CALLED_TWICE indicates that the SHA-256 hash digest instruction called once check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_CALLED_TWICE ExecutorError = 95
	// EXECUTOR_ERROR_SM_MAIN_HASHS_READ_OUT_OF_RANGE indicates that the main execution SHA-256 check found read out of range
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHS_READ_OUT_OF_RANGE ExecutorError = 96
	// EXECUTOR_ERROR_INVALID_L1_INFO_ROOT indicates that the input parameter L1 info root value is invalid
	ExecutorError_EXECUTOR_ERROR_INVALID_L1_INFO_ROOT ExecutorError = 97
	// EXECUTOR_ERROR_INVALID_FORCED_BLOCKHASH_L1 indicates that the input parameter forced blockhash L1 value is invalid
	ExecutorError_EXECUTOR_ERROR_INVALID_FORCED_BLOCKHASH_L1 ExecutorError = 98
	// EXECUTOR_ERROR_INVALID_L1_DATA_V2_GLOBAL_EXIT_ROOT indicates that the input parameter L1 data V2 global exit root value is invalid
	ExecutorError_EXECUTOR_ERROR_INVALID_L1_DATA_V2_GLOBAL_EXIT_ROOT ExecutorError = 99
	// EXECUTOR_ERROR_INVALID_L1_DATA_V2_BLOCK_HASH_L1 indicates that the input parameter L1 data V2 block hash L1 value is invalid
	ExecutorError_EXECUTOR_ERROR_INVALID_L1_DATA_V2_BLOCK_HASH_L1 ExecutorError = 100
	// EXECUTOR_ERROR_INVALID_L1_SMT_PROOF indicates that the input parameter L1 data V2 SMT proof value is invalid
	ExecutorError_EXECUTOR_ERROR_INVALID_L1_SMT_PROOF ExecutorError = 101
	// EXECUTOR_ERROR_INVALID_BALANCE indicates that the input parameter balance value is invalid
	ExecutorError_EXECUTOR_ERROR_INVALID_BALANCE ExecutorError = 102
	// EXECUTOR_ERROR_SM_MAIN_BINARY_LT4_MISMATCH indicates that the binary instruction less than four opcode failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_BINARY_LT4_MISMATCH ExecutorError = 103
	// EXECUTOR_ERROR_INVALID_NEW_STATE_ROOT indicates that the input parameter new_state_root is invalid
	ExecutorError_EXECUTOR_ERROR_INVALID_NEW_STATE_ROOT ExecutorError = 104
	// EXECUTOR_ERROR_INVALID_NEW_ACC_INPUT_HASH indicates that the input parameter new_acc_input_hash is invalid
	ExecutorError_EXECUTOR_ERROR_INVALID_NEW_ACC_INPUT_HASH ExecutorError = 105
	// EXECUTOR_ERROR_INVALID_NEW_LOCAL_EXIT_ROOT indicates that the input parameter new_local_exit_root is invalid
	ExecutorError_EXECUTOR_ERROR_INVALID_NEW_LOCAL_EXIT_ROOT ExecutorError = 106
	// EXECUTOR_ERROR_DB_KEY_NOT_FOUND indicates that the requested key was not found in the database
	ExecutorError_EXECUTOR_ERROR_DB_KEY_NOT_FOUND ExecutorError = 107
	// EXECUTOR_ERROR_SMT_INVALID_DATA_SIZE indicates that the SMT data returned from the database does not have a valid size
	ExecutorError_EXECUTOR_ERROR_SMT_INVALID_DATA_SIZE ExecutorError = 108
	// EXECUTOR_ERROR_HASHDB_GRPC_ERROR indicates that the executor failed calling the HashDB service via GRPC, when configured
	ExecutorError_EXECUTOR_ERROR_HASHDB_GRPC_ERROR ExecutorError = 109
	// EXECUTOR_ERROR_STATE_MANAGER indicates an error in the State Manager
	ExecutorError_EXECUTOR_ERROR_STATE_MANAGER ExecutorError = 110
	// EXECUTOR_ERROR_INVALID_L1_INFO_TREE_INDEX indicates that the ROM asked for an L1InfoTree index that was not present in the input
	ExecutorError_EXECUTOR_ERROR_INVALID_L1_INFO_TREE_INDEX ExecutorError = 111
	// EXECUTOR_ERROR_INVALID_L1_INFO_TREE_SMT_PROOF_VALUE indicates that the ROM asked for an L1InfoTree SMT proof that was not present in the input
	ExecutorError_EXECUTOR_ERROR_INVALID_L1_INFO_TREE_SMT_PROOF_VALUE ExecutorError = 112
)

// Enum value maps for ExecutorError.
var (
	ExecutorError_name = map[int32]string{
		0:   "EXECUTOR_ERROR_UNSPECIFIED",
		1:   "EXECUTOR_ERROR_NO_ERROR",
		2:   "EXECUTOR_ERROR_DB_ERROR",
		3:   "EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_STEPS",
		4:   "EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_KECCAK",
		5:   "EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_BINARY",
		6:   "EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_MEM",
		7:   "EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_ARITH",
		8:   "EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_PADDING",
		9:   "EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_POSEIDON",
		10:  "EXECUTOR_ERROR_UNSUPPORTED_FORK_ID",
		11:  "EXECUTOR_ERROR_BALANCE_MISMATCH",
		12:  "EXECUTOR_ERROR_FEA2SCALAR",
		13:  "EXECUTOR_ERROR_TOS32",
		14:  "EXECUTOR_ERROR_SM_MAIN_INVALID_UNSIGNED_TX",
		15:  "EXECUTOR_ERROR_SM_MAIN_INVALID_NO_COUNTERS",
		16:  "EXECUTOR_ERROR_SM_MAIN_ARITH_ECRECOVER_DIVIDE_BY_ZERO",
		17:  "EXECUTOR_ERROR_SM_MAIN_ADDRESS_OUT_OF_RANGE",
		18:  "EXECUTOR_ERROR_SM_MAIN_ADDRESS_NEGATIVE",
		19:  "EXECUTOR_ERROR_SM_MAIN_STORAGE_INVALID_KEY",
		20:  "EXECUTOR_ERROR_SM_MAIN_HASHK",
		21:  "EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_OUT_OF_RANGE",
		22:  "EXECUTOR_ERROR_SM_MAIN_HASHK_POSITION_NEGATIVE",
		23:  "EXECUTOR_ERROR_SM_MAIN_HASHK_POSITION_PLUS_SIZE_OUT_OF_RANGE",
		24:  "EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_ADDRESS_NOT_FOUND",
		25:  "EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT_COMPLETED",
		26:  "EXECUTOR_ERROR_SM_MAIN_HASHP",
		27:  "EXECUTOR_ERROR_SM_MAIN_HASHP_SIZE_OUT_OF_RANGE",
		28:  "EXECUTOR_ERROR_SM_MAIN_HASHP_POSITION_NEGATIVE",
		29:  "EXECUTOR_ERROR_SM_MAIN_HASHP_POSITION_PLUS_SIZE_OUT_OF_RANGE",
		30:  "EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_ADDRESS_NOT_FOUND",
		31:  "EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_NOT_COMPLETED",
		32:  "EXECUTOR_ERROR_SM_MAIN_MEMALIGN_OFFSET_OUT_OF_RANGE",
		33:  "EXECUTOR_ERROR_SM_MAIN_MULTIPLE_FREEIN",
		34:  "EXECUTOR_ERROR_SM_MAIN_ASSERT",
		35:  "EXECUTOR_ERROR_SM_MAIN_MEMORY",
		36:  "EXECUTOR_ERROR_SM_MAIN_STORAGE_READ_MISMATCH",
		37:  "EXECUTOR_ERROR_SM_MAIN_STORAGE_WRITE_MISMATCH",
		38:  "EXECUTOR_ERROR_SM_MAIN_HASHK_VALUE_MISMATCH",
		39:  "EXECUTOR_ERROR_SM_MAIN_HASHK_PADDING_MISMATCH",
		40:  "EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_MISMATCH",
		41:  "EXECUTOR_ERROR_SM_MAIN_HASHKLEN_LENGTH_MISMATCH",
		42:  "EXECUTOR_ERROR_SM_MAIN_HASHKLEN_CALLED_TWICE",
		43:  "EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT_FOUND",
		44:  "EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_DIGEST_MISMATCH",
		45:  "EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_CALLED_TWICE",
		46:  "EXECUTOR_ERROR_SM_MAIN_HASHP_VALUE_MISMATCH",
		47:  "EXECUTOR_ERROR_SM_MAIN_HASHP_PADDING_MISMATCH",
		48:  "EXECUTOR_ERROR_SM_MAIN_HASHP_SIZE_MISMATCH",
		49:  "EXECUTOR_ERROR_SM_MAIN_HASHPLEN_LENGTH_MISMATCH",
		50:  "EXECUTOR_ERROR_SM_MAIN_HASHPLEN_CALLED_TWICE",
		51:  "EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_DIGEST_MISMATCH",
		52:  "EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_CALLED_TWICE",
		53:  "EXECUTOR_ERROR_SM_MAIN_ARITH_MISMATCH",
		54:  "EXECUTOR_ERROR_SM_MAIN_ARITH_ECRECOVER_MISMATCH",
		55:  "EXECUTOR_ERROR_SM_MAIN_BINARY_ADD_MISMATCH",
		56:  "EXECUTOR_ERROR_SM_MAIN_BINARY_SUB_MISMATCH",
		57:  "EXECUTOR_ERROR_SM_MAIN_BINARY_LT_MISMATCH",
		58:  "EXECUTOR_ERROR_SM_MAIN_BINARY_SLT_MISMATCH",
		59:  "EXECUTOR_ERROR_SM_MAIN_BINARY_EQ_MISMATCH",
		60:  "EXECUTOR_ERROR_SM_MAIN_BINARY_AND_MISMATCH",
		61:  "EXECUTOR_ERROR_SM_MAIN_BINARY_OR_MISMATCH",
		62:  "EXECUTOR_ERROR_SM_MAIN_BINARY_XOR_MISMATCH",
		63:  "EXECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE_MISMATCH",
		64:  "EXECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE8_MISMATCH",
		65:  "EXECUTOR_ERROR_SM_MAIN_MEMALIGN_READ_MISMATCH",
		66:  "EXECUTOR_ERROR_SM_MAIN_JMPN_OUT_OF_RANGE",
		67:  "EXECUTOR_ERROR_SM_MAIN_HASHK_READ_OUT_OF_RANGE",
		68:  "EXECUTOR_ERROR_SM_MAIN_HASHP_READ_OUT_OF_RANGE",
		69:  "EXECUTOR_ERROR_INVALID_OLD_STATE_ROOT",
		70:  "EXECUTOR_ERROR_INVALID_OLD_ACC_INPUT_HASH",
		71:  "EXECUTOR_ERROR_INVALID_CHAIN_ID",
		72:  "EXECUTOR_ERROR_INVALID_BATCH_L2_DATA",
		73:  "EXECUTOR_ERROR_INVALID_GLOBAL_EXIT_ROOT",
		74:  "EXECUTOR_ERROR_INVALID_COINBASE",
		75:  "EXECUTOR_ERROR_INVALID_FROM",
		76:  "EXECUTOR_ERROR_INVALID_DB_KEY",
		77:  "EXECUTOR_ERROR_INVALID_DB_VALUE",
		78:  "EXECUTOR_ERROR_INVALID_CONTRACTS_BYTECODE_KEY",
		79:  "EXECUTOR_ERROR_INVALID_CONTRACTS_BYTECODE_VALUE",
		80:  "EXECUTOR_ERROR_INVALID_GET_KEY",
		81:  "EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_SHA256",
		82:  "EXECUTOR_ERROR_SM_MAIN_HASHS",
		83:  "EXECUTOR_ERROR_SM_MAIN_HASHS_SIZE_OUT_OF_RANGE",
		84:  "EXECUTOR_ERROR_SM_MAIN_HASHS_POSITION_NEGATIVE",
		85:  "EXECUTOR_ERROR_SM_MAIN_HASHS_POSITION_PLUS_SIZE_OUT_OF_RANGE",
		86:  "EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_ADDRESS_NOT_FOUND",
		87:  "EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_NOT_COMPLETED",
		88:  "EXECUTOR_ERROR_SM_MAIN_HASHS_VALUE_MISMATCH",
		89:  "EXECUTOR_ERROR_SM_MAIN_HASHS_PADDING_MISMATCH",
		90:  "EXECUTOR_ERROR_SM_MAIN_HASHS_SIZE_MISMATCH",
		91:  "EXECUTOR_ERROR_SM_MAIN_HASHSLEN_LENGTH_MISMATCH",
		92:  "EXECUTOR_ERROR_SM_MAIN_HASHSLEN_CALLED_TWICE",
		93:  "EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_NOT_FOUND",
		94:  "EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_DIGEST_MISMATCH",
		95:  "EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_CALLED_TWICE",
		96:  "EXECUTOR_ERROR_SM_MAIN_HASHS_READ_OUT_OF_RANGE",
		97:  "EXECUTOR_ERROR_INVALID_L1_INFO_ROOT",
		98:  "EXECUTOR_ERROR_INVALID_FORCED_BLOCKHASH_L1",
		99:  "EXECUTOR_ERROR_INVALID_L1_DATA_V2_GLOBAL_EXIT_ROOT",
		100: "EXECUTOR_ERROR_INVALID_L1_DATA_V2_BLOCK_HASH_L1",
		101: "EXECUTOR_ERROR_INVALID_L1_SMT_PROOF",
		102: "EXECUTOR_ERROR_INVALID_BALANCE",
		103: "EXECUTOR_ERROR_SM_MAIN_BINARY_LT4_MISMATCH",
		104: "EXECUTOR_ERROR_INVALID_NEW_STATE_ROOT",
		105: "EXECUTOR_ERROR_INVALID_NEW_ACC_INPUT_HASH",
		106: "EXECUTOR_ERROR_INVALID_NEW_LOCAL_EXIT_ROOT",
		107: "EXECUTOR_ERROR_DB_KEY_NOT_FOUND",
		108: "EXECUTOR_ERROR_SMT_INVALID_DATA_SIZE",
		109: "EXECUTOR_ERROR_HASHDB_GRPC_ERROR",
		110: "EXECUTOR_ERROR_STATE_MANAGER",
		111: "EXECUTOR_ERROR_INVALID_L1_INFO_TREE_INDEX",
		112: "EXECUTOR_ERROR_INVALID_L1_INFO_TREE_SMT_PROOF_VALUE",
	}
	ExecutorError_value = map[string]int32{
		"EXECUTOR_ERROR_UNSPECIFIED":                                   0,
		"EXECUTOR_ERROR_NO_ERROR":                                      1,
		"EXECUTOR_ERROR_DB_ERROR":                                      2,
		"EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_STEPS":               3,
		"EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_KECCAK":              4,
		"EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_BINARY":              5,
		"EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_MEM":                 6,
		"EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_ARITH":               7,
		"EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_PADDING":             8,
		"EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_POSEIDON":            9,
		"EXECUTOR_ERROR_UNSUPPORTED_FORK_ID":                           10,
		"EXECUTOR_ERROR_BALANCE_MISMATCH":                              11,
		"EXECUTOR_ERROR_FEA2SCALAR":                                    12,
		"EXECUTOR_ERROR_TOS32":                                         13,
		"EXECUTOR_ERROR_SM_MAIN_INVALID_UNSIGNED_TX":                   14,
		"EXECUTOR_ERROR_SM_MAIN_INVALID_NO_COUNTERS":                   15,
		"EXECUTOR_ERROR_SM_MAIN_ARITH_ECRECOVER_DIVIDE_BY_ZERO":        16,
		"EXECUTOR_ERROR_SM_MAIN_ADDRESS_OUT_OF_RANGE":                  17,
		"EXECUTOR_ERROR_SM_MAIN_ADDRESS_NEGATIVE":                      18,
		"EXECUTOR_ERROR_SM_MAIN_STORAGE_INVALID_KEY":                   19,
		"EXECUTOR_ERROR_SM_MAIN_HASHK":                                 20,
		"EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_OUT_OF_RANGE":               21,
		"EXECUTOR_ERROR_SM_MAIN_HASHK_POSITION_NEGATIVE":               22,
		"EXECUTOR_ERROR_SM_MAIN_HASHK_POSITION_PLUS_SIZE_OUT_OF_RANGE": 23,
		"EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_ADDRESS_NOT_FOUND":         24,
		"EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT_COMPLETED":             25,
		"EXECUTOR_ERROR_SM_MAIN_HASHP":                                 26,
		"EXECUTOR_ERROR_SM_MAIN_HASHP_SIZE_OUT_OF_RANGE":               27,
		"EXECUTOR_ERROR_SM_MAIN_HASHP_POSITION_NEGATIVE":               28,
		"EXECUTOR_ERROR_SM_MAIN_HASHP_POSITION_PLUS_SIZE_OUT_OF_RANGE": 29,
		"EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_ADDRESS_NOT_FOUND":         30,
		"EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_NOT_COMPLETED":             31,
		"EXECUTOR_ERROR_SM_MAIN_MEMALIGN_OFFSET_OUT_OF_RANGE":          32,
		"EXECUTOR_ERROR_SM_MAIN_MULTIPLE_FREEIN":                       33,
		"EXECUTOR_ERROR_SM_MAIN_ASSERT":                                34,
		"EXECUTOR_ERROR_SM_MAIN_MEMORY":                                35,
		"EXECUTOR_ERROR_SM_MAIN_STORAGE_READ_MISMATCH":                 36,
		"EXECUTOR_ERROR_SM_MAIN_STORAGE_WRITE_MISMATCH":                37,
		"EXECUTOR_ERROR_SM_MAIN_HASHK_VALUE_MISMATCH":                  38,
		"EXECUTOR_ERROR_SM_MAIN_HASHK_PADDING_MISMATCH":                39,
		"EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_MISMATCH":                   40,
		"EXECUTOR_ERROR_SM_MAIN_HASHKLEN_LENGTH_MISMATCH":              41,
		"EXECUTOR_ERROR_SM_MAIN_HASHKLEN_CALLED_TWICE":                 42,
		"EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT_FOUND":                 43,
		"EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_DIGEST_MISMATCH":           44,
		"EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_CALLED_TWICE":              45,
		"EXECUTOR_ERROR_SM_MAIN_HASHP_VALUE_MISMATCH":                  46,
		"EXECUTOR_ERROR_SM_MAIN_HASHP_PADDING_MISMATCH":                47,
		"EXECUTOR_ERROR_SM_MAIN_HASHP_SIZE_MISMATCH":                   48,
		"EXECUTOR_ERROR_SM_MAIN_HASHPLEN_LENGTH_MISMATCH":              49,
		"EXECUTOR_ERROR_SM_MAIN_HASHPLEN_CALLED_TWICE":                 50,
		"EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_DIGEST_MISMATCH":           51,
		"EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_CALLED_TWICE":              52,
		"EXECUTOR_ERROR_SM_MAIN_ARITH_MISMATCH":                        53,
		"EXECUTOR_ERROR_SM_MAIN_ARITH_ECRECOVER_MISMATCH":              54,
		"EXECUTOR_ERROR_SM_MAIN_BINARY_ADD_MISMATCH":                   55,
		"EXECUTOR_ERROR_SM_MAIN_BINARY_SUB_MISMATCH":                   56,
		"EXECUTOR_ERROR_SM_MAIN_BINARY_LT_MISMATCH":                    57,
		"EXECUTOR_ERROR_SM_MAIN_BINARY_SLT_MISMATCH":                   58,
		"EXECUTOR_ERROR_SM_MAIN_BINARY_EQ_MISMATCH":                    59,
		"EXECUTOR_ERROR_SM_MAIN_BINARY_AND_MISMATCH":                   60,
		"EXECUTOR_ERROR_SM_MAIN_BINARY_OR_MISMATCH":                    61,
		"EXECUTOR_ERROR_SM_MAIN_BINARY_XOR_MISMATCH":                   62,
		"EXECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE_MISMATCH":               63,
		"EXECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE8_MISMATCH":              64,
		"EXECUTOR_ERROR_SM_MAIN_MEMALIGN_READ_MISMATCH":                65,
		"EXECUTOR_ERROR_SM_MAIN_JMPN_OUT_OF_RANGE":                     66,
		"EXECUTOR_ERROR_SM_MAIN_HASHK_READ_OUT_OF_RANGE":               67,
		"EXECUTOR_ERROR_SM_MAIN_HASHP_READ_OUT_OF_RANGE":               68,
		"EXECUTOR_ERROR_INVALID_OLD_STATE_ROOT":                        69,
		"EXECUTOR_ERROR_INVALID_OLD_ACC_INPUT_HASH":                    70,
		"EXECUTOR_ERROR_INVALID_CHAIN_ID":                              71,
		"EXECUTOR_ERROR_INVALID_BATCH_L2_DATA":                         72,
		"EXECUTOR_ERROR_INVALID_GLOBAL_EXIT_ROOT":                      73,
		"EXECUTOR_ERROR_INVALID_COINBASE":                              74,
		"EXECUTOR_ERROR_INVALID_FROM":                                  75,
		"EXECUTOR_ERROR_INVALID_DB_KEY":                                76,
		"EXECUTOR_ERROR_INVALID_DB_VALUE":                              77,
		"EXECUTOR_ERROR_INVALID_CONTRACTS_BYTECODE_KEY":                78,
		"EXECUTOR_ERROR_INVALID_CONTRACTS_BYTECODE_VALUE":              79,
		"EXECUTOR_ERROR_INVALID_GET_KEY":                               80,
		"EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_SHA256":              81,
		"EXECUTOR_ERROR_SM_MAIN_HASHS":                                 82,
		"EXECUTOR_ERROR_SM_MAIN_HASHS_SIZE_OUT_OF_RANGE":               83,
		"EXECUTOR_ERROR_SM_MAIN_HASHS_POSITION_NEGATIVE":               84,
		"EXECUTOR_ERROR_SM_MAIN_HASHS_POSITION_PLUS_SIZE_OUT_OF_RANGE": 85,
		"EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_ADDRESS_NOT_FOUND":         86,
		"EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_NOT_COMPLETED":             87,
		"EXECUTOR_ERROR_SM_MAIN_HASHS_VALUE_MISMATCH":                  88,
		"EXECUTOR_ERROR_SM_MAIN_HASHS_PADDING_MISMATCH":                89,
		"EXECUTOR_ERROR_SM_MAIN_HASHS_SIZE_MISMATCH":                   90,
		"EXECUTOR_ERROR_SM_MAIN_HASHSLEN_LENGTH_MISMATCH":              91,
		"EXECUTOR_ERROR_SM_MAIN_HASHSLEN_CALLED_TWICE":                 92,
		"EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_NOT_FOUND":                 93,
		"EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_DIGEST_MISMATCH":           94,
		"EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_CALLED_TWICE":              95,
		"EXECUTOR_ERROR_SM_MAIN_HASHS_READ_OUT_OF_RANGE":               96,
		"EXECUTOR_ERROR_INVALID_L1_INFO_ROOT":                          97,
		"EXECUTOR_ERROR_INVALID_FORCED_BLOCKHASH_L1":                   98,
		"EXECUTOR_ERROR_INVALID_L1_DATA_V2_GLOBAL_EXIT_ROOT":           99,
		"EXECUTOR_ERROR_INVALID_L1_DATA_V2_BLOCK_HASH_L1":              100,
		"EXECUTOR_ERROR_INVALID_L1_SMT_PROOF":                          101,
		"EXECUTOR_ERROR_INVALID_BALANCE":                               102,
		"EXECUTOR_ERROR_SM_MAIN_BINARY_LT4_MISMATCH":                   103,
		"EXECUTOR_ERROR_INVALID_NEW_STATE_ROOT":                        104,
		"EXECUTOR_ERROR_INVALID_NEW_ACC_INPUT_HASH":                    105,
		"EXECUTOR_ERROR_INVALID_NEW_LOCAL_EXIT_ROOT":                   106,
		"EXECUTOR_ERROR_DB_KEY_NOT_FOUND":                              107,
		"EXECUTOR_ERROR_SMT_INVALID_DATA_SIZE":                         108,
		"EXECUTOR_ERROR_HASHDB_GRPC_ERROR":                             109,
		"EXECUTOR_ERROR_STATE_MANAGER":                                 110,
		"EXECUTOR_ERROR_INVALID_L1_INFO_TREE_INDEX":                    111,
		"EXECUTOR_ERROR_INVALID_L1_INFO_TREE_SMT_PROOF_VALUE":          112,
	}
)

func (x ExecutorError) Enum() *ExecutorError {
	p := new(ExecutorError)
	*p = x
	return p
}

func (x ExecutorError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutorError) Descriptor() protoreflect.EnumDescriptor {
	return file_executor_proto_enumTypes[1].Descriptor()
}

func (ExecutorError) Type() protoreflect.EnumType {
	return &file_executor_proto_enumTypes[1]
}

func (x ExecutorError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutorError.Descriptor instead.
func (ExecutorError) EnumDescriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{1}
}

type ProcessBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldStateRoot     []byte `protobuf:"bytes,1,opt,name=old_state_root,json=oldStateRoot,proto3" json:"old_state_root,omitempty"`
	OldAccInputHash  []byte `protobuf:"bytes,2,opt,name=old_acc_input_hash,json=oldAccInputHash,proto3" json:"old_acc_input_hash,omitempty"`
	OldBatchNum      uint64 `protobuf:"varint,3,opt,name=old_batch_num,json=oldBatchNum,proto3" json:"old_batch_num,omitempty"`
	ChainId          uint64 `protobuf:"varint,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ForkId           uint64 `protobuf:"varint,5,opt,name=fork_id,json=forkId,proto3" json:"fork_id,omitempty"`
	BatchL2Data      []byte `protobuf:"bytes,6,opt,name=batch_l2_data,json=batchL2Data,proto3" json:"batch_l2_data,omitempty"`
	GlobalExitRoot   []byte `protobuf:"bytes,7,opt,name=global_exit_root,json=globalExitRoot,proto3" json:"global_exit_root,omitempty"`
	EthTimestamp     uint64 `protobuf:"varint,8,opt,name=eth_timestamp,json=ethTimestamp,proto3" json:"eth_timestamp,omitempty"`
	Coinbase         string `protobuf:"bytes,9,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	UpdateMerkleTree uint32 `protobuf:"varint,10,opt,name=update_merkle_tree,json=updateMerkleTree,proto3" json:"update_merkle_tree,omitempty"`
	// flag to indicate that counters should not be taken into account
	NoCounters uint64 `protobuf:"varint,11,opt,name=no_counters,json=noCounters,proto3" json:"no_counters,omitempty"`
	// from is used for unsigned transactions with sender
	From string `protobuf:"bytes,12,opt,name=from,proto3" json:"from,omitempty"`
	// For testing purposes only
	Db                map[string]string `protobuf:"bytes,13,rep,name=db,proto3" json:"db,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ContractsBytecode map[string]string `protobuf:"bytes,14,rep,name=contracts_bytecode,json=contractsBytecode,proto3" json:"contracts_bytecode,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // For debug/testing purpposes only. Don't fill this on production
	TraceConfig       *TraceConfig      `protobuf:"bytes,15,opt,name=trace_config,json=traceConfig,proto3" json:"trace_config,omitempty"`
	ContextId         string            `protobuf:"bytes,16,opt,name=context_id,json=contextId,proto3" json:"context_id,omitempty"`
	// The state override set is an optional address-to-state mapping,
	// where each entry specifies some state to be ephemerally overridden
	// prior to executing the call.
	StateOverride map[string]*OverrideAccount `protobuf:"bytes,17,rep,name=state_override,json=stateOverride,proto3" json:"state_override,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProcessBatchRequest) Reset() {
	*x = ProcessBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBatchRequest) ProtoMessage() {}

func (x *ProcessBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessBatchRequest.ProtoReflect.Descriptor instead.
func (*ProcessBatchRequest) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{0}
}

func (x *ProcessBatchRequest) GetOldStateRoot() []byte {
	if x != nil {
		return x.OldStateRoot
	}
	return nil
}

func (x *ProcessBatchRequest) GetOldAccInputHash() []byte {
	if x != nil {
		return x.OldAccInputHash
	}
	return nil
}

func (x *ProcessBatchRequest) GetOldBatchNum() uint64 {
	if x != nil {
		return x.OldBatchNum
	}
	return 0
}

func (x *ProcessBatchRequest) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *ProcessBatchRequest) GetForkId() uint64 {
	if x != nil {
		return x.ForkId
	}
	return 0
}

func (x *ProcessBatchRequest) GetBatchL2Data() []byte {
	if x != nil {
		return x.BatchL2Data
	}
	return nil
}

func (x *ProcessBatchRequest) GetGlobalExitRoot() []byte {
	if x != nil {
		return x.GlobalExitRoot
	}
	return nil
}

func (x *ProcessBatchRequest) GetEthTimestamp() uint64 {
	if x != nil {
		return x.EthTimestamp
	}
	return 0
}

func (x *ProcessBatchRequest) GetCoinbase() string {
	if x != nil {
		return x.Coinbase
	}
	return ""
}

func (x *ProcessBatchRequest) GetUpdateMerkleTree() uint32 {
	if x != nil {
		return x.UpdateMerkleTree
	}
	return 0
}

func (x *ProcessBatchRequest) GetNoCounters() uint64 {
	if x != nil {
		return x.NoCounters
	}
	return 0
}

func (x *ProcessBatchRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ProcessBatchRequest) GetDb() map[string]string {
	if x != nil {
		return x.Db
	}
	return nil
}

func (x *ProcessBatchRequest) GetContractsBytecode() map[string]string {
	if x != nil {
		return x.ContractsBytecode
	}
	return nil
}

func (x *ProcessBatchRequest) GetTraceConfig() *TraceConfig {
	if x != nil {
		return x.TraceConfig
	}
	return nil
}

func (x *ProcessBatchRequest) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

func (x *ProcessBatchRequest) GetStateOverride() map[string]*OverrideAccount {
	if x != nil {
		return x.StateOverride
	}
	return nil
}

type ProcessBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewStateRoot        []byte                        `protobuf:"bytes,1,opt,name=new_state_root,json=newStateRoot,proto3" json:"new_state_root,omitempty"`
	NewAccInputHash     []byte                        `protobuf:"bytes,2,opt,name=new_acc_input_hash,json=newAccInputHash,proto3" json:"new_acc_input_hash,omitempty"`
	NewLocalExitRoot    []byte                        `protobuf:"bytes,3,opt,name=new_local_exit_root,json=newLocalExitRoot,proto3" json:"new_local_exit_root,omitempty"`
	NewBatchNum         uint64                        `protobuf:"varint,4,opt,name=new_batch_num,json=newBatchNum,proto3" json:"new_batch_num,omitempty"`
	CntKeccakHashes     uint32                        `protobuf:"varint,5,opt,name=cnt_keccak_hashes,json=cntKeccakHashes,proto3" json:"cnt_keccak_hashes,omitempty"`
	CntPoseidonHashes   uint32                        `protobuf:"varint,6,opt,name=cnt_poseidon_hashes,json=cntPoseidonHashes,proto3" json:"cnt_poseidon_hashes,omitempty"`
	CntPoseidonPaddings uint32                        `protobuf:"varint,7,opt,name=cnt_poseidon_paddings,json=cntPoseidonPaddings,proto3" json:"cnt_poseidon_paddings,omitempty"`
	CntMemAligns        uint32                        `protobuf:"varint,8,opt,name=cnt_mem_aligns,json=cntMemAligns,proto3" json:"cnt_mem_aligns,omitempty"`
	CntArithmetics      uint32                        `protobuf:"varint,9,opt,name=cnt_arithmetics,json=cntArithmetics,proto3" json:"cnt_arithmetics,omitempty"`
	CntBinaries         uint32                        `protobuf:"varint,10,opt,name=cnt_binaries,json=cntBinaries,proto3" json:"cnt_binaries,omitempty"`
	CntSteps            uint32                        `protobuf:"varint,11,opt,name=cnt_steps,json=cntSteps,proto3" json:"cnt_steps,omitempty"`
	CumulativeGasUsed   uint64                        `protobuf:"varint,12,opt,name=cumulative_gas_used,json=cumulativeGasUsed,proto3" json:"cumulative_gas_used,omitempty"`
	Responses           []*ProcessTransactionResponse `protobuf:"bytes,13,rep,name=responses,proto3" json:"responses,omitempty"`
	Error               ExecutorError                 `protobuf:"varint,14,opt,name=error,proto3,enum=executor.v1.ExecutorError" json:"error,omitempty"`
	ReadWriteAddresses  map[string]*InfoReadWrite     `protobuf:"bytes,15,rep,name=read_write_addresses,json=readWriteAddresses,proto3" json:"read_write_addresses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FlushId             uint64                        `protobuf:"varint,16,opt,name=flush_id,json=flushId,proto3" json:"flush_id,omitempty"`
	StoredFlushId       uint64                        `protobuf:"varint,17,opt,name=stored_flush_id,json=storedFlushId,proto3" json:"stored_flush_id,omitempty"`
	ProverId            string                        `protobuf:"bytes,18,opt,name=prover_id,json=proverId,proto3" json:"prover_id,omitempty"`
	ForkId              uint64                        `protobuf:"varint,19,opt,name=fork_id,json=forkId,proto3" json:"fork_id,omitempty"`
}

func (x *ProcessBatchResponse) Reset() {
	*x = ProcessBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBatchResponse) ProtoMessage() {}

func (x *ProcessBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessBatchResponse.ProtoReflect.Descriptor instead.
func (*ProcessBatchResponse) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{1}
}

func (x *ProcessBatchResponse) GetNewStateRoot() []byte {
	if x != nil {
		return x.NewStateRoot
	}
	return nil
}

func (x *ProcessBatchResponse) GetNewAccInputHash() []byte {
	if x != nil {
		return x.NewAccInputHash
	}
	return nil
}

func (x *ProcessBatchResponse) GetNewLocalExitRoot() []byte {
	if x != nil {
		return x.NewLocalExitRoot
	}
	return nil
}

func (x *ProcessBatchResponse) GetNewBatchNum() uint64 {
	if x != nil {
		return x.NewBatchNum
	}
	return 0
}

func (x *ProcessBatchResponse) GetCntKeccakHashes() uint32 {
	if x != nil {
		return x.CntKeccakHashes
	}
	return 0
}

func (x *ProcessBatchResponse) GetCntPoseidonHashes() uint32 {
	if x != nil {
		return x.CntPoseidonHashes
	}
	return 0
}

func (x *ProcessBatchResponse) GetCntPoseidonPaddings() uint32 {
	if x != nil {
		return x.CntPoseidonPaddings
	}
	return 0
}

func (x *ProcessBatchResponse) GetCntMemAligns() uint32 {
	if x != nil {
		return x.CntMemAligns
	}
	return 0
}

func (x *ProcessBatchResponse) GetCntArithmetics() uint32 {
	if x != nil {
		return x.CntArithmetics
	}
	return 0
}

func (x *ProcessBatchResponse) GetCntBinaries() uint32 {
	if x != nil {
		return x.CntBinaries
	}
	return 0
}

func (x *ProcessBatchResponse) GetCntSteps() uint32 {
	if x != nil {
		return x.CntSteps
	}
	return 0
}

func (x *ProcessBatchResponse) GetCumulativeGasUsed() uint64 {
	if x != nil {
		return x.CumulativeGasUsed
	}
	return 0
}

func (x *ProcessBatchResponse) GetResponses() []*ProcessTransactionResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *ProcessBatchResponse) GetError() ExecutorError {
	if x != nil {
		return x.Error
	}
	return ExecutorError_EXECUTOR_ERROR_UNSPECIFIED
}

func (x *ProcessBatchResponse) GetReadWriteAddresses() map[string]*InfoReadWrite {
	if x != nil {
		return x.ReadWriteAddresses
	}
	return nil
}

func (x *ProcessBatchResponse) GetFlushId() uint64 {
	if x != nil {
		return x.FlushId
	}
	return 0
}

func (x *ProcessBatchResponse) GetStoredFlushId() uint64 {
	if x != nil {
		return x.StoredFlushId
	}
	return 0
}

func (x *ProcessBatchResponse) GetProverId() string {
	if x != nil {
		return x.ProverId
	}
	return ""
}

func (x *ProcessBatchResponse) GetForkId() uint64 {
	if x != nil {
		return x.ForkId
	}
	return 0
}

// *
// @dev GetFlushStatusResponse
// @param {last_sent_flush_id} - id of the last flush data sent to database
// @param {sending_flush_id} - id of the flush data being sent now to database
// @param {last_flush_id} - id assigned to the last call to flush
// @param {pending_to_flush_nodes} - number of SMT nodes pending to flush
// @param {pending_to_flush_program} - number of SC programs pending to flush
// @param {storing_nodes} - number of SMT nodes being stored in the hash database
// @param {storing_program} - number of SC programs being stored in the hash database
// @param {prover_id} - id assigned to this instance of the prover process
type GetFlushStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoredFlushId         uint64 `protobuf:"varint,1,opt,name=stored_flush_id,json=storedFlushId,proto3" json:"stored_flush_id,omitempty"`
	StoringFlushId        uint64 `protobuf:"varint,2,opt,name=storing_flush_id,json=storingFlushId,proto3" json:"storing_flush_id,omitempty"`
	LastFlushId           uint64 `protobuf:"varint,3,opt,name=last_flush_id,json=lastFlushId,proto3" json:"last_flush_id,omitempty"`
	PendingToFlushNodes   uint64 `protobuf:"varint,4,opt,name=pending_to_flush_nodes,json=pendingToFlushNodes,proto3" json:"pending_to_flush_nodes,omitempty"`
	PendingToFlushProgram uint64 `protobuf:"varint,5,opt,name=pending_to_flush_program,json=pendingToFlushProgram,proto3" json:"pending_to_flush_program,omitempty"`
	StoringNodes          uint64 `protobuf:"varint,6,opt,name=storing_nodes,json=storingNodes,proto3" json:"storing_nodes,omitempty"`
	StoringProgram        uint64 `protobuf:"varint,7,opt,name=storing_program,json=storingProgram,proto3" json:"storing_program,omitempty"`
	ProverId              string `protobuf:"bytes,8,opt,name=prover_id,json=proverId,proto3" json:"prover_id,omitempty"`
}

func (x *GetFlushStatusResponse) Reset() {
	*x = GetFlushStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlushStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlushStatusResponse) ProtoMessage() {}

func (x *GetFlushStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlushStatusResponse.ProtoReflect.Descriptor instead.
func (*GetFlushStatusResponse) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{2}
}

func (x *GetFlushStatusResponse) GetStoredFlushId() uint64 {
	if x != nil {
		return x.StoredFlushId
	}
	return 0
}

func (x *GetFlushStatusResponse) GetStoringFlushId() uint64 {
	if x != nil {
		return x.StoringFlushId
	}
	return 0
}

func (x *GetFlushStatusResponse) GetLastFlushId() uint64 {
	if x != nil {
		return x.LastFlushId
	}
	return 0
}

func (x *GetFlushStatusResponse) GetPendingToFlushNodes() uint64 {
	if x != nil {
		return x.PendingToFlushNodes
	}
	return 0
}

func (x *GetFlushStatusResponse) GetPendingToFlushProgram() uint64 {
	if x != nil {
		return x.PendingToFlushProgram
	}
	return 0
}

func (x *GetFlushStatusResponse) GetStoringNodes() uint64 {
	if x != nil {
		return x.StoringNodes
	}
	return 0
}

func (x *GetFlushStatusResponse) GetStoringProgram() uint64 {
	if x != nil {
		return x.StoringProgram
	}
	return 0
}

func (x *GetFlushStatusResponse) GetProverId() string {
	if x != nil {
		return x.ProverId
	}
	return ""
}

// Trace configuration request params
type TraceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Disables storage (default=false)
	DisableStorage uint32 `protobuf:"varint,1,opt,name=disable_storage,json=disableStorage,proto3" json:"disable_storage,omitempty"`
	// Disables stack (default=false)
	DisableStack uint32 `protobuf:"varint,2,opt,name=disable_stack,json=disableStack,proto3" json:"disable_stack,omitempty"`
	// Enables memory (default=false)
	EnableMemory uint32 `protobuf:"varint,3,opt,name=enable_memory,json=enableMemory,proto3" json:"enable_memory,omitempty"`
	// Enables return data (default=false)
	EnableReturnData uint32 `protobuf:"varint,4,opt,name=enable_return_data,json=enableReturnData,proto3" json:"enable_return_data,omitempty"`
	// Hash of tx in batch to retrieve the trace
	TxHashToGenerateFullTrace []byte `protobuf:"bytes,5,opt,name=tx_hash_to_generate_full_trace,json=txHashToGenerateFullTrace,proto3" json:"tx_hash_to_generate_full_trace,omitempty"`
}

func (x *TraceConfig) Reset() {
	*x = TraceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceConfig) ProtoMessage() {}

func (x *TraceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceConfig.ProtoReflect.Descriptor instead.
func (*TraceConfig) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{3}
}

func (x *TraceConfig) GetDisableStorage() uint32 {
	if x != nil {
		return x.DisableStorage
	}
	return 0
}

func (x *TraceConfig) GetDisableStack() uint32 {
	if x != nil {
		return x.DisableStack
	}
	return 0
}

func (x *TraceConfig) GetEnableMemory() uint32 {
	if x != nil {
		return x.EnableMemory
	}
	return 0
}

func (x *TraceConfig) GetEnableReturnData() uint32 {
	if x != nil {
		return x.EnableReturnData
	}
	return 0
}

func (x *TraceConfig) GetTxHashToGenerateFullTrace() []byte {
	if x != nil {
		return x.TxHashToGenerateFullTrace
	}
	return nil
}

// OverrideAccount indicates the overriding fields of account during the execution
// of a message call.
// Note, state and stateDiff can't be specified at the same time. If state is
// set, message execution will only use the data in the given state. Otherwise
// if statDiff is set, all diff will be applied first and then execute the call
// message.
type OverrideAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fake balance to set for the account before executing the call.
	Balance []byte `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	// Fake nonce to set for the account before executing the call.
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Fake EVM bytecode to inject into the account before executing the call.
	Code []byte `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	// Fake key-value mapping to override all slots in the account storage before executing the call.
	State map[string]string `protobuf:"bytes,4,rep,name=state,proto3" json:"state,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Fake key-value mapping to override individual slots in the account storage before executing the call.
	StateDiff map[string]string `protobuf:"bytes,5,rep,name=state_diff,json=stateDiff,proto3" json:"state_diff,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OverrideAccount) Reset() {
	*x = OverrideAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverrideAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideAccount) ProtoMessage() {}

func (x *OverrideAccount) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideAccount.ProtoReflect.Descriptor instead.
func (*OverrideAccount) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{4}
}

func (x *OverrideAccount) GetBalance() []byte {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *OverrideAccount) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *OverrideAccount) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *OverrideAccount) GetState() map[string]string {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *OverrideAccount) GetStateDiff() map[string]string {
	if x != nil {
		return x.StateDiff
	}
	return nil
}

type InfoReadWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If nonce="" then it has not been set; if set, string is in decimal (base 10)
	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// If balance="" then it has not been set; if set, string is in decimal (base 10)
	Balance string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *InfoReadWrite) Reset() {
	*x = InfoReadWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoReadWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoReadWrite) ProtoMessage() {}

func (x *InfoReadWrite) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoReadWrite.ProtoReflect.Descriptor instead.
func (*InfoReadWrite) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{5}
}

func (x *InfoReadWrite) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *InfoReadWrite) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type FullTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *TransactionContext `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Steps   []*TransactionStep  `protobuf:"bytes,2,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (x *FullTrace) Reset() {
	*x = FullTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullTrace) ProtoMessage() {}

func (x *FullTrace) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullTrace.ProtoReflect.Descriptor instead.
func (*FullTrace) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{6}
}

func (x *FullTrace) GetContext() *TransactionContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *FullTrace) GetSteps() []*TransactionStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

type TransactionContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CALL or CREATE
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Sender of the transaction
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// Target of the transaction
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// Input data of the transaction
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// Gas of the transaction
	Gas uint64 `protobuf:"varint,5,opt,name=gas,proto3" json:"gas,omitempty"`
	// Value of the transaction
	Value string `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	// Hash of the batch in which the transaction was included
	Batch []byte `protobuf:"bytes,7,opt,name=batch,proto3" json:"batch,omitempty"`
	// Returned data from the runtime (function result or data supplied with revert opcode)
	Output []byte `protobuf:"bytes,8,opt,name=output,proto3" json:"output,omitempty"`
	// Total gas used as result of execution
	GasUsed uint64 `protobuf:"varint,9,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	// Gas Price
	GasPrice string `protobuf:"bytes,10,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// Execution Time
	ExecutionTime uint32 `protobuf:"varint,11,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	// Starting state root
	OldStateRoot []byte `protobuf:"bytes,12,opt,name=old_state_root,json=oldStateRoot,proto3" json:"old_state_root,omitempty"`
}

func (x *TransactionContext) Reset() {
	*x = TransactionContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionContext) ProtoMessage() {}

func (x *TransactionContext) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionContext.ProtoReflect.Descriptor instead.
func (*TransactionContext) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{7}
}

func (x *TransactionContext) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TransactionContext) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TransactionContext) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TransactionContext) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TransactionContext) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *TransactionContext) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TransactionContext) GetBatch() []byte {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *TransactionContext) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *TransactionContext) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *TransactionContext) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *TransactionContext) GetExecutionTime() uint32 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *TransactionContext) GetOldStateRoot() []byte {
	if x != nil {
		return x.OldStateRoot
	}
	return nil
}

type TransactionStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRoot []byte `protobuf:"bytes,1,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	// Call depth
	Depth uint32 `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`
	// Program counter
	Pc uint64 `protobuf:"varint,3,opt,name=pc,proto3" json:"pc,omitempty"`
	// Remaining gas
	Gas uint64 `protobuf:"varint,4,opt,name=gas,proto3" json:"gas,omitempty"`
	// Gas cost of the operation
	GasCost uint64 `protobuf:"varint,5,opt,name=gas_cost,json=gasCost,proto3" json:"gas_cost,omitempty"`
	// Gas refunded during the operation
	GasRefund uint64 `protobuf:"varint,6,opt,name=gas_refund,json=gasRefund,proto3" json:"gas_refund,omitempty"`
	// Opcode
	Op uint32 `protobuf:"varint,7,opt,name=op,proto3" json:"op,omitempty"`
	// Content of the stack
	Stack []string `protobuf:"bytes,8,rep,name=stack,proto3" json:"stack,omitempty"`
	// Content of memory, starting at memory_offset, showing only changes vs. previous step
	Memory []byte `protobuf:"bytes,9,opt,name=memory,proto3" json:"memory,omitempty"`
	// Total size of memory
	MemorySize uint32 `protobuf:"varint,10,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	// Offset of memory changes
	MemoryOffset uint32 `protobuf:"varint,11,opt,name=memory_offset,json=memoryOffset,proto3" json:"memory_offset,omitempty"`
	// Content of the stack
	// Return Data
	ReturnData []byte `protobuf:"bytes,12,opt,name=return_data,json=returnData,proto3" json:"return_data,omitempty"`
	// Contract information
	Contract *Contract `protobuf:"bytes,13,opt,name=contract,proto3" json:"contract,omitempty"`
	// Error
	Error RomError `protobuf:"varint,14,opt,name=error,proto3,enum=executor.v1.RomError" json:"error,omitempty"`
	// Content of the storage
	Storage map[string]string `protobuf:"bytes,15,rep,name=storage,proto3" json:"storage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TransactionStep) Reset() {
	*x = TransactionStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionStep) ProtoMessage() {}

func (x *TransactionStep) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionStep.ProtoReflect.Descriptor instead.
func (*TransactionStep) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{8}
}

func (x *TransactionStep) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *TransactionStep) GetDepth() uint32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *TransactionStep) GetPc() uint64 {
	if x != nil {
		return x.Pc
	}
	return 0
}

func (x *TransactionStep) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *TransactionStep) GetGasCost() uint64 {
	if x != nil {
		return x.GasCost
	}
	return 0
}

func (x *TransactionStep) GetGasRefund() uint64 {
	if x != nil {
		return x.GasRefund
	}
	return 0
}

func (x *TransactionStep) GetOp() uint32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *TransactionStep) GetStack() []string {
	if x != nil {
		return x.Stack
	}
	return nil
}

func (x *TransactionStep) GetMemory() []byte {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *TransactionStep) GetMemorySize() uint32 {
	if x != nil {
		return x.MemorySize
	}
	return 0
}

func (x *TransactionStep) GetMemoryOffset() uint32 {
	if x != nil {
		return x.MemoryOffset
	}
	return 0
}

func (x *TransactionStep) GetReturnData() []byte {
	if x != nil {
		return x.ReturnData
	}
	return nil
}

func (x *TransactionStep) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *TransactionStep) GetError() RomError {
	if x != nil {
		return x.Error
	}
	return RomError_ROM_ERROR_UNSPECIFIED
}

func (x *TransactionStep) GetStorage() map[string]string {
	if x != nil {
		return x.Storage
	}
	return nil
}

type Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Caller  string `protobuf:"bytes,2,opt,name=caller,proto3" json:"caller,omitempty"`
	Value   string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Data    []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Gas     uint64 `protobuf:"varint,5,opt,name=gas,proto3" json:"gas,omitempty"`
	// Define type of internal call: CREATE, CREATE2, CALL, CALLCODE, DELEGATECALL, STATICCALL
	Type string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Contract) Reset() {
	*x = Contract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{9}
}

func (x *Contract) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Contract) GetCaller() string {
	if x != nil {
		return x.Caller
	}
	return ""
}

func (x *Contract) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Contract) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Contract) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *Contract) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ProcessTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hash of the transaction
	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// RLP encoded transaction
	// [nonce, gasPrice, gasLimit, to, value, data, v, r, s]
	RlpTx []byte `protobuf:"bytes,2,opt,name=rlp_tx,json=rlpTx,proto3" json:"rlp_tx,omitempty"`
	// Type indicates legacy transaction
	// It will be always 0 (legacy) in the executor
	Type uint32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	// Returned data from the runtime (function result or data supplied with revert opcode)
	ReturnValue []byte `protobuf:"bytes,4,opt,name=return_value,json=returnValue,proto3" json:"return_value,omitempty"`
	// Total gas left as result of execution
	GasLeft uint64 `protobuf:"varint,5,opt,name=gas_left,json=gasLeft,proto3" json:"gas_left,omitempty"`
	// Total gas used as result of execution or gas estimation
	GasUsed uint64 `protobuf:"varint,6,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	// Total gas refunded as result of execution
	GasRefunded uint64 `protobuf:"varint,7,opt,name=gas_refunded,json=gasRefunded,proto3" json:"gas_refunded,omitempty"`
	// Any error encountered during the execution
	Error RomError `protobuf:"varint,8,opt,name=error,proto3,enum=executor.v1.RomError" json:"error,omitempty"`
	// New SC Address in case of SC creation
	CreateAddress string `protobuf:"bytes,9,opt,name=create_address,json=createAddress,proto3" json:"create_address,omitempty"`
	// State Root
	StateRoot []byte `protobuf:"bytes,10,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	// Logs emited by LOG opcode
	Logs      []*Log     `protobuf:"bytes,11,rep,name=logs,proto3" json:"logs,omitempty"`
	FullTrace *FullTrace `protobuf:"bytes,14,opt,name=full_trace,json=fullTrace,proto3" json:"full_trace,omitempty"`
	// Efective Gas Price
	EffectiveGasPrice   string `protobuf:"bytes,15,opt,name=effective_gas_price,json=effectiveGasPrice,proto3" json:"effective_gas_price,omitempty"`
	EffectivePercentage uint32 `protobuf:"varint,16,opt,name=effective_percentage,json=effectivePercentage,proto3" json:"effective_percentage,omitempty"`
	// Flag to indicate if opcode 'GASPRICE' has been called
	HasGaspriceOpcode uint32 `protobuf:"varint,17,opt,name=has_gasprice_opcode,json=hasGaspriceOpcode,proto3" json:"has_gasprice_opcode,omitempty"`
	// Flag to indicate if opcode 'BALANCE' has been called
	HasBalanceOpcode uint32 `protobuf:"varint,18,opt,name=has_balance_opcode,json=hasBalanceOpcode,proto3" json:"has_balance_opcode,omitempty"`
}

func (x *ProcessTransactionResponse) Reset() {
	*x = ProcessTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTransactionResponse) ProtoMessage() {}

func (x *ProcessTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTransactionResponse.ProtoReflect.Descriptor instead.
func (*ProcessTransactionResponse) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{10}
}

func (x *ProcessTransactionResponse) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *ProcessTransactionResponse) GetRlpTx() []byte {
	if x != nil {
		return x.RlpTx
	}
	return nil
}

func (x *ProcessTransactionResponse) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ProcessTransactionResponse) GetReturnValue() []byte {
	if x != nil {
		return x.ReturnValue
	}
	return nil
}

func (x *ProcessTransactionResponse) GetGasLeft() uint64 {
	if x != nil {
		return x.GasLeft
	}
	return 0
}

func (x *ProcessTransactionResponse) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ProcessTransactionResponse) GetGasRefunded() uint64 {
	if x != nil {
		return x.GasRefunded
	}
	return 0
}

func (x *ProcessTransactionResponse) GetError() RomError {
	if x != nil {
		return x.Error
	}
	return RomError_ROM_ERROR_UNSPECIFIED
}

func (x *ProcessTransactionResponse) GetCreateAddress() string {
	if x != nil {
		return x.CreateAddress
	}
	return ""
}

func (x *ProcessTransactionResponse) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *ProcessTransactionResponse) GetLogs() []*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *ProcessTransactionResponse) GetFullTrace() *FullTrace {
	if x != nil {
		return x.FullTrace
	}
	return nil
}

func (x *ProcessTransactionResponse) GetEffectiveGasPrice() string {
	if x != nil {
		return x.EffectiveGasPrice
	}
	return ""
}

func (x *ProcessTransactionResponse) GetEffectivePercentage() uint32 {
	if x != nil {
		return x.EffectivePercentage
	}
	return 0
}

func (x *ProcessTransactionResponse) GetHasGaspriceOpcode() uint32 {
	if x != nil {
		return x.HasGaspriceOpcode
	}
	return 0
}

func (x *ProcessTransactionResponse) GetHasBalanceOpcode() uint32 {
	if x != nil {
		return x.HasBalanceOpcode
	}
	return 0
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the contract that generated the event
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// List of topics provided by the contract
	Topics [][]byte `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	// Supplied by the contract, usually ABI-encoded
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Batch in which the transaction was included
	BatchNumber uint64 `protobuf:"varint,4,opt,name=batch_number,json=batchNumber,proto3" json:"batch_number,omitempty"`
	// Hash of the transaction
	TxHash []byte `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Index of the transaction in the block
	TxIndex uint32 `protobuf:"varint,6,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	// Hash of the batch in which the transaction was included
	BatchHash []byte `protobuf:"bytes,7,opt,name=batch_hash,json=batchHash,proto3" json:"batch_hash,omitempty"`
	// Index of the log in the block
	Index uint32 `protobuf:"varint,8,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{11}
}

func (x *Log) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Log) GetTopics() [][]byte {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Log) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Log) GetBatchNumber() uint64 {
	if x != nil {
		return x.BatchNumber
	}
	return 0
}

func (x *Log) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Log) GetTxIndex() uint32 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *Log) GetBatchHash() []byte {
	if x != nil {
		return x.BatchHash
	}
	return nil
}

func (x *Log) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type ProcessBatchRequestV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldStateRoot      []byte `protobuf:"bytes,1,opt,name=old_state_root,json=oldStateRoot,proto3" json:"old_state_root,omitempty"`
	OldAccInputHash   []byte `protobuf:"bytes,2,opt,name=old_acc_input_hash,json=oldAccInputHash,proto3" json:"old_acc_input_hash,omitempty"`
	OldBatchNum       uint64 `protobuf:"varint,3,opt,name=old_batch_num,json=oldBatchNum,proto3" json:"old_batch_num,omitempty"`
	ChainId           uint64 `protobuf:"varint,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ForkId            uint64 `protobuf:"varint,5,opt,name=fork_id,json=forkId,proto3" json:"fork_id,omitempty"`
	BatchL2Data       []byte `protobuf:"bytes,6,opt,name=batch_l2_data,json=batchL2Data,proto3" json:"batch_l2_data,omitempty"`
	L1InfoRoot        []byte `protobuf:"bytes,7,opt,name=l1_info_root,json=l1InfoRoot,proto3" json:"l1_info_root,omitempty"`
	TimestampLimit    uint64 `protobuf:"varint,8,opt,name=timestamp_limit,json=timestampLimit,proto3" json:"timestamp_limit,omitempty"`
	Coinbase          string `protobuf:"bytes,9,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	ForcedBlockhashL1 []byte `protobuf:"bytes,10,opt,name=forced_blockhash_l1,json=forcedBlockhashL1,proto3" json:"forced_blockhash_l1,omitempty"`
	// flag to indicate if the merkle tree needs to be updated
	UpdateMerkleTree uint32 `protobuf:"varint,11,opt,name=update_merkle_tree,json=updateMerkleTree,proto3" json:"update_merkle_tree,omitempty"`
	// flag to indicate that counters should not be taken into account
	NoCounters uint32 `protobuf:"varint,12,opt,name=no_counters,json=noCounters,proto3" json:"no_counters,omitempty"`
	// from is used for unsigned transactions with sender
	From string `protobuf:"bytes,13,opt,name=from,proto3" json:"from,omitempty"`
	// flag to skip the check when l1Data is verified
	SkipVerifyL1InfoRoot uint32 `protobuf:"varint,14,opt,name=skip_verify_l1_info_root,json=skipVerifyL1InfoRoot,proto3" json:"skip_verify_l1_info_root,omitempty"`
	// flag to skip the restriction to start a batch with a changeL2Block transaction
	SkipFirstChangeL2Block uint32 `protobuf:"varint,15,opt,name=skip_first_change_l2_block,json=skipFirstChangeL2Block,proto3" json:"skip_first_change_l2_block,omitempty"`
	// flag to skip writing the block info root in the state
	SkipWriteBlockInfoRoot uint32 `protobuf:"varint,16,opt,name=skip_write_block_info_root,json=skipWriteBlockInfoRoot,proto3" json:"skip_write_block_info_root,omitempty"`
	// lInfoTree information
	L1InfoTreeData map[uint32]*L1DataV2 `protobuf:"bytes,17,rep,name=l1_info_tree_data,json=l1InfoTreeData,proto3" json:"l1_info_tree_data,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// For testing purposes only
	Db                map[string]string `protobuf:"bytes,18,rep,name=db,proto3" json:"db,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ContractsBytecode map[string]string `protobuf:"bytes,19,rep,name=contracts_bytecode,json=contractsBytecode,proto3" json:"contracts_bytecode,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // For debug/testing purpposes only. Don't fill this on production
	TraceConfig       *TraceConfigV2    `protobuf:"bytes,20,opt,name=trace_config,json=traceConfig,proto3" json:"trace_config,omitempty"`
	ContextId         string            `protobuf:"bytes,21,opt,name=context_id,json=contextId,proto3" json:"context_id,omitempty"`
	GetKeys           uint32            `protobuf:"varint,22,opt,name=get_keys,json=getKeys,proto3" json:"get_keys,omitempty"` // if 1, the keys used to read or write storage values will be returned
	// The state override set is an optional address-to-state mapping,
	// where each entry specifies some state to be ephemerally overridden
	// prior to executing the call.
	StateOverride map[string]*OverrideAccountV2 `protobuf:"bytes,23,rep,name=state_override,json=stateOverride,proto3" json:"state_override,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Debug         *DebugV2                      `protobuf:"bytes,24,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ProcessBatchRequestV2) Reset() {
	*x = ProcessBatchRequestV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessBatchRequestV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBatchRequestV2) ProtoMessage() {}

func (x *ProcessBatchRequestV2) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessBatchRequestV2.ProtoReflect.Descriptor instead.
func (*ProcessBatchRequestV2) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{12}
}

func (x *ProcessBatchRequestV2) GetOldStateRoot() []byte {
	if x != nil {
		return x.OldStateRoot
	}
	return nil
}

func (x *ProcessBatchRequestV2) GetOldAccInputHash() []byte {
	if x != nil {
		return x.OldAccInputHash
	}
	return nil
}

func (x *ProcessBatchRequestV2) GetOldBatchNum() uint64 {
	if x != nil {
		return x.OldBatchNum
	}
	return 0
}

func (x *ProcessBatchRequestV2) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *ProcessBatchRequestV2) GetForkId() uint64 {
	if x != nil {
		return x.ForkId
	}
	return 0
}

func (x *ProcessBatchRequestV2) GetBatchL2Data() []byte {
	if x != nil {
		return x.BatchL2Data
	}
	return nil
}

func (x *ProcessBatchRequestV2) GetL1InfoRoot() []byte {
	if x != nil {
		return x.L1InfoRoot
	}
	return nil
}

func (x *ProcessBatchRequestV2) GetTimestampLimit() uint64 {
	if x != nil {
		return x.TimestampLimit
	}
	return 0
}

func (x *ProcessBatchRequestV2) GetCoinbase() string {
	if x != nil {
		return x.Coinbase
	}
	return ""
}

func (x *ProcessBatchRequestV2) GetForcedBlockhashL1() []byte {
	if x != nil {
		return x.ForcedBlockhashL1
	}
	return nil
}

func (x *ProcessBatchRequestV2) GetUpdateMerkleTree() uint32 {
	if x != nil {
		return x.UpdateMerkleTree
	}
	return 0
}

func (x *ProcessBatchRequestV2) GetNoCounters() uint32 {
	if x != nil {
		return x.NoCounters
	}
	return 0
}

func (x *ProcessBatchRequestV2) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ProcessBatchRequestV2) GetSkipVerifyL1InfoRoot() uint32 {
	if x != nil {
		return x.SkipVerifyL1InfoRoot
	}
	return 0
}

func (x *ProcessBatchRequestV2) GetSkipFirstChangeL2Block() uint32 {
	if x != nil {
		return x.SkipFirstChangeL2Block
	}
	return 0
}

func (x *ProcessBatchRequestV2) GetSkipWriteBlockInfoRoot() uint32 {
	if x != nil {
		return x.SkipWriteBlockInfoRoot
	}
	return 0
}

func (x *ProcessBatchRequestV2) GetL1InfoTreeData() map[uint32]*L1DataV2 {
	if x != nil {
		return x.L1InfoTreeData
	}
	return nil
}

func (x *ProcessBatchRequestV2) GetDb() map[string]string {
	if x != nil {
		return x.Db
	}
	return nil
}

func (x *ProcessBatchRequestV2) GetContractsBytecode() map[string]string {
	if x != nil {
		return x.ContractsBytecode
	}
	return nil
}

func (x *ProcessBatchRequestV2) GetTraceConfig() *TraceConfigV2 {
	if x != nil {
		return x.TraceConfig
	}
	return nil
}

func (x *ProcessBatchRequestV2) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

func (x *ProcessBatchRequestV2) GetGetKeys() uint32 {
	if x != nil {
		return x.GetKeys
	}
	return 0
}

func (x *ProcessBatchRequestV2) GetStateOverride() map[string]*OverrideAccountV2 {
	if x != nil {
		return x.StateOverride
	}
	return nil
}

func (x *ProcessBatchRequestV2) GetDebug() *DebugV2 {
	if x != nil {
		return x.Debug
	}
	return nil
}

type L1DataV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalExitRoot []byte   `protobuf:"bytes,1,opt,name=global_exit_root,json=globalExitRoot,proto3" json:"global_exit_root,omitempty"`
	BlockHashL1    []byte   `protobuf:"bytes,2,opt,name=block_hash_l1,json=blockHashL1,proto3" json:"block_hash_l1,omitempty"`
	MinTimestamp   uint64   `protobuf:"varint,3,opt,name=min_timestamp,json=minTimestamp,proto3" json:"min_timestamp,omitempty"`
	SmtProof       [][]byte `protobuf:"bytes,4,rep,name=smt_proof,json=smtProof,proto3" json:"smt_proof,omitempty"`
}

func (x *L1DataV2) Reset() {
	*x = L1DataV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L1DataV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L1DataV2) ProtoMessage() {}

func (x *L1DataV2) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L1DataV2.ProtoReflect.Descriptor instead.
func (*L1DataV2) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{13}
}

func (x *L1DataV2) GetGlobalExitRoot() []byte {
	if x != nil {
		return x.GlobalExitRoot
	}
	return nil
}

func (x *L1DataV2) GetBlockHashL1() []byte {
	if x != nil {
		return x.BlockHashL1
	}
	return nil
}

func (x *L1DataV2) GetMinTimestamp() uint64 {
	if x != nil {
		return x.MinTimestamp
	}
	return 0
}

func (x *L1DataV2) GetSmtProof() [][]byte {
	if x != nil {
		return x.SmtProof
	}
	return nil
}

type DebugV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasLimit         uint64 `protobuf:"varint,1,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	NewStateRoot     []byte `protobuf:"bytes,2,opt,name=new_state_root,json=newStateRoot,proto3" json:"new_state_root,omitempty"`
	NewAccInputHash  []byte `protobuf:"bytes,3,opt,name=new_acc_input_hash,json=newAccInputHash,proto3" json:"new_acc_input_hash,omitempty"`
	NewLocalExitRoot []byte `protobuf:"bytes,4,opt,name=new_local_exit_root,json=newLocalExitRoot,proto3" json:"new_local_exit_root,omitempty"`
	NewBatchNum      uint64 `protobuf:"varint,5,opt,name=new_batch_num,json=newBatchNum,proto3" json:"new_batch_num,omitempty"`
}

func (x *DebugV2) Reset() {
	*x = DebugV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugV2) ProtoMessage() {}

func (x *DebugV2) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugV2.ProtoReflect.Descriptor instead.
func (*DebugV2) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{14}
}

func (x *DebugV2) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *DebugV2) GetNewStateRoot() []byte {
	if x != nil {
		return x.NewStateRoot
	}
	return nil
}

func (x *DebugV2) GetNewAccInputHash() []byte {
	if x != nil {
		return x.NewAccInputHash
	}
	return nil
}

func (x *DebugV2) GetNewLocalExitRoot() []byte {
	if x != nil {
		return x.NewLocalExitRoot
	}
	return nil
}

func (x *DebugV2) GetNewBatchNum() uint64 {
	if x != nil {
		return x.NewBatchNum
	}
	return 0
}

type ProcessBatchResponseV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewStateRoot        []byte                      `protobuf:"bytes,1,opt,name=new_state_root,json=newStateRoot,proto3" json:"new_state_root,omitempty"`
	NewAccInputHash     []byte                      `protobuf:"bytes,2,opt,name=new_acc_input_hash,json=newAccInputHash,proto3" json:"new_acc_input_hash,omitempty"`
	NewLocalExitRoot    []byte                      `protobuf:"bytes,3,opt,name=new_local_exit_root,json=newLocalExitRoot,proto3" json:"new_local_exit_root,omitempty"`
	NewBatchNum         uint64                      `protobuf:"varint,4,opt,name=new_batch_num,json=newBatchNum,proto3" json:"new_batch_num,omitempty"`
	CntKeccakHashes     uint32                      `protobuf:"varint,5,opt,name=cnt_keccak_hashes,json=cntKeccakHashes,proto3" json:"cnt_keccak_hashes,omitempty"`
	CntPoseidonHashes   uint32                      `protobuf:"varint,6,opt,name=cnt_poseidon_hashes,json=cntPoseidonHashes,proto3" json:"cnt_poseidon_hashes,omitempty"`
	CntPoseidonPaddings uint32                      `protobuf:"varint,7,opt,name=cnt_poseidon_paddings,json=cntPoseidonPaddings,proto3" json:"cnt_poseidon_paddings,omitempty"`
	CntMemAligns        uint32                      `protobuf:"varint,8,opt,name=cnt_mem_aligns,json=cntMemAligns,proto3" json:"cnt_mem_aligns,omitempty"`
	CntArithmetics      uint32                      `protobuf:"varint,9,opt,name=cnt_arithmetics,json=cntArithmetics,proto3" json:"cnt_arithmetics,omitempty"`
	CntBinaries         uint32                      `protobuf:"varint,10,opt,name=cnt_binaries,json=cntBinaries,proto3" json:"cnt_binaries,omitempty"`
	CntSteps            uint32                      `protobuf:"varint,11,opt,name=cnt_steps,json=cntSteps,proto3" json:"cnt_steps,omitempty"`
	CntSha256Hashes     uint32                      `protobuf:"varint,12,opt,name=cnt_sha256_hashes,json=cntSha256Hashes,proto3" json:"cnt_sha256_hashes,omitempty"`
	BlockResponses      []*ProcessBlockResponseV2   `protobuf:"bytes,13,rep,name=block_responses,json=blockResponses,proto3" json:"block_responses,omitempty"`
	Error               ExecutorError               `protobuf:"varint,14,opt,name=error,proto3,enum=executor.v1.ExecutorError" json:"error,omitempty"`
	ReadWriteAddresses  map[string]*InfoReadWriteV2 `protobuf:"bytes,15,rep,name=read_write_addresses,json=readWriteAddresses,proto3" json:"read_write_addresses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FlushId             uint64                      `protobuf:"varint,16,opt,name=flush_id,json=flushId,proto3" json:"flush_id,omitempty"`
	StoredFlushId       uint64                      `protobuf:"varint,17,opt,name=stored_flush_id,json=storedFlushId,proto3" json:"stored_flush_id,omitempty"`
	ProverId            string                      `protobuf:"bytes,18,opt,name=prover_id,json=proverId,proto3" json:"prover_id,omitempty"`
	GasUsed             uint64                      `protobuf:"varint,19,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	SmtKeys             [][]byte                    `protobuf:"bytes,20,rep,name=smt_keys,json=smtKeys,proto3" json:"smt_keys,omitempty"`
	ProgramKeys         [][]byte                    `protobuf:"bytes,21,rep,name=program_keys,json=programKeys,proto3" json:"program_keys,omitempty"`
	ForkId              uint64                      `protobuf:"varint,22,opt,name=fork_id,json=forkId,proto3" json:"fork_id,omitempty"`
	InvalidBatch        uint32                      `protobuf:"varint,23,opt,name=invalid_batch,json=invalidBatch,proto3" json:"invalid_batch,omitempty"`
	ErrorRom            RomError                    `protobuf:"varint,24,opt,name=error_rom,json=errorRom,proto3,enum=executor.v1.RomError" json:"error_rom,omitempty"`
}

func (x *ProcessBatchResponseV2) Reset() {
	*x = ProcessBatchResponseV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessBatchResponseV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBatchResponseV2) ProtoMessage() {}

func (x *ProcessBatchResponseV2) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessBatchResponseV2.ProtoReflect.Descriptor instead.
func (*ProcessBatchResponseV2) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{15}
}

func (x *ProcessBatchResponseV2) GetNewStateRoot() []byte {
	if x != nil {
		return x.NewStateRoot
	}
	return nil
}

func (x *ProcessBatchResponseV2) GetNewAccInputHash() []byte {
	if x != nil {
		return x.NewAccInputHash
	}
	return nil
}

func (x *ProcessBatchResponseV2) GetNewLocalExitRoot() []byte {
	if x != nil {
		return x.NewLocalExitRoot
	}
	return nil
}

func (x *ProcessBatchResponseV2) GetNewBatchNum() uint64 {
	if x != nil {
		return x.NewBatchNum
	}
	return 0
}

func (x *ProcessBatchResponseV2) GetCntKeccakHashes() uint32 {
	if x != nil {
		return x.CntKeccakHashes
	}
	return 0
}

func (x *ProcessBatchResponseV2) GetCntPoseidonHashes() uint32 {
	if x != nil {
		return x.CntPoseidonHashes
	}
	return 0
}

func (x *ProcessBatchResponseV2) GetCntPoseidonPaddings() uint32 {
	if x != nil {
		return x.CntPoseidonPaddings
	}
	return 0
}

func (x *ProcessBatchResponseV2) GetCntMemAligns() uint32 {
	if x != nil {
		return x.CntMemAligns
	}
	return 0
}

func (x *ProcessBatchResponseV2) GetCntArithmetics() uint32 {
	if x != nil {
		return x.CntArithmetics
	}
	return 0
}

func (x *ProcessBatchResponseV2) GetCntBinaries() uint32 {
	if x != nil {
		return x.CntBinaries
	}
	return 0
}

func (x *ProcessBatchResponseV2) GetCntSteps() uint32 {
	if x != nil {
		return x.CntSteps
	}
	return 0
}

func (x *ProcessBatchResponseV2) GetCntSha256Hashes() uint32 {
	if x != nil {
		return x.CntSha256Hashes
	}
	return 0
}

func (x *ProcessBatchResponseV2) GetBlockResponses() []*ProcessBlockResponseV2 {
	if x != nil {
		return x.BlockResponses
	}
	return nil
}

func (x *ProcessBatchResponseV2) GetError() ExecutorError {
	if x != nil {
		return x.Error
	}
	return ExecutorError_EXECUTOR_ERROR_UNSPECIFIED
}

func (x *ProcessBatchResponseV2) GetReadWriteAddresses() map[string]*InfoReadWriteV2 {
	if x != nil {
		return x.ReadWriteAddresses
	}
	return nil
}

func (x *ProcessBatchResponseV2) GetFlushId() uint64 {
	if x != nil {
		return x.FlushId
	}
	return 0
}

func (x *ProcessBatchResponseV2) GetStoredFlushId() uint64 {
	if x != nil {
		return x.StoredFlushId
	}
	return 0
}

func (x *ProcessBatchResponseV2) GetProverId() string {
	if x != nil {
		return x.ProverId
	}
	return ""
}

func (x *ProcessBatchResponseV2) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ProcessBatchResponseV2) GetSmtKeys() [][]byte {
	if x != nil {
		return x.SmtKeys
	}
	return nil
}

func (x *ProcessBatchResponseV2) GetProgramKeys() [][]byte {
	if x != nil {
		return x.ProgramKeys
	}
	return nil
}

func (x *ProcessBatchResponseV2) GetForkId() uint64 {
	if x != nil {
		return x.ForkId
	}
	return 0
}

func (x *ProcessBatchResponseV2) GetInvalidBatch() uint32 {
	if x != nil {
		return x.InvalidBatch
	}
	return 0
}

func (x *ProcessBatchResponseV2) GetErrorRom() RomError {
	if x != nil {
		return x.ErrorRom
	}
	return RomError_ROM_ERROR_UNSPECIFIED
}

// Trace configuration request params
type TraceConfigV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Disables storage (default=false)
	DisableStorage uint32 `protobuf:"varint,1,opt,name=disable_storage,json=disableStorage,proto3" json:"disable_storage,omitempty"`
	// Disables stack (default=false)
	DisableStack uint32 `protobuf:"varint,2,opt,name=disable_stack,json=disableStack,proto3" json:"disable_stack,omitempty"`
	// Enables memory (default=false)
	EnableMemory uint32 `protobuf:"varint,3,opt,name=enable_memory,json=enableMemory,proto3" json:"enable_memory,omitempty"`
	// Enables return data (default=false)
	EnableReturnData uint32 `protobuf:"varint,4,opt,name=enable_return_data,json=enableReturnData,proto3" json:"enable_return_data,omitempty"`
	// Hash of tx in batch to retrieve the trace
	TxHashToGenerateFullTrace []byte `protobuf:"bytes,5,opt,name=tx_hash_to_generate_full_trace,json=txHashToGenerateFullTrace,proto3" json:"tx_hash_to_generate_full_trace,omitempty"`
}

func (x *TraceConfigV2) Reset() {
	*x = TraceConfigV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceConfigV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceConfigV2) ProtoMessage() {}

func (x *TraceConfigV2) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceConfigV2.ProtoReflect.Descriptor instead.
func (*TraceConfigV2) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{16}
}

func (x *TraceConfigV2) GetDisableStorage() uint32 {
	if x != nil {
		return x.DisableStorage
	}
	return 0
}

func (x *TraceConfigV2) GetDisableStack() uint32 {
	if x != nil {
		return x.DisableStack
	}
	return 0
}

func (x *TraceConfigV2) GetEnableMemory() uint32 {
	if x != nil {
		return x.EnableMemory
	}
	return 0
}

func (x *TraceConfigV2) GetEnableReturnData() uint32 {
	if x != nil {
		return x.EnableReturnData
	}
	return 0
}

func (x *TraceConfigV2) GetTxHashToGenerateFullTrace() []byte {
	if x != nil {
		return x.TxHashToGenerateFullTrace
	}
	return nil
}

// OverrideAccount indicates the overriding fields of account during the execution
// of a message call.
// Note, state and stateDiff can't be specified at the same time. If state is
// set, message execution will only use the data in the given state. Otherwise
// if statDiff is set, all diff will be applied first and then execute the call
// message.
type OverrideAccountV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fake balance to set for the account before executing the call.
	Balance []byte `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	// Fake nonce to set for the account before executing the call.
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Fake EVM bytecode to inject into the account before executing the call.
	Code []byte `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	// Fake key-value mapping to override all slots in the account storage before executing the call.
	State map[string]string `protobuf:"bytes,4,rep,name=state,proto3" json:"state,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Fake key-value mapping to override individual slots in the account storage before executing the call.
	StateDiff map[string]string `protobuf:"bytes,5,rep,name=state_diff,json=stateDiff,proto3" json:"state_diff,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OverrideAccountV2) Reset() {
	*x = OverrideAccountV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverrideAccountV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideAccountV2) ProtoMessage() {}

func (x *OverrideAccountV2) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideAccountV2.ProtoReflect.Descriptor instead.
func (*OverrideAccountV2) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{17}
}

func (x *OverrideAccountV2) GetBalance() []byte {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *OverrideAccountV2) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *OverrideAccountV2) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *OverrideAccountV2) GetState() map[string]string {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *OverrideAccountV2) GetStateDiff() map[string]string {
	if x != nil {
		return x.StateDiff
	}
	return nil
}

type InfoReadWriteV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If nonce="" then it has not been set; if set, string is in decimal (base 10)
	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// If balance="" then it has not been set; if set, string is in decimal (base 10)
	Balance string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *InfoReadWriteV2) Reset() {
	*x = InfoReadWriteV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoReadWriteV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoReadWriteV2) ProtoMessage() {}

func (x *InfoReadWriteV2) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoReadWriteV2.ProtoReflect.Descriptor instead.
func (*InfoReadWriteV2) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{18}
}

func (x *InfoReadWriteV2) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *InfoReadWriteV2) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type FullTraceV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *TransactionContextV2 `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Steps   []*TransactionStepV2  `protobuf:"bytes,2,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (x *FullTraceV2) Reset() {
	*x = FullTraceV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullTraceV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullTraceV2) ProtoMessage() {}

func (x *FullTraceV2) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullTraceV2.ProtoReflect.Descriptor instead.
func (*FullTraceV2) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{19}
}

func (x *FullTraceV2) GetContext() *TransactionContextV2 {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *FullTraceV2) GetSteps() []*TransactionStepV2 {
	if x != nil {
		return x.Steps
	}
	return nil
}

type TransactionContextV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CALL or CREATE
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Sender of the transaction
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// Target of the transaction
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// Input data of the transaction
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// Gas of the transaction
	Gas uint64 `protobuf:"varint,5,opt,name=gas,proto3" json:"gas,omitempty"`
	// Value of the transaction
	Value string `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	// Hash of the block in which the transaction was included
	BlockHash []byte `protobuf:"bytes,7,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Returned data from the runtime (function result or data supplied with revert opcode)
	Output []byte `protobuf:"bytes,8,opt,name=output,proto3" json:"output,omitempty"`
	// Total gas used as result of execution
	GasUsed uint64 `protobuf:"varint,9,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	// Gas Price
	GasPrice string `protobuf:"bytes,10,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// Execution Time
	ExecutionTime uint32 `protobuf:"varint,11,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	// Starting state root
	OldStateRoot []byte `protobuf:"bytes,12,opt,name=old_state_root,json=oldStateRoot,proto3" json:"old_state_root,omitempty"`
	// The number of transactions made by the sender prior to this one
	Nonce uint64 `protobuf:"varint,13,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The integer of the transaction's index position in the block
	TxIndex uint64 `protobuf:"varint,14,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	// The chain id of the transaction, if any
	ChainId uint64 `protobuf:"varint,15,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *TransactionContextV2) Reset() {
	*x = TransactionContextV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionContextV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionContextV2) ProtoMessage() {}

func (x *TransactionContextV2) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionContextV2.ProtoReflect.Descriptor instead.
func (*TransactionContextV2) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{20}
}

func (x *TransactionContextV2) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TransactionContextV2) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TransactionContextV2) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TransactionContextV2) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TransactionContextV2) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *TransactionContextV2) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TransactionContextV2) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *TransactionContextV2) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *TransactionContextV2) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *TransactionContextV2) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *TransactionContextV2) GetExecutionTime() uint32 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *TransactionContextV2) GetOldStateRoot() []byte {
	if x != nil {
		return x.OldStateRoot
	}
	return nil
}

func (x *TransactionContextV2) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *TransactionContextV2) GetTxIndex() uint64 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *TransactionContextV2) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

type TransactionStepV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRoot []byte `protobuf:"bytes,1,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	// Call depth
	Depth uint32 `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`
	// Program counter
	Pc uint64 `protobuf:"varint,3,opt,name=pc,proto3" json:"pc,omitempty"`
	// Remaining gas
	Gas uint64 `protobuf:"varint,4,opt,name=gas,proto3" json:"gas,omitempty"`
	// Gas cost of the operation
	GasCost uint64 `protobuf:"varint,5,opt,name=gas_cost,json=gasCost,proto3" json:"gas_cost,omitempty"`
	// Gas refunded during the operation
	GasRefund uint64 `protobuf:"varint,6,opt,name=gas_refund,json=gasRefund,proto3" json:"gas_refund,omitempty"`
	// Opcode
	Op uint32 `protobuf:"varint,7,opt,name=op,proto3" json:"op,omitempty"`
	// Content of the stack
	Stack []string `protobuf:"bytes,8,rep,name=stack,proto3" json:"stack,omitempty"`
	// Content of memory, starting at memory_offset, showing only changes vs. previous step
	Memory []byte `protobuf:"bytes,9,opt,name=memory,proto3" json:"memory,omitempty"`
	// Total size of memory
	MemorySize uint32 `protobuf:"varint,10,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	// Offset of memory changes
	MemoryOffset uint32 `protobuf:"varint,11,opt,name=memory_offset,json=memoryOffset,proto3" json:"memory_offset,omitempty"`
	// Return Data
	ReturnData []byte `protobuf:"bytes,12,opt,name=return_data,json=returnData,proto3" json:"return_data,omitempty"`
	// Contract information
	Contract *ContractV2 `protobuf:"bytes,13,opt,name=contract,proto3" json:"contract,omitempty"`
	// Error
	Error RomError `protobuf:"varint,14,opt,name=error,proto3,enum=executor.v1.RomError" json:"error,omitempty"`
	// Content of the storage
	Storage map[string]string `protobuf:"bytes,15,rep,name=storage,proto3" json:"storage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TransactionStepV2) Reset() {
	*x = TransactionStepV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionStepV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionStepV2) ProtoMessage() {}

func (x *TransactionStepV2) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionStepV2.ProtoReflect.Descriptor instead.
func (*TransactionStepV2) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{21}
}

func (x *TransactionStepV2) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *TransactionStepV2) GetDepth() uint32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *TransactionStepV2) GetPc() uint64 {
	if x != nil {
		return x.Pc
	}
	return 0
}

func (x *TransactionStepV2) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *TransactionStepV2) GetGasCost() uint64 {
	if x != nil {
		return x.GasCost
	}
	return 0
}

func (x *TransactionStepV2) GetGasRefund() uint64 {
	if x != nil {
		return x.GasRefund
	}
	return 0
}

func (x *TransactionStepV2) GetOp() uint32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *TransactionStepV2) GetStack() []string {
	if x != nil {
		return x.Stack
	}
	return nil
}

func (x *TransactionStepV2) GetMemory() []byte {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *TransactionStepV2) GetMemorySize() uint32 {
	if x != nil {
		return x.MemorySize
	}
	return 0
}

func (x *TransactionStepV2) GetMemoryOffset() uint32 {
	if x != nil {
		return x.MemoryOffset
	}
	return 0
}

func (x *TransactionStepV2) GetReturnData() []byte {
	if x != nil {
		return x.ReturnData
	}
	return nil
}

func (x *TransactionStepV2) GetContract() *ContractV2 {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *TransactionStepV2) GetError() RomError {
	if x != nil {
		return x.Error
	}
	return RomError_ROM_ERROR_UNSPECIFIED
}

func (x *TransactionStepV2) GetStorage() map[string]string {
	if x != nil {
		return x.Storage
	}
	return nil
}

type ContractV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Caller  string `protobuf:"bytes,2,opt,name=caller,proto3" json:"caller,omitempty"`
	Value   string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Data    []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Gas     uint64 `protobuf:"varint,5,opt,name=gas,proto3" json:"gas,omitempty"`
	// Define type of internal call: CREATE, CREATE2, CALL, CALLCODE, DELEGATECALL, STATICCALL
	Type string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ContractV2) Reset() {
	*x = ContractV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractV2) ProtoMessage() {}

func (x *ContractV2) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractV2.ProtoReflect.Descriptor instead.
func (*ContractV2) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{22}
}

func (x *ContractV2) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ContractV2) GetCaller() string {
	if x != nil {
		return x.Caller
	}
	return ""
}

func (x *ContractV2) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ContractV2) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ContractV2) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *ContractV2) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ProcessBlockResponseV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of the parent block. Must match the old_state_root
	ParentHash []byte `protobuf:"bytes,1,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	// l2 coinbase
	Coinbase string `protobuf:"bytes,2,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	// The maximum gas allowed in this block
	GasLimit uint64 `protobuf:"varint,3,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// block number
	BlockNumber uint64 `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// timestamp used in the block
	Timestamp uint64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// global exit root l1InfoTree
	Ger []byte `protobuf:"bytes,6,opt,name=ger,proto3" json:"ger,omitempty"`
	// block hash L1
	BlockHashL1 []byte `protobuf:"bytes,7,opt,name=block_hash_l1,json=blockHashL1,proto3" json:"block_hash_l1,omitempty"`
	// The total used gas by all transactions in this block
	GasUsed uint64 `protobuf:"varint,8,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	// The root of the block info tree
	BlockInfoRoot []byte `protobuf:"bytes,9,opt,name=block_info_root,json=blockInfoRoot,proto3" json:"block_info_root,omitempty"`
	// block hash (should match the new state root)
	BlockHash []byte `protobuf:"bytes,10,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// transaction responses
	Responses []*ProcessTransactionResponseV2 `protobuf:"bytes,11,rep,name=responses,proto3" json:"responses,omitempty"`
	// All Logs emited by LOG opcode during the block
	Logs []*LogV2 `protobuf:"bytes,12,rep,name=logs,proto3" json:"logs,omitempty"`
	// Any error encountered during block execution
	Error RomError `protobuf:"varint,13,opt,name=error,proto3,enum=executor.v1.RomError" json:"error,omitempty"`
}

func (x *ProcessBlockResponseV2) Reset() {
	*x = ProcessBlockResponseV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessBlockResponseV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBlockResponseV2) ProtoMessage() {}

func (x *ProcessBlockResponseV2) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessBlockResponseV2.ProtoReflect.Descriptor instead.
func (*ProcessBlockResponseV2) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{23}
}

func (x *ProcessBlockResponseV2) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *ProcessBlockResponseV2) GetCoinbase() string {
	if x != nil {
		return x.Coinbase
	}
	return ""
}

func (x *ProcessBlockResponseV2) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *ProcessBlockResponseV2) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ProcessBlockResponseV2) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ProcessBlockResponseV2) GetGer() []byte {
	if x != nil {
		return x.Ger
	}
	return nil
}

func (x *ProcessBlockResponseV2) GetBlockHashL1() []byte {
	if x != nil {
		return x.BlockHashL1
	}
	return nil
}

func (x *ProcessBlockResponseV2) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ProcessBlockResponseV2) GetBlockInfoRoot() []byte {
	if x != nil {
		return x.BlockInfoRoot
	}
	return nil
}

func (x *ProcessBlockResponseV2) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ProcessBlockResponseV2) GetResponses() []*ProcessTransactionResponseV2 {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *ProcessBlockResponseV2) GetLogs() []*LogV2 {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *ProcessBlockResponseV2) GetError() RomError {
	if x != nil {
		return x.Error
	}
	return RomError_ROM_ERROR_UNSPECIFIED
}

type ProcessTransactionResponseV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hash of the transaction
	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Hash of the transaction computed by the ROM
	TxHashL2 []byte `protobuf:"bytes,2,opt,name=tx_hash_l2,json=txHashL2,proto3" json:"tx_hash_l2,omitempty"`
	// RLP encoded transaction
	// [nonce, gasPrice, gasLimit, to, value, data, v, r, s]
	RlpTx []byte `protobuf:"bytes,3,opt,name=rlp_tx,json=rlpTx,proto3" json:"rlp_tx,omitempty"`
	// The hash of the block where this transaction was included
	BlockHash []byte `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// The block number where this transaction was included
	BlockNumber uint64 `protobuf:"varint,5,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// Type indicates legacy transaction
	// It will be always 0 (legacy) in the executor
	Type uint32 `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	// Returned data from the runtime (function result or data supplied with revert opcode)
	ReturnValue []byte `protobuf:"bytes,7,opt,name=return_value,json=returnValue,proto3" json:"return_value,omitempty"`
	// Total gas left as result of execution
	GasLeft uint64 `protobuf:"varint,8,opt,name=gas_left,json=gasLeft,proto3" json:"gas_left,omitempty"`
	// Total gas used as result of execution or gas estimation
	GasUsed uint64 `protobuf:"varint,9,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	// Cumulative gas used by this tranaction in the block
	CumulativeGasUsed uint64 `protobuf:"varint,10,opt,name=cumulative_gas_used,json=cumulativeGasUsed,proto3" json:"cumulative_gas_used,omitempty"`
	// Total gas refunded as result of execution
	GasRefunded uint64 `protobuf:"varint,11,opt,name=gas_refunded,json=gasRefunded,proto3" json:"gas_refunded,omitempty"`
	// Any error encountered during the execution
	Error RomError `protobuf:"varint,12,opt,name=error,proto3,enum=executor.v1.RomError" json:"error,omitempty"`
	// New SC Address in case of SC creation
	CreateAddress string `protobuf:"bytes,13,opt,name=create_address,json=createAddress,proto3" json:"create_address,omitempty"`
	// State Root
	StateRoot []byte `protobuf:"bytes,14,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	// All Logs emited by LOG opcode during this transaction
	Logs []*LogV2 `protobuf:"bytes,15,rep,name=logs,proto3" json:"logs,omitempty"`
	// Trace
	FullTrace *FullTraceV2 `protobuf:"bytes,16,opt,name=full_trace,json=fullTrace,proto3" json:"full_trace,omitempty"`
	// Efective Gas Price
	EffectiveGasPrice   string `protobuf:"bytes,17,opt,name=effective_gas_price,json=effectiveGasPrice,proto3" json:"effective_gas_price,omitempty"`
	EffectivePercentage uint32 `protobuf:"varint,18,opt,name=effective_percentage,json=effectivePercentage,proto3" json:"effective_percentage,omitempty"`
	// Flag to indicate if opcode 'GASPRICE' has been called
	HasGaspriceOpcode uint32 `protobuf:"varint,19,opt,name=has_gasprice_opcode,json=hasGaspriceOpcode,proto3" json:"has_gasprice_opcode,omitempty"`
	// Flag to indicate if opcode 'BALANCE' has been called
	HasBalanceOpcode uint32 `protobuf:"varint,20,opt,name=has_balance_opcode,json=hasBalanceOpcode,proto3" json:"has_balance_opcode,omitempty"`
}

func (x *ProcessTransactionResponseV2) Reset() {
	*x = ProcessTransactionResponseV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTransactionResponseV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTransactionResponseV2) ProtoMessage() {}

func (x *ProcessTransactionResponseV2) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTransactionResponseV2.ProtoReflect.Descriptor instead.
func (*ProcessTransactionResponseV2) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{24}
}

func (x *ProcessTransactionResponseV2) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *ProcessTransactionResponseV2) GetTxHashL2() []byte {
	if x != nil {
		return x.TxHashL2
	}
	return nil
}

func (x *ProcessTransactionResponseV2) GetRlpTx() []byte {
	if x != nil {
		return x.RlpTx
	}
	return nil
}

func (x *ProcessTransactionResponseV2) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ProcessTransactionResponseV2) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ProcessTransactionResponseV2) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ProcessTransactionResponseV2) GetReturnValue() []byte {
	if x != nil {
		return x.ReturnValue
	}
	return nil
}

func (x *ProcessTransactionResponseV2) GetGasLeft() uint64 {
	if x != nil {
		return x.GasLeft
	}
	return 0
}

func (x *ProcessTransactionResponseV2) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ProcessTransactionResponseV2) GetCumulativeGasUsed() uint64 {
	if x != nil {
		return x.CumulativeGasUsed
	}
	return 0
}

func (x *ProcessTransactionResponseV2) GetGasRefunded() uint64 {
	if x != nil {
		return x.GasRefunded
	}
	return 0
}

func (x *ProcessTransactionResponseV2) GetError() RomError {
	if x != nil {
		return x.Error
	}
	return RomError_ROM_ERROR_UNSPECIFIED
}

func (x *ProcessTransactionResponseV2) GetCreateAddress() string {
	if x != nil {
		return x.CreateAddress
	}
	return ""
}

func (x *ProcessTransactionResponseV2) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *ProcessTransactionResponseV2) GetLogs() []*LogV2 {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *ProcessTransactionResponseV2) GetFullTrace() *FullTraceV2 {
	if x != nil {
		return x.FullTrace
	}
	return nil
}

func (x *ProcessTransactionResponseV2) GetEffectiveGasPrice() string {
	if x != nil {
		return x.EffectiveGasPrice
	}
	return ""
}

func (x *ProcessTransactionResponseV2) GetEffectivePercentage() uint32 {
	if x != nil {
		return x.EffectivePercentage
	}
	return 0
}

func (x *ProcessTransactionResponseV2) GetHasGaspriceOpcode() uint32 {
	if x != nil {
		return x.HasGaspriceOpcode
	}
	return 0
}

func (x *ProcessTransactionResponseV2) GetHasBalanceOpcode() uint32 {
	if x != nil {
		return x.HasBalanceOpcode
	}
	return 0
}

type LogV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the contract that generated the event
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// List of topics provided by the contract
	Topics [][]byte `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	// Supplied by the contract, usually ABI-encoded
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Batch in which the transaction was included
	BlockNumber uint64 `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// Hash of the transaction
	TxHash []byte `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Hash of the transaction L2 computed by the rom
	TxHashL2 []byte `protobuf:"bytes,6,opt,name=tx_hash_l2,json=txHashL2,proto3" json:"tx_hash_l2,omitempty"`
	// Index of the transaction in the block
	TxIndex uint32 `protobuf:"varint,7,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	// Hash of the block in which the transaction was included
	BlockHash []byte `protobuf:"bytes,8,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Index of the log in the block
	Index uint32 `protobuf:"varint,9,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *LogV2) Reset() {
	*x = LogV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_executor_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogV2) ProtoMessage() {}

func (x *LogV2) ProtoReflect() protoreflect.Message {
	mi := &file_executor_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogV2.ProtoReflect.Descriptor instead.
func (*LogV2) Descriptor() ([]byte, []int) {
	return file_executor_proto_rawDescGZIP(), []int{25}
}

func (x *LogV2) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *LogV2) GetTopics() [][]byte {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *LogV2) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LogV2) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *LogV2) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *LogV2) GetTxHashL2() []byte {
	if x != nil {
		return x.TxHashL2
	}
	return nil
}

func (x *LogV2) GetTxIndex() uint32 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *LogV2) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *LogV2) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

var File_executor_proto protoreflect.FileDescriptor

var file_executor_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x07, 0x0a, 0x13, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x6c, 0x64, 0x5f,
	0x61, 0x63, 0x63, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x6c,
	0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x32, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x32, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x69, 0x74,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x65, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x74, 0x72,
	0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x6e, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x38, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x62,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x02, 0x64, 0x62, 0x12, 0x66, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x42, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x5a, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x1a, 0x35, 0x0a, 0x07, 0x44, 0x62, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x44, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79, 0x74,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcd, 0x07, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x63, 0x63,
	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x65, 0x78, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x6e, 0x65, 0x77, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x63,
	0x63, 0x61, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x63, 0x6e, 0x74, 0x4b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x69, 0x64, 0x6f,
	0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x63, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x65, 0x69, 0x64, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x69, 0x64, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x63, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x65, 0x69, 0x64, 0x6f, 0x6e, 0x50, 0x61, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x6d,
	0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6e, 0x74, 0x5f, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6e, 0x74, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6e, 0x74, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6e, 0x74, 0x53,
	0x74, 0x65, 0x70, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x73,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x6b, 0x0a,
	0x14, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x72, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c,
	0x75, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x6c,
	0x75, 0x73, 0x68, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f,
	0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6b, 0x49, 0x64, 0x1a, 0x61, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe7, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x75, 0x73,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x64, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x75, 0x73,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xf1, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x41, 0x0a, 0x1e, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x54, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x22, 0xd8, 0x02, 0x0a, 0x0f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x66, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x66, 0x66, 0x1a, 0x38, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x69, 0x66, 0x66, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x3f, 0x0a, 0x0d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0x7a, 0x0a, 0x09, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x39, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x22, 0xbb, 0x02, 0x0a,
	0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6f, 0x6c,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0xa8, 0x04, 0x0a, 0x0f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x70, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x67, 0x61, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x6f, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x65, 0x70, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10,
	0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xed, 0x04, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x6c, 0x70, 0x5f, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x6c,
	0x70, 0x54, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61,
	0x73, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61,
	0x73, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x67, 0x61, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6f, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x0a,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x73, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x67, 0x61,
	0x73, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x68, 0x61, 0x73, 0x47, 0x61, 0x73, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x68, 0x61, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xd5,
	0x0b, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x2b,
	0x0a, 0x12, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x41,
	0x63, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x6f,
	0x6c, 0x64, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x32, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x32, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x31, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c,
	0x31, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x6c, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x4c, 0x31, 0x12, 0x2c,
	0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6e, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x36, 0x0a, 0x18, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x5f, 0x6c, 0x31, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4c,
	0x31, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c,
	0x32, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73,
	0x6b, 0x69, 0x70, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x32,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x1a, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x61, 0x0a, 0x11, 0x6c, 0x31, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x72, 0x65,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32,
	0x2e, 0x4c, 0x31, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x72, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6c, 0x31, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x72, 0x65, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x56, 0x32, 0x2e, 0x44, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x02, 0x64, 0x62,
	0x12, 0x68, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79, 0x74, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x42, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x32, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x5c, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x12, 0x2a, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x56, 0x32, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x1a, 0x58, 0x0a,
	0x13, 0x4c, 0x31, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x72, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x31, 0x44, 0x61, 0x74, 0x61, 0x56, 0x32, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x35, 0x0a, 0x07, 0x44, 0x62, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44,
	0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79, 0x74, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9a, 0x01, 0x0a, 0x08, 0x4c, 0x31, 0x44, 0x61, 0x74,
	0x61, 0x56, 0x32, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x65, 0x78,
	0x69, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6c, 0x31, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x4c,
	0x31, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6d, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x6d, 0x74, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x22, 0xcc, 0x01, 0x0a, 0x07, 0x44, 0x65, 0x62, 0x75, 0x67, 0x56, 0x32, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x2d, 0x0a, 0x13, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x69,
	0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x6e, 0x65,
	0x77, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e,
	0x75, 0x6d, 0x22, 0x88, 0x09, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32, 0x12, 0x24, 0x0a,
	0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x78,
	0x69, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x6e,
	0x65, 0x77, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x63, 0x63, 0x61,
	0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x63, 0x6e, 0x74, 0x4b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x69, 0x64, 0x6f, 0x6e, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6e,
	0x74, 0x50, 0x6f, 0x73, 0x65, 0x69, 0x64, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x69, 0x64, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x63, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x65, 0x69, 0x64, 0x6f, 0x6e, 0x50, 0x61, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x61,
	0x6c, 0x69, 0x67, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6e, 0x74,
	0x4d, 0x65, 0x6d, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6e, 0x74,
	0x5f, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6e, 0x74, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6e, 0x74, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6e, 0x74, 0x53, 0x74, 0x65,
	0x70, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63,
	0x6e, 0x74, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x4c,
	0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32, 0x52, 0x0e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x6d,
	0x0a, 0x14, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56,
	0x32, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x72, 0x65, 0x61, 0x64, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x64, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6d, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x6d, 0x74, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x6f,
	0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x6f, 0x6d, 0x1a, 0x63, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x64,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x56, 0x32, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf3, 0x01,
	0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x32, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x41, 0x0a, 0x1e, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68,
	0x54, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x11, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4c,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x56, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x69, 0x66, 0x66, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x69, 0x66, 0x66, 0x1a, 0x38, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x66, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x41, 0x0a, 0x0f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x56, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x0b, 0x46, 0x75, 0x6c, 0x6c,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x56, 0x32, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x32, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65,
	0x70, 0x56, 0x32, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x22, 0x92, 0x03, 0x0a, 0x14, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x56, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61,
	0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x78, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22,
	0xae, 0x04, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x65, 0x70, 0x56, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x70, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x61, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x73, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x67, 0x61, 0x73,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x56, 0x32, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x2b, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f,
	0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x45, 0x0a,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x56, 0x32, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x32, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x67,
	0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xe9, 0x03, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x67, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6c, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x4c, 0x31, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x47, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x56, 0x32, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73,
	0x12, 0x2b, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f,
	0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x83, 0x06,
	0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x6c, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x4c, 0x32, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6c, 0x70, 0x5f, 0x74, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x6c, 0x70, 0x54, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x65, 0x66,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x4c, 0x65, 0x66, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67,
	0x61, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x67, 0x61, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x2b,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6d, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x56, 0x32, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6c, 0x6c,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x56, 0x32, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x67, 0x61, 0x73,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x68, 0x61, 0x73, 0x47, 0x61, 0x73, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4f,
	0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x68, 0x61, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x56, 0x32, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1c, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6c, 0x32, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x4c, 0x32, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2a, 0xbd, 0x0a,
	0x0a, 0x08, 0x52, 0x6f, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f,
	0x46, 0x5f, 0x47, 0x41, 0x53, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x4f, 0x4d, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46,
	0x4c, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x46, 0x4c,
	0x4f, 0x57, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x4f,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x56, 0x45,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x45, 0x52, 0x53, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x10, 0x08, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x4f,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x4b, 0x45, 0x43, 0x43, 0x41, 0x4b, 0x10, 0x09,
	0x12, 0x24, 0x0a, 0x20, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x55,
	0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x42, 0x49,
	0x4e, 0x41, 0x52, 0x59, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x45, 0x52, 0x53, 0x5f, 0x4d, 0x45, 0x4d, 0x10, 0x0b, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x4f, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x41, 0x52, 0x49, 0x54, 0x48, 0x10, 0x0c, 0x12, 0x25,
	0x0a, 0x21, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f,
	0x4f, 0x46, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x50, 0x41, 0x44, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x0d, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45,
	0x52, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x45, 0x49, 0x44, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x21, 0x0a,
	0x1d, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f,
	0x46, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x0f,
	0x12, 0x1a, 0x0a, 0x16, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18,
	0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x11, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x4f,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x12, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x4f, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x42, 0x59,
	0x54, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x53, 0x5f, 0x45, 0x46,
	0x10, 0x13, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x49, 0x4e, 0x54, 0x52, 0x49, 0x4e, 0x53, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x14, 0x12, 0x28, 0x0a,
	0x24, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x49,
	0x4e, 0x53, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x15, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x4f, 0x4d, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x49, 0x4e, 0x53, 0x49, 0x43, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0x16, 0x12, 0x29,
	0x0a, 0x25, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x52,
	0x49, 0x4e, 0x53, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x47, 0x41,
	0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x17, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x4f, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x49, 0x4e, 0x53, 0x49, 0x43,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45,
	0x10, 0x18, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x49, 0x4e, 0x54, 0x52, 0x49, 0x4e, 0x53, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x10, 0x19, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x49, 0x4e, 0x54, 0x52, 0x49, 0x4e, 0x53, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x1a,
	0x12, 0x27, 0x0a, 0x23, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e,
	0x54, 0x52, 0x49, 0x4e, 0x53, 0x49, 0x43, 0x5f, 0x54, 0x58, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x1b, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x4f, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x42, 0x49, 0x47, 0x10, 0x1c, 0x12, 0x21, 0x0a, 0x1d, 0x52,
	0x4f, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x44, 0x10, 0x1d, 0x12, 0x19,
	0x0a, 0x15, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x52, 0x4c, 0x50, 0x10, 0x1e, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x4f, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44,
	0x45, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x32, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x1f, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x4f, 0x4d, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x4c, 0x32, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x20, 0x12, 0x38, 0x0a, 0x34, 0x52,
	0x4f, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x54, 0x58, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x32, 0x5f, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54,
	0x41, 0x4d, 0x50, 0x10, 0x21, 0x12, 0x36, 0x0a, 0x32, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x58, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x32, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x49,
	0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x22, 0x2a, 0x9d, 0x2a,
	0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44,
	0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x32, 0x0a, 0x2e, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x53, 0x10, 0x03, 0x12, 0x33, 0x0a,
	0x2f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x53,
	0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4b, 0x45, 0x43, 0x43, 0x41, 0x4b,
	0x10, 0x04, 0x12, 0x33, 0x0a, 0x2f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x42,
	0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x05, 0x12, 0x30, 0x0a, 0x2c, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x45, 0x4d, 0x10, 0x06, 0x12, 0x32, 0x0a, 0x2e, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x52, 0x49, 0x54, 0x48, 0x10, 0x07, 0x12, 0x34, 0x0a,
	0x30, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x53,
	0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x08, 0x12, 0x35, 0x0a, 0x31, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x50, 0x4f, 0x53, 0x45, 0x49, 0x44, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x44,
	0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x49, 0x53,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x45, 0x41, 0x32, 0x53, 0x43,
	0x41, 0x4c, 0x41, 0x52, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54,
	0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x53, 0x33, 0x32, 0x10, 0x0d,
	0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x54, 0x58, 0x10, 0x0e,
	0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x10, 0x0f,
	0x12, 0x39, 0x0a, 0x35, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x41, 0x52, 0x49, 0x54, 0x48,
	0x5f, 0x45, 0x43, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44,
	0x45, 0x5f, 0x42, 0x59, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x10, 0x12, 0x2f, 0x0a, 0x2b, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d,
	0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4f, 0x55,
	0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x11, 0x12, 0x2b, 0x0a, 0x27,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53,
	0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4e,
	0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x12, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x13, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x4b, 0x10, 0x14, 0x12, 0x32, 0x0a, 0x2e, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d,
	0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x4b, 0x5f, 0x53, 0x49, 0x5a, 0x45,
	0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x15, 0x12,
	0x32, 0x0a, 0x2e, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x4b, 0x5f,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x16, 0x12, 0x40, 0x0a, 0x3c, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41,
	0x53, 0x48, 0x4b, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x55,
	0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x17, 0x12, 0x38, 0x0a, 0x34, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f,
	0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f,
	0x48, 0x41, 0x53, 0x48, 0x4b, 0x44, 0x49, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x18, 0x12,
	0x34, 0x0a, 0x30, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x4b, 0x44,
	0x49, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x19, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f,
	0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f,
	0x48, 0x41, 0x53, 0x48, 0x50, 0x10, 0x1a, 0x12, 0x32, 0x0a, 0x2e, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x50, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4f, 0x55, 0x54,
	0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x1b, 0x12, 0x32, 0x0a, 0x2e, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d,
	0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x50, 0x5f, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x1c, 0x12,
	0x40, 0x0a, 0x3c, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x50, 0x5f,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x5f, 0x53, 0x49,
	0x5a, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x1d, 0x12, 0x38, 0x0a, 0x34, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48,
	0x50, 0x44, 0x49, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x1e, 0x12, 0x34, 0x0a, 0x30, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d,
	0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x50, 0x44, 0x49, 0x47, 0x45, 0x53,
	0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x1f, 0x12, 0x37, 0x0a, 0x33, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x41,
	0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f,
	0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x20, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f,
	0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x46, 0x52,
	0x45, 0x45, 0x49, 0x4e, 0x10, 0x21, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54,
	0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e,
	0x5f, 0x41, 0x53, 0x53, 0x45, 0x52, 0x54, 0x10, 0x22, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x23, 0x12, 0x30, 0x0a, 0x2c,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53,
	0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x24, 0x12, 0x31,
	0x0a, 0x2d, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45,
	0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x25, 0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48,
	0x4b, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x26, 0x12, 0x31, 0x0a, 0x2d, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53,
	0x48, 0x4b, 0x5f, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x10, 0x27, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f,
	0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f,
	0x48, 0x41, 0x53, 0x48, 0x4b, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x10, 0x28, 0x12, 0x33, 0x0a, 0x2f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f,
	0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f,
	0x48, 0x41, 0x53, 0x48, 0x4b, 0x4c, 0x45, 0x4e, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f,
	0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x29, 0x12, 0x30, 0x0a, 0x2c, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f,
	0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x4b, 0x4c, 0x45, 0x4e, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x57, 0x49, 0x43, 0x45, 0x10, 0x2a, 0x12, 0x30, 0x0a, 0x2c,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53,
	0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x4b, 0x44, 0x49, 0x47, 0x45,
	0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x2b, 0x12, 0x36,
	0x0a, 0x32, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x4b, 0x44, 0x49,
	0x47, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x49, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x10, 0x2c, 0x12, 0x33, 0x0a, 0x2f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54,
	0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e,
	0x5f, 0x48, 0x41, 0x53, 0x48, 0x4b, 0x44, 0x49, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x45, 0x44, 0x5f, 0x54, 0x57, 0x49, 0x43, 0x45, 0x10, 0x2d, 0x12, 0x2f, 0x0a, 0x2b, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d,
	0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x50, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x2e, 0x12, 0x31, 0x0a, 0x2d,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53,
	0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x50, 0x5f, 0x50, 0x41, 0x44,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x2f, 0x12,
	0x2e, 0x0a, 0x2a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x50, 0x5f,
	0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x30, 0x12,
	0x33, 0x0a, 0x2f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x50, 0x4c,
	0x45, 0x4e, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x31, 0x12, 0x30, 0x0a, 0x2c, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48,
	0x41, 0x53, 0x48, 0x50, 0x4c, 0x45, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x54,
	0x57, 0x49, 0x43, 0x45, 0x10, 0x32, 0x12, 0x36, 0x0a, 0x32, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54,
	0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e,
	0x5f, 0x48, 0x41, 0x53, 0x48, 0x50, 0x44, 0x49, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x49, 0x47,
	0x45, 0x53, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x33, 0x12, 0x33,
	0x0a, 0x2f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x50, 0x44, 0x49,
	0x47, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x57, 0x49, 0x43,
	0x45, 0x10, 0x34, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x41, 0x52,
	0x49, 0x54, 0x48, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x35, 0x12, 0x33,
	0x0a, 0x2f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x41, 0x52, 0x49, 0x54, 0x48, 0x5f, 0x45,
	0x43, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x36, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x42, 0x49,
	0x4e, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x37, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x42, 0x49,
	0x4e, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x38, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x42, 0x49,
	0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4c, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x39, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x42, 0x49, 0x4e,
	0x41, 0x52, 0x59, 0x5f, 0x53, 0x4c, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x3a, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x42, 0x49, 0x4e,
	0x41, 0x52, 0x59, 0x5f, 0x45, 0x51, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x3b, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x42, 0x49, 0x4e, 0x41,
	0x52, 0x59, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x3c, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x42, 0x49, 0x4e, 0x41,
	0x52, 0x59, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x3d,
	0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52,
	0x59, 0x5f, 0x58, 0x4f, 0x52, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x3e,
	0x12, 0x32, 0x0a, 0x2e, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x41, 0x4c,
	0x49, 0x47, 0x4e, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x3f, 0x12, 0x33, 0x0a, 0x2f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x4d,
	0x45, 0x4d, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x38, 0x5f, 0x4d,
	0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x40, 0x12, 0x31, 0x0a, 0x2d, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x41, 0x12, 0x2c, 0x0a, 0x28,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53,
	0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x4a, 0x4d, 0x50, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x5f,
	0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x42, 0x12, 0x32, 0x0a, 0x2e, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f,
	0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x4b, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x43, 0x12, 0x32,
	0x0a, 0x2e, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x50, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x4c, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x45, 0x12, 0x2d, 0x0a,
	0x29, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x4c, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x5f,
	0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x46, 0x12, 0x23, 0x0a, 0x1f,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x10,
	0x47, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x4c, 0x32, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x48, 0x12, 0x2b, 0x0a, 0x27, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x49,
	0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x49, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x58, 0x45, 0x43,
	0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x42, 0x41, 0x53, 0x45, 0x10, 0x4a, 0x12, 0x1f, 0x0a,
	0x1b, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x10, 0x4b, 0x12, 0x21,
	0x0a, 0x1d, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x42, 0x5f, 0x4b, 0x45, 0x59, 0x10,
	0x4c, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x42, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0x4d, 0x12, 0x31, 0x0a, 0x2d, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54,
	0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x53, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x4e, 0x12, 0x33, 0x0a, 0x2f, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x53, 0x5f, 0x42, 0x59,
	0x54, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x4f, 0x12, 0x22,
	0x0a, 0x1e, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4b, 0x45, 0x59,
	0x10, 0x50, 0x12, 0x33, 0x0a, 0x2f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53,
	0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x51, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x53, 0x10, 0x52, 0x12, 0x32, 0x0a, 0x2e, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4f,
	0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x53, 0x12, 0x32, 0x0a,
	0x2e, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x53, 0x5f, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x54, 0x12, 0x40, 0x0a, 0x3c, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48,
	0x53, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x5f,
	0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0x55, 0x12, 0x38, 0x0a, 0x34, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41,
	0x53, 0x48, 0x53, 0x44, 0x49, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x56, 0x12, 0x34, 0x0a,
	0x30, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x53, 0x44, 0x49, 0x47,
	0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x57, 0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41,
	0x53, 0x48, 0x53, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x58, 0x12, 0x31, 0x0a, 0x2d, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48,
	0x41, 0x53, 0x48, 0x53, 0x5f, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x49, 0x53,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x59, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4d, 0x49, 0x53,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x5a, 0x12, 0x33, 0x0a, 0x2f, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x53, 0x4c, 0x45, 0x4e, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54,
	0x48, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x5b, 0x12, 0x30, 0x0a, 0x2c,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53,
	0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x53, 0x4c, 0x45, 0x4e, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x57, 0x49, 0x43, 0x45, 0x10, 0x5c, 0x12, 0x30,
	0x0a, 0x2c, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x53, 0x44, 0x49,
	0x47, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x5d,
	0x12, 0x36, 0x0a, 0x32, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x53,
	0x44, 0x49, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x49, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x49,
	0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x5e, 0x12, 0x33, 0x0a, 0x2f, 0x45, 0x58, 0x45, 0x43,
	0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41,
	0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x53, 0x44, 0x49, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x57, 0x49, 0x43, 0x45, 0x10, 0x5f, 0x12, 0x32, 0x0a,
	0x2e, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x53, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x60, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x31, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x61, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x4c, 0x31, 0x10, 0x62, 0x12, 0x36, 0x0a, 0x32, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x31, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x56, 0x32, 0x5f,
	0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x54,
	0x10, 0x63, 0x12, 0x33, 0x0a, 0x2f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x31, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x56, 0x32, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x48, 0x41,
	0x53, 0x48, 0x5f, 0x4c, 0x31, 0x10, 0x64, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x4c, 0x31, 0x5f, 0x53, 0x4d, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x10, 0x65,
	0x12, 0x22, 0x0a, 0x1e, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x66, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x42,
	0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4c, 0x54, 0x34, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x67, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e,
	0x45, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x68, 0x12,
	0x2d, 0x0a, 0x29, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x43,
	0x43, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x69, 0x12, 0x2e,
	0x0a, 0x2a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x6a, 0x12, 0x23,
	0x0a, 0x1f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x44, 0x42, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x6b, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x6c, 0x12, 0x24, 0x0a,
	0x20, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x48, 0x41, 0x53, 0x48, 0x44, 0x42, 0x5f, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x6d, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x52, 0x10, 0x6e, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f,
	0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x4c, 0x31, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x49, 0x4e, 0x44,
	0x45, 0x58, 0x10, 0x6f, 0x12, 0x37, 0x0a, 0x33, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c,
	0x31, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x53, 0x4d, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x70, 0x32, 0x96, 0x02,
	0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x55, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x20, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x56, 0x32, 0x12, 0x22, 0x2e, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x1a, 0x23,
	0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x56, 0x32, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x23, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x30, 0x78, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x48, 0x65,
	0x72, 0x6d, 0x65, 0x7a, 0x2f, 0x7a, 0x6b, 0x65, 0x76, 0x6d, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_executor_proto_rawDescOnce sync.Once
	file_executor_proto_rawDescData = file_executor_proto_rawDesc
)

func file_executor_proto_rawDescGZIP() []byte {
	file_executor_proto_rawDescOnce.Do(func() {
		file_executor_proto_rawDescData = protoimpl.X.CompressGZIP(file_executor_proto_rawDescData)
	})
	return file_executor_proto_rawDescData
}

var file_executor_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_executor_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_executor_proto_goTypes = []interface{}{
	(RomError)(0),                        // 0: executor.v1.RomError
	(ExecutorError)(0),                   // 1: executor.v1.ExecutorError
	(*ProcessBatchRequest)(nil),          // 2: executor.v1.ProcessBatchRequest
	(*ProcessBatchResponse)(nil),         // 3: executor.v1.ProcessBatchResponse
	(*GetFlushStatusResponse)(nil),       // 4: executor.v1.GetFlushStatusResponse
	(*TraceConfig)(nil),                  // 5: executor.v1.TraceConfig
	(*OverrideAccount)(nil),              // 6: executor.v1.OverrideAccount
	(*InfoReadWrite)(nil),                // 7: executor.v1.InfoReadWrite
	(*FullTrace)(nil),                    // 8: executor.v1.FullTrace
	(*TransactionContext)(nil),           // 9: executor.v1.TransactionContext
	(*TransactionStep)(nil),              // 10: executor.v1.TransactionStep
	(*Contract)(nil),                     // 11: executor.v1.Contract
	(*ProcessTransactionResponse)(nil),   // 12: executor.v1.ProcessTransactionResponse
	(*Log)(nil),                          // 13: executor.v1.Log
	(*ProcessBatchRequestV2)(nil),        // 14: executor.v1.ProcessBatchRequestV2
	(*L1DataV2)(nil),                     // 15: executor.v1.L1DataV2
	(*DebugV2)(nil),                      // 16: executor.v1.DebugV2
	(*ProcessBatchResponseV2)(nil),       // 17: executor.v1.ProcessBatchResponseV2
	(*TraceConfigV2)(nil),                // 18: executor.v1.TraceConfigV2
	(*OverrideAccountV2)(nil),            // 19: executor.v1.OverrideAccountV2
	(*InfoReadWriteV2)(nil),              // 20: executor.v1.InfoReadWriteV2
	(*FullTraceV2)(nil),                  // 21: executor.v1.FullTraceV2
	(*TransactionContextV2)(nil),         // 22: executor.v1.TransactionContextV2
	(*TransactionStepV2)(nil),            // 23: executor.v1.TransactionStepV2
	(*ContractV2)(nil),                   // 24: executor.v1.ContractV2
	(*ProcessBlockResponseV2)(nil),       // 25: executor.v1.ProcessBlockResponseV2
	(*ProcessTransactionResponseV2)(nil), // 26: executor.v1.ProcessTransactionResponseV2
	(*LogV2)(nil),                        // 27: executor.v1.LogV2
	nil,                                  // 28: executor.v1.ProcessBatchRequest.DbEntry
	nil,                                  // 29: executor.v1.ProcessBatchRequest.ContractsBytecodeEntry
	nil,                                  // 30: executor.v1.ProcessBatchRequest.StateOverrideEntry
	nil,                                  // 31: executor.v1.ProcessBatchResponse.ReadWriteAddressesEntry
	nil,                                  // 32: executor.v1.OverrideAccount.StateEntry
	nil,                                  // 33: executor.v1.OverrideAccount.StateDiffEntry
	nil,                                  // 34: executor.v1.TransactionStep.StorageEntry
	nil,                                  // 35: executor.v1.ProcessBatchRequestV2.L1InfoTreeDataEntry
	nil,                                  // 36: executor.v1.ProcessBatchRequestV2.DbEntry
	nil,                                  // 37: executor.v1.ProcessBatchRequestV2.ContractsBytecodeEntry
	nil,                                  // 38: executor.v1.ProcessBatchRequestV2.StateOverrideEntry
	nil,                                  // 39: executor.v1.ProcessBatchResponseV2.ReadWriteAddressesEntry
	nil,                                  // 40: executor.v1.OverrideAccountV2.StateEntry
	nil,                                  // 41: executor.v1.OverrideAccountV2.StateDiffEntry
	nil,                                  // 42: executor.v1.TransactionStepV2.StorageEntry
	(*emptypb.Empty)(nil),                // 43: google.protobuf.Empty
}
var file_executor_proto_depIdxs = []int32{
	28, // 0: executor.v1.ProcessBatchRequest.db:type_name -> executor.v1.ProcessBatchRequest.DbEntry
	29, // 1: executor.v1.ProcessBatchRequest.contracts_bytecode:type_name -> executor.v1.ProcessBatchRequest.ContractsBytecodeEntry
	5,  // 2: executor.v1.ProcessBatchRequest.trace_config:type_name -> executor.v1.TraceConfig
	30, // 3: executor.v1.ProcessBatchRequest.state_override:type_name -> executor.v1.ProcessBatchRequest.StateOverrideEntry
	12, // 4: executor.v1.ProcessBatchResponse.responses:type_name -> executor.v1.ProcessTransactionResponse
	1,  // 5: executor.v1.ProcessBatchResponse.error:type_name -> executor.v1.ExecutorError
	31, // 6: executor.v1.ProcessBatchResponse.read_write_addresses:type_name -> executor.v1.ProcessBatchResponse.ReadWriteAddressesEntry
	32, // 7: executor.v1.OverrideAccount.state:type_name -> executor.v1.OverrideAccount.StateEntry
	33, // 8: executor.v1.OverrideAccount.state_diff:type_name -> executor.v1.OverrideAccount.StateDiffEntry
	9,  // 9: executor.v1.FullTrace.context:type_name -> executor.v1.TransactionContext
	10, // 10: executor.v1.FullTrace.steps:type_name -> executor.v1.TransactionStep
	11, // 11: executor.v1.TransactionStep.contract:type_name -> executor.v1.Contract
	0,  // 12: executor.v1.TransactionStep.error:type_name -> executor.v1.RomError
	34, // 13: executor.v1.TransactionStep.storage:type_name -> executor.v1.TransactionStep.StorageEntry
	0,  // 14: executor.v1.ProcessTransactionResponse.error:type_name -> executor.v1.RomError
	13, // 15: executor.v1.ProcessTransactionResponse.logs:type_name -> executor.v1.Log
	8,  // 16: executor.v1.ProcessTransactionResponse.full_trace:type_name -> executor.v1.FullTrace
	35, // 17: executor.v1.ProcessBatchRequestV2.l1_info_tree_data:type_name -> executor.v1.ProcessBatchRequestV2.L1InfoTreeDataEntry
	36, // 18: executor.v1.ProcessBatchRequestV2.db:type_name -> executor.v1.ProcessBatchRequestV2.DbEntry
	37, // 19: executor.v1.ProcessBatchRequestV2.contracts_bytecode:type_name -> executor.v1.ProcessBatchRequestV2.ContractsBytecodeEntry
	18, // 20: executor.v1.ProcessBatchRequestV2.trace_config:type_name -> executor.v1.TraceConfigV2
	38, // 21: executor.v1.ProcessBatchRequestV2.state_override:type_name -> executor.v1.ProcessBatchRequestV2.StateOverrideEntry
	16, // 22: executor.v1.ProcessBatchRequestV2.debug:type_name -> executor.v1.DebugV2
	25, // 23: executor.v1.ProcessBatchResponseV2.block_responses:type_name -> executor.v1.ProcessBlockResponseV2
	1,  // 24: executor.v1.ProcessBatchResponseV2.error:type_name -> executor.v1.ExecutorError
	39, // 25: executor.v1.ProcessBatchResponseV2.read_write_addresses:type_name -> executor.v1.ProcessBatchResponseV2.ReadWriteAddressesEntry
	0,  // 26: executor.v1.ProcessBatchResponseV2.error_rom:type_name -> executor.v1.RomError
	40, // 27: executor.v1.OverrideAccountV2.state:type_name -> executor.v1.OverrideAccountV2.StateEntry
	41, // 28: executor.v1.OverrideAccountV2.state_diff:type_name -> executor.v1.OverrideAccountV2.StateDiffEntry
	22, // 29: executor.v1.FullTraceV2.context:type_name -> executor.v1.TransactionContextV2
	23, // 30: executor.v1.FullTraceV2.steps:type_name -> executor.v1.TransactionStepV2
	24, // 31: executor.v1.TransactionStepV2.contract:type_name -> executor.v1.ContractV2
	0,  // 32: executor.v1.TransactionStepV2.error:type_name -> executor.v1.RomError
	42, // 33: executor.v1.TransactionStepV2.storage:type_name -> executor.v1.TransactionStepV2.StorageEntry
	26, // 34: executor.v1.ProcessBlockResponseV2.responses:type_name -> executor.v1.ProcessTransactionResponseV2
	27, // 35: executor.v1.ProcessBlockResponseV2.logs:type_name -> executor.v1.LogV2
	0,  // 36: executor.v1.ProcessBlockResponseV2.error:type_name -> executor.v1.RomError
	0,  // 37: executor.v1.ProcessTransactionResponseV2.error:type_name -> executor.v1.RomError
	27, // 38: executor.v1.ProcessTransactionResponseV2.logs:type_name -> executor.v1.LogV2
	21, // 39: executor.v1.ProcessTransactionResponseV2.full_trace:type_name -> executor.v1.FullTraceV2
	6,  // 40: executor.v1.ProcessBatchRequest.StateOverrideEntry.value:type_name -> executor.v1.OverrideAccount
	7,  // 41: executor.v1.ProcessBatchResponse.ReadWriteAddressesEntry.value:type_name -> executor.v1.InfoReadWrite
	15, // 42: executor.v1.ProcessBatchRequestV2.L1InfoTreeDataEntry.value:type_name -> executor.v1.L1DataV2
	19, // 43: executor.v1.ProcessBatchRequestV2.StateOverrideEntry.value:type_name -> executor.v1.OverrideAccountV2
	20, // 44: executor.v1.ProcessBatchResponseV2.ReadWriteAddressesEntry.value:type_name -> executor.v1.InfoReadWriteV2
	2,  // 45: executor.v1.ExecutorService.ProcessBatch:input_type -> executor.v1.ProcessBatchRequest
	14, // 46: executor.v1.ExecutorService.ProcessBatchV2:input_type -> executor.v1.ProcessBatchRequestV2
	43, // 47: executor.v1.ExecutorService.GetFlushStatus:input_type -> google.protobuf.Empty
	3,  // 48: executor.v1.ExecutorService.ProcessBatch:output_type -> executor.v1.ProcessBatchResponse
	17, // 49: executor.v1.ExecutorService.ProcessBatchV2:output_type -> executor.v1.ProcessBatchResponseV2
	4,  // 50: executor.v1.ExecutorService.GetFlushStatus:output_type -> executor.v1.GetFlushStatusResponse
	48, // [48:51] is the sub-list for method output_type
	45, // [45:48] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_executor_proto_init() }
func file_executor_proto_init() {
	if File_executor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_executor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlushStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverrideAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoReadWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessBatchRequestV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L1DataV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessBatchResponseV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceConfigV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverrideAccountV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoReadWriteV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullTraceV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionContextV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionStepV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessBlockResponseV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTransactionResponseV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_executor_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_executor_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_executor_proto_goTypes,
		DependencyIndexes: file_executor_proto_depIdxs,
		EnumInfos:         file_executor_proto_enumTypes,
		MessageInfos:      file_executor_proto_msgTypes,
	}.Build()
	File_executor_proto = out.File
	file_executor_proto_rawDesc = nil
	file_executor_proto_goTypes = nil
	file_executor_proto_depIdxs = nil
}
