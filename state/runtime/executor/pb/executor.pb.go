// Code generated by protoc-gen-go. DO NOT EDIT.
// source: executor.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Error int32

const (
	Error_ERROR_UNSPECIFIED Error = 0
	// ERROR_NO_ERROR indicates the execution ended successfully
	Error_ERROR_NO_ERROR Error = 1
	// ERROR_OUT_OF_GAS indicates there is not enough balance to continue the execution
	Error_ERROR_OUT_OF_GAS Error = 2
	// ERROR_STACK_OVERFLOW indicates a stack overflow has happened
	Error_ERROR_STACK_OVERFLOW Error = 3
	// ERROR_STACK_UNDERFLOW indicates a stack overflow has happened
	Error_ERROR_STACK_UNDERFLOW Error = 4
	// ERROR_NOT_ENOUGH_FUNDS indicates there is not enough funds to continue the execution
	Error_ERROR_NOT_ENOUGH_FUNDS Error = 5
	// ERROR_INSUFFICIENT_BALANCE indicates there is not enough balance to continue the execution
	Error_ERROR_INSUFFICIENT_BALANCE Error = 6
	// ERROR_CODE_NOT_FOUND indicates the code was not found
	Error_ERROR_CODE_NOT_FOUND Error = 7
	// ERROR_MAX_CODE_SIZE_EXCEEDED indicates the code size is beyond the maximum
	Error_ERROR_MAX_CODE_SIZE_EXCEEDED Error = 8
	// ERROR_CONTRACT_ADDRESS_COLLISION there is a collision regarding contract addresses
	Error_ERROR_CONTRACT_ADDRESS_COLLISION Error = 9
	// ERROR_DEPTH indicates the maximun call depth has been passed
	Error_ERROR_DEPTH Error = 10
	// ERROR_EXECUTION_REVERTED indicates the execution has been reverted
	Error_ERROR_EXECUTION_REVERTED Error = 11
	// ERROR_CODE_STORE_OUT_OF_GAS indicates there is not enough gas for the storage
	Error_ERROR_CODE_STORE_OUT_OF_GAS Error = 12
	// ERROR_OUT_OF_COUNTERS indicates there is not enough counters to continue the execution
	Error_ERROR_OUT_OF_COUNTERS Error = 13
	// ERROR_INVALID_TX indicates the transaction is invalid because of invalid jump dest, invalid opcode, invalid deploy
	// or invalid static tx
	Error_ERROR_INVALID_TX Error = 14
	// ERROR_INTRINSIC_INVALID_TX indicates the transaction is failing at the intrinsic checks
	Error_ERROR_INTRINSIC_INVALID_TX Error = 15
)

var Error_name = map[int32]string{
	0:  "ERROR_UNSPECIFIED",
	1:  "ERROR_NO_ERROR",
	2:  "ERROR_OUT_OF_GAS",
	3:  "ERROR_STACK_OVERFLOW",
	4:  "ERROR_STACK_UNDERFLOW",
	5:  "ERROR_NOT_ENOUGH_FUNDS",
	6:  "ERROR_INSUFFICIENT_BALANCE",
	7:  "ERROR_CODE_NOT_FOUND",
	8:  "ERROR_MAX_CODE_SIZE_EXCEEDED",
	9:  "ERROR_CONTRACT_ADDRESS_COLLISION",
	10: "ERROR_DEPTH",
	11: "ERROR_EXECUTION_REVERTED",
	12: "ERROR_CODE_STORE_OUT_OF_GAS",
	13: "ERROR_OUT_OF_COUNTERS",
	14: "ERROR_INVALID_TX",
	15: "ERROR_INTRINSIC_INVALID_TX",
}

var Error_value = map[string]int32{
	"ERROR_UNSPECIFIED":                0,
	"ERROR_NO_ERROR":                   1,
	"ERROR_OUT_OF_GAS":                 2,
	"ERROR_STACK_OVERFLOW":             3,
	"ERROR_STACK_UNDERFLOW":            4,
	"ERROR_NOT_ENOUGH_FUNDS":           5,
	"ERROR_INSUFFICIENT_BALANCE":       6,
	"ERROR_CODE_NOT_FOUND":             7,
	"ERROR_MAX_CODE_SIZE_EXCEEDED":     8,
	"ERROR_CONTRACT_ADDRESS_COLLISION": 9,
	"ERROR_DEPTH":                      10,
	"ERROR_EXECUTION_REVERTED":         11,
	"ERROR_CODE_STORE_OUT_OF_GAS":      12,
	"ERROR_OUT_OF_COUNTERS":            13,
	"ERROR_INVALID_TX":                 14,
	"ERROR_INTRINSIC_INVALID_TX":       15,
}

func (x Error) String() string {
	return proto.EnumName(Error_name, int32(x))
}

func (Error) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{0}
}

type ProcessBatchRequest struct {
	BatchNum    uint64 `protobuf:"varint,1,opt,name=batch_num,json=batchNum,proto3" json:"batch_num,omitempty"`
	Coinbase    string `protobuf:"bytes,2,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	BatchL2Data []byte `protobuf:"bytes,3,opt,name=batch_l2_data,json=batchL2Data,proto3" json:"batch_l2_data,omitempty"`
	// from is used for unsigned transactions with sender
	From                         string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	OldStateRoot                 []byte `protobuf:"bytes,5,opt,name=old_state_root,json=oldStateRoot,proto3" json:"old_state_root,omitempty"`
	GlobalExitRoot               []byte `protobuf:"bytes,6,opt,name=global_exit_root,json=globalExitRoot,proto3" json:"global_exit_root,omitempty"`
	OldLocalExitRoot             []byte `protobuf:"bytes,7,opt,name=old_local_exit_root,json=oldLocalExitRoot,proto3" json:"old_local_exit_root,omitempty"`
	EthTimestamp                 uint64 `protobuf:"varint,8,opt,name=eth_timestamp,json=ethTimestamp,proto3" json:"eth_timestamp,omitempty"`
	UpdateMerkleTree             uint32 `protobuf:"varint,9,opt,name=update_merkle_tree,json=updateMerkleTree,proto3" json:"update_merkle_tree,omitempty"`
	TxHashToGenerateExecuteTrace []byte `protobuf:"bytes,10,opt,name=tx_hash_to_generate_execute_trace,json=txHashToGenerateExecuteTrace,proto3" json:"tx_hash_to_generate_execute_trace,omitempty"`
	TxHashToGenerateCallTrace    []byte `protobuf:"bytes,11,opt,name=tx_hash_to_generate_call_trace,json=txHashToGenerateCallTrace,proto3" json:"tx_hash_to_generate_call_trace,omitempty"`
	// For testing purposes only
	Db                   map[string]string `protobuf:"bytes,12,rep,name=db,proto3" json:"db,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ContractsBytecode    map[string]string `protobuf:"bytes,13,rep,name=contracts_bytecode,json=contractsBytecode,proto3" json:"contracts_bytecode,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ProcessBatchRequest) Reset()         { *m = ProcessBatchRequest{} }
func (m *ProcessBatchRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessBatchRequest) ProtoMessage()    {}
func (*ProcessBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{0}
}

func (m *ProcessBatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessBatchRequest.Unmarshal(m, b)
}
func (m *ProcessBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessBatchRequest.Marshal(b, m, deterministic)
}
func (m *ProcessBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessBatchRequest.Merge(m, src)
}
func (m *ProcessBatchRequest) XXX_Size() int {
	return xxx_messageInfo_ProcessBatchRequest.Size(m)
}
func (m *ProcessBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessBatchRequest proto.InternalMessageInfo

func (m *ProcessBatchRequest) GetBatchNum() uint64 {
	if m != nil {
		return m.BatchNum
	}
	return 0
}

func (m *ProcessBatchRequest) GetCoinbase() string {
	if m != nil {
		return m.Coinbase
	}
	return ""
}

func (m *ProcessBatchRequest) GetBatchL2Data() []byte {
	if m != nil {
		return m.BatchL2Data
	}
	return nil
}

func (m *ProcessBatchRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ProcessBatchRequest) GetOldStateRoot() []byte {
	if m != nil {
		return m.OldStateRoot
	}
	return nil
}

func (m *ProcessBatchRequest) GetGlobalExitRoot() []byte {
	if m != nil {
		return m.GlobalExitRoot
	}
	return nil
}

func (m *ProcessBatchRequest) GetOldLocalExitRoot() []byte {
	if m != nil {
		return m.OldLocalExitRoot
	}
	return nil
}

func (m *ProcessBatchRequest) GetEthTimestamp() uint64 {
	if m != nil {
		return m.EthTimestamp
	}
	return 0
}

func (m *ProcessBatchRequest) GetUpdateMerkleTree() uint32 {
	if m != nil {
		return m.UpdateMerkleTree
	}
	return 0
}

func (m *ProcessBatchRequest) GetTxHashToGenerateExecuteTrace() []byte {
	if m != nil {
		return m.TxHashToGenerateExecuteTrace
	}
	return nil
}

func (m *ProcessBatchRequest) GetTxHashToGenerateCallTrace() []byte {
	if m != nil {
		return m.TxHashToGenerateCallTrace
	}
	return nil
}

func (m *ProcessBatchRequest) GetDb() map[string]string {
	if m != nil {
		return m.Db
	}
	return nil
}

func (m *ProcessBatchRequest) GetContractsBytecode() map[string]string {
	if m != nil {
		return m.ContractsBytecode
	}
	return nil
}

type ProcessBatchResponse struct {
	CumulativeGasUsed    uint64                        `protobuf:"varint,1,opt,name=cumulative_gas_used,json=cumulativeGasUsed,proto3" json:"cumulative_gas_used,omitempty"`
	Responses            []*ProcessTransactionResponse `protobuf:"bytes,2,rep,name=responses,proto3" json:"responses,omitempty"`
	NewStateRoot         []byte                        `protobuf:"bytes,3,opt,name=new_state_root,json=newStateRoot,proto3" json:"new_state_root,omitempty"`
	NewLocalExitRoot     []byte                        `protobuf:"bytes,4,opt,name=new_local_exit_root,json=newLocalExitRoot,proto3" json:"new_local_exit_root,omitempty"`
	CntKeccakHashes      uint32                        `protobuf:"varint,5,opt,name=cnt_keccak_hashes,json=cntKeccakHashes,proto3" json:"cnt_keccak_hashes,omitempty"`
	CntPoseidonHashes    uint32                        `protobuf:"varint,6,opt,name=cnt_poseidon_hashes,json=cntPoseidonHashes,proto3" json:"cnt_poseidon_hashes,omitempty"`
	CntPoseidonPaddings  uint32                        `protobuf:"varint,7,opt,name=cnt_poseidon_paddings,json=cntPoseidonPaddings,proto3" json:"cnt_poseidon_paddings,omitempty"`
	CntMemAligns         uint32                        `protobuf:"varint,8,opt,name=cnt_mem_aligns,json=cntMemAligns,proto3" json:"cnt_mem_aligns,omitempty"`
	CntArithmetics       uint32                        `protobuf:"varint,9,opt,name=cnt_arithmetics,json=cntArithmetics,proto3" json:"cnt_arithmetics,omitempty"`
	CntBinaries          uint32                        `protobuf:"varint,10,opt,name=cnt_binaries,json=cntBinaries,proto3" json:"cnt_binaries,omitempty"`
	CntSteps             uint32                        `protobuf:"varint,11,opt,name=cnt_steps,json=cntSteps,proto3" json:"cnt_steps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ProcessBatchResponse) Reset()         { *m = ProcessBatchResponse{} }
func (m *ProcessBatchResponse) String() string { return proto.CompactTextString(m) }
func (*ProcessBatchResponse) ProtoMessage()    {}
func (*ProcessBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{1}
}

func (m *ProcessBatchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessBatchResponse.Unmarshal(m, b)
}
func (m *ProcessBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessBatchResponse.Marshal(b, m, deterministic)
}
func (m *ProcessBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessBatchResponse.Merge(m, src)
}
func (m *ProcessBatchResponse) XXX_Size() int {
	return xxx_messageInfo_ProcessBatchResponse.Size(m)
}
func (m *ProcessBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessBatchResponse proto.InternalMessageInfo

func (m *ProcessBatchResponse) GetCumulativeGasUsed() uint64 {
	if m != nil {
		return m.CumulativeGasUsed
	}
	return 0
}

func (m *ProcessBatchResponse) GetResponses() []*ProcessTransactionResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

func (m *ProcessBatchResponse) GetNewStateRoot() []byte {
	if m != nil {
		return m.NewStateRoot
	}
	return nil
}

func (m *ProcessBatchResponse) GetNewLocalExitRoot() []byte {
	if m != nil {
		return m.NewLocalExitRoot
	}
	return nil
}

func (m *ProcessBatchResponse) GetCntKeccakHashes() uint32 {
	if m != nil {
		return m.CntKeccakHashes
	}
	return 0
}

func (m *ProcessBatchResponse) GetCntPoseidonHashes() uint32 {
	if m != nil {
		return m.CntPoseidonHashes
	}
	return 0
}

func (m *ProcessBatchResponse) GetCntPoseidonPaddings() uint32 {
	if m != nil {
		return m.CntPoseidonPaddings
	}
	return 0
}

func (m *ProcessBatchResponse) GetCntMemAligns() uint32 {
	if m != nil {
		return m.CntMemAligns
	}
	return 0
}

func (m *ProcessBatchResponse) GetCntArithmetics() uint32 {
	if m != nil {
		return m.CntArithmetics
	}
	return 0
}

func (m *ProcessBatchResponse) GetCntBinaries() uint32 {
	if m != nil {
		return m.CntBinaries
	}
	return 0
}

func (m *ProcessBatchResponse) GetCntSteps() uint32 {
	if m != nil {
		return m.CntSteps
	}
	return 0
}

type CallTrace struct {
	Context              *TransactionContext `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Steps                []*TransactionStep  `protobuf:"bytes,2,rep,name=steps,proto3" json:"steps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CallTrace) Reset()         { *m = CallTrace{} }
func (m *CallTrace) String() string { return proto.CompactTextString(m) }
func (*CallTrace) ProtoMessage()    {}
func (*CallTrace) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{2}
}

func (m *CallTrace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CallTrace.Unmarshal(m, b)
}
func (m *CallTrace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CallTrace.Marshal(b, m, deterministic)
}
func (m *CallTrace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallTrace.Merge(m, src)
}
func (m *CallTrace) XXX_Size() int {
	return xxx_messageInfo_CallTrace.Size(m)
}
func (m *CallTrace) XXX_DiscardUnknown() {
	xxx_messageInfo_CallTrace.DiscardUnknown(m)
}

var xxx_messageInfo_CallTrace proto.InternalMessageInfo

func (m *CallTrace) GetContext() *TransactionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *CallTrace) GetSteps() []*TransactionStep {
	if m != nil {
		return m.Steps
	}
	return nil
}

type TransactionContext struct {
	// CALL or CREATE
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Sender of the transaction
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// Target of the transaction
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// Input data of the transaction
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// Gas of the transaction
	Gas uint64 `protobuf:"varint,5,opt,name=gas,proto3" json:"gas,omitempty"`
	// Value of the transaction
	Value uint64 `protobuf:"varint,6,opt,name=value,proto3" json:"value,omitempty"`
	// Hash of the batch in which the transaction was included
	Batch []byte `protobuf:"bytes,7,opt,name=batch,proto3" json:"batch,omitempty"`
	// Returned data from the runtime (function result or data supplied with revert opcode)
	Output []byte `protobuf:"bytes,8,opt,name=output,proto3" json:"output,omitempty"`
	// Total gas used as result of execution
	GasUsed uint64 `protobuf:"varint,9,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	// Gas Price
	GasPrice uint64 `protobuf:"varint,10,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// Execution Time
	ExecutionTime uint32 `protobuf:"varint,11,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	// Starting state root
	OldStateRoot         []byte   `protobuf:"bytes,12,opt,name=old_state_root,json=oldStateRoot,proto3" json:"old_state_root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionContext) Reset()         { *m = TransactionContext{} }
func (m *TransactionContext) String() string { return proto.CompactTextString(m) }
func (*TransactionContext) ProtoMessage()    {}
func (*TransactionContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{3}
}

func (m *TransactionContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionContext.Unmarshal(m, b)
}
func (m *TransactionContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionContext.Marshal(b, m, deterministic)
}
func (m *TransactionContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionContext.Merge(m, src)
}
func (m *TransactionContext) XXX_Size() int {
	return xxx_messageInfo_TransactionContext.Size(m)
}
func (m *TransactionContext) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionContext.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionContext proto.InternalMessageInfo

func (m *TransactionContext) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TransactionContext) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *TransactionContext) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TransactionContext) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TransactionContext) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

func (m *TransactionContext) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TransactionContext) GetBatch() []byte {
	if m != nil {
		return m.Batch
	}
	return nil
}

func (m *TransactionContext) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *TransactionContext) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *TransactionContext) GetGasPrice() uint64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *TransactionContext) GetExecutionTime() uint32 {
	if m != nil {
		return m.ExecutionTime
	}
	return 0
}

func (m *TransactionContext) GetOldStateRoot() []byte {
	if m != nil {
		return m.OldStateRoot
	}
	return nil
}

type TransactionStep struct {
	StateRoot []byte `protobuf:"bytes,1,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	// Call depth
	Depth uint32 `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`
	// Program counter
	Pc uint64 `protobuf:"varint,3,opt,name=pc,proto3" json:"pc,omitempty"`
	// Remaining gas
	Gas uint64 `protobuf:"varint,4,opt,name=gas,proto3" json:"gas,omitempty"`
	// Gas cost of the operation
	GasCost uint64 `protobuf:"varint,5,opt,name=gas_cost,json=gasCost,proto3" json:"gas_cost,omitempty"`
	// Gas refunded during the operation
	GasRefund uint64 `protobuf:"varint,6,opt,name=gas_refund,json=gasRefund,proto3" json:"gas_refund,omitempty"`
	// Opcode
	Op uint32 `protobuf:"varint,7,opt,name=op,proto3" json:"op,omitempty"`
	// Content of the stack
	Stack []string `protobuf:"bytes,8,rep,name=stack,proto3" json:"stack,omitempty"`
	// Content of the memory
	Memory []byte `protobuf:"bytes,9,opt,name=memory,proto3" json:"memory,omitempty"`
	// Return Data
	ReturnData []byte `protobuf:"bytes,10,opt,name=return_data,json=returnData,proto3" json:"return_data,omitempty"`
	// Contract information
	Contract *Contract `protobuf:"bytes,11,opt,name=contract,proto3" json:"contract,omitempty"`
	// Error
	Error                Error    `protobuf:"varint,12,opt,name=error,proto3,enum=executor.v1.Error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionStep) Reset()         { *m = TransactionStep{} }
func (m *TransactionStep) String() string { return proto.CompactTextString(m) }
func (*TransactionStep) ProtoMessage()    {}
func (*TransactionStep) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{4}
}

func (m *TransactionStep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionStep.Unmarshal(m, b)
}
func (m *TransactionStep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionStep.Marshal(b, m, deterministic)
}
func (m *TransactionStep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionStep.Merge(m, src)
}
func (m *TransactionStep) XXX_Size() int {
	return xxx_messageInfo_TransactionStep.Size(m)
}
func (m *TransactionStep) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionStep.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionStep proto.InternalMessageInfo

func (m *TransactionStep) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *TransactionStep) GetDepth() uint32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *TransactionStep) GetPc() uint64 {
	if m != nil {
		return m.Pc
	}
	return 0
}

func (m *TransactionStep) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

func (m *TransactionStep) GetGasCost() uint64 {
	if m != nil {
		return m.GasCost
	}
	return 0
}

func (m *TransactionStep) GetGasRefund() uint64 {
	if m != nil {
		return m.GasRefund
	}
	return 0
}

func (m *TransactionStep) GetOp() uint32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *TransactionStep) GetStack() []string {
	if m != nil {
		return m.Stack
	}
	return nil
}

func (m *TransactionStep) GetMemory() []byte {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *TransactionStep) GetReturnData() []byte {
	if m != nil {
		return m.ReturnData
	}
	return nil
}

func (m *TransactionStep) GetContract() *Contract {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *TransactionStep) GetError() Error {
	if m != nil {
		return m.Error
	}
	return Error_ERROR_UNSPECIFIED
}

type Contract struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Caller               string   `protobuf:"bytes,2,opt,name=caller,proto3" json:"caller,omitempty"`
	Value                uint64   `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Data                 []byte   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Gas                  uint64   `protobuf:"varint,5,opt,name=gas,proto3" json:"gas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Contract) Reset()         { *m = Contract{} }
func (m *Contract) String() string { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()    {}
func (*Contract) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{5}
}

func (m *Contract) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Contract.Unmarshal(m, b)
}
func (m *Contract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Contract.Marshal(b, m, deterministic)
}
func (m *Contract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contract.Merge(m, src)
}
func (m *Contract) XXX_Size() int {
	return xxx_messageInfo_Contract.Size(m)
}
func (m *Contract) XXX_DiscardUnknown() {
	xxx_messageInfo_Contract.DiscardUnknown(m)
}

var xxx_messageInfo_Contract proto.InternalMessageInfo

func (m *Contract) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Contract) GetCaller() string {
	if m != nil {
		return m.Caller
	}
	return ""
}

func (m *Contract) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Contract) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Contract) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

type ProcessTransactionResponse struct {
	// Hash of the transaction
	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// RLP encoded transaction
	// [nonce, gasPrice, gasLimit, to, value, data, v, r, s]
	RlpTx []byte `protobuf:"bytes,2,opt,name=rlp_tx,json=rlpTx,proto3" json:"rlp_tx,omitempty"`
	// Type indicates legacy transaction
	// It will be always 0 (legacy) in the executor
	Type uint32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	// Returned data from the runtime (function result or data supplied with revert opcode)
	ReturnValue []byte `protobuf:"bytes,4,opt,name=return_value,json=returnValue,proto3" json:"return_value,omitempty"`
	// Total gas left as result of execution
	GasLeft uint64 `protobuf:"varint,5,opt,name=gas_left,json=gasLeft,proto3" json:"gas_left,omitempty"`
	// Total gas used as result of execution or gas estimation
	GasUsed uint64 `protobuf:"varint,6,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	// Total gas refunded as result of execution
	GasRefunded uint64 `protobuf:"varint,7,opt,name=gas_refunded,json=gasRefunded,proto3" json:"gas_refunded,omitempty"`
	// Any error encountered during the execution
	Error Error `protobuf:"varint,8,opt,name=error,proto3,enum=executor.v1.Error" json:"error,omitempty"`
	// New SC Address in case of SC creation
	CreateAddress string `protobuf:"bytes,9,opt,name=create_address,json=createAddress,proto3" json:"create_address,omitempty"`
	// State Root
	StateRoot []byte `protobuf:"bytes,10,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	// Logs emited by LOG opcode
	Logs []*Log `protobuf:"bytes,11,rep,name=logs,proto3" json:"logs,omitempty"`
	// Trace
	ExecutionTrace       []*ExecutionTraceStep `protobuf:"bytes,13,rep,name=execution_trace,json=executionTrace,proto3" json:"execution_trace,omitempty"`
	CallTrace            *CallTrace            `protobuf:"bytes,14,opt,name=call_trace,json=callTrace,proto3" json:"call_trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ProcessTransactionResponse) Reset()         { *m = ProcessTransactionResponse{} }
func (m *ProcessTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*ProcessTransactionResponse) ProtoMessage()    {}
func (*ProcessTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{6}
}

func (m *ProcessTransactionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessTransactionResponse.Unmarshal(m, b)
}
func (m *ProcessTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessTransactionResponse.Marshal(b, m, deterministic)
}
func (m *ProcessTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessTransactionResponse.Merge(m, src)
}
func (m *ProcessTransactionResponse) XXX_Size() int {
	return xxx_messageInfo_ProcessTransactionResponse.Size(m)
}
func (m *ProcessTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessTransactionResponse proto.InternalMessageInfo

func (m *ProcessTransactionResponse) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *ProcessTransactionResponse) GetRlpTx() []byte {
	if m != nil {
		return m.RlpTx
	}
	return nil
}

func (m *ProcessTransactionResponse) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ProcessTransactionResponse) GetReturnValue() []byte {
	if m != nil {
		return m.ReturnValue
	}
	return nil
}

func (m *ProcessTransactionResponse) GetGasLeft() uint64 {
	if m != nil {
		return m.GasLeft
	}
	return 0
}

func (m *ProcessTransactionResponse) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *ProcessTransactionResponse) GetGasRefunded() uint64 {
	if m != nil {
		return m.GasRefunded
	}
	return 0
}

func (m *ProcessTransactionResponse) GetError() Error {
	if m != nil {
		return m.Error
	}
	return Error_ERROR_UNSPECIFIED
}

func (m *ProcessTransactionResponse) GetCreateAddress() string {
	if m != nil {
		return m.CreateAddress
	}
	return ""
}

func (m *ProcessTransactionResponse) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *ProcessTransactionResponse) GetLogs() []*Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *ProcessTransactionResponse) GetExecutionTrace() []*ExecutionTraceStep {
	if m != nil {
		return m.ExecutionTrace
	}
	return nil
}

func (m *ProcessTransactionResponse) GetCallTrace() *CallTrace {
	if m != nil {
		return m.CallTrace
	}
	return nil
}

type Log struct {
	// Address of the contract that generated the event
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// List of topics provided by the contract
	Topics [][]byte `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	// Supplied by the contract, usually ABI-encoded
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Batch in which the transaction was included
	BatchNumber uint64 `protobuf:"varint,4,opt,name=batch_number,json=batchNumber,proto3" json:"batch_number,omitempty"`
	// Hash of the transaction
	TxHash []byte `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Index of the transaction in the block
	TxIndex uint32 `protobuf:"varint,6,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	// Hash of the batch in which the transaction was included
	BatchHash []byte `protobuf:"bytes,7,opt,name=batch_hash,json=batchHash,proto3" json:"batch_hash,omitempty"`
	// Index of the log in the block
	Index                uint32   `protobuf:"varint,8,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{7}
}

func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Log) GetTopics() [][]byte {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *Log) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Log) GetBatchNumber() uint64 {
	if m != nil {
		return m.BatchNumber
	}
	return 0
}

func (m *Log) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *Log) GetTxIndex() uint32 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}

func (m *Log) GetBatchHash() []byte {
	if m != nil {
		return m.BatchHash
	}
	return nil
}

func (m *Log) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type ExecutionTraceStep struct {
	// Program Counter
	Pc uint64 `protobuf:"varint,1,opt,name=pc,proto3" json:"pc,omitempty"`
	// OpCode
	Op string `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`
	// Remaining gas
	RemainingGas uint64 `protobuf:"varint,3,opt,name=remaining_gas,json=remainingGas,proto3" json:"remaining_gas,omitempty"`
	// Gas cost of the operation
	GasCost uint64 `protobuf:"varint,4,opt,name=gas_cost,json=gasCost,proto3" json:"gas_cost,omitempty"`
	// Content of memory
	Memory []byte `protobuf:"bytes,5,opt,name=memory,proto3" json:"memory,omitempty"`
	// Size of memory
	MemorySize uint32 `protobuf:"varint,6,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	// Content of the stack
	Stack []string `protobuf:"bytes,7,rep,name=stack,proto3" json:"stack,omitempty"`
	// Returned data
	ReturnData []byte `protobuf:"bytes,8,opt,name=return_data,json=returnData,proto3" json:"return_data,omitempty"`
	// Content of the storage
	Storage map[string]string `protobuf:"bytes,9,rep,name=storage,proto3" json:"storage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Call depth
	Depth uint32 `protobuf:"varint,10,opt,name=depth,proto3" json:"depth,omitempty"`
	// Gas refund
	GasRefund uint64 `protobuf:"varint,11,opt,name=gas_refund,json=gasRefund,proto3" json:"gas_refund,omitempty"`
	// Error
	Error                Error    `protobuf:"varint,12,opt,name=error,proto3,enum=executor.v1.Error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecutionTraceStep) Reset()         { *m = ExecutionTraceStep{} }
func (m *ExecutionTraceStep) String() string { return proto.CompactTextString(m) }
func (*ExecutionTraceStep) ProtoMessage()    {}
func (*ExecutionTraceStep) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{8}
}

func (m *ExecutionTraceStep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecutionTraceStep.Unmarshal(m, b)
}
func (m *ExecutionTraceStep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecutionTraceStep.Marshal(b, m, deterministic)
}
func (m *ExecutionTraceStep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionTraceStep.Merge(m, src)
}
func (m *ExecutionTraceStep) XXX_Size() int {
	return xxx_messageInfo_ExecutionTraceStep.Size(m)
}
func (m *ExecutionTraceStep) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionTraceStep.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionTraceStep proto.InternalMessageInfo

func (m *ExecutionTraceStep) GetPc() uint64 {
	if m != nil {
		return m.Pc
	}
	return 0
}

func (m *ExecutionTraceStep) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *ExecutionTraceStep) GetRemainingGas() uint64 {
	if m != nil {
		return m.RemainingGas
	}
	return 0
}

func (m *ExecutionTraceStep) GetGasCost() uint64 {
	if m != nil {
		return m.GasCost
	}
	return 0
}

func (m *ExecutionTraceStep) GetMemory() []byte {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *ExecutionTraceStep) GetMemorySize() uint32 {
	if m != nil {
		return m.MemorySize
	}
	return 0
}

func (m *ExecutionTraceStep) GetStack() []string {
	if m != nil {
		return m.Stack
	}
	return nil
}

func (m *ExecutionTraceStep) GetReturnData() []byte {
	if m != nil {
		return m.ReturnData
	}
	return nil
}

func (m *ExecutionTraceStep) GetStorage() map[string]string {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *ExecutionTraceStep) GetDepth() uint32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *ExecutionTraceStep) GetGasRefund() uint64 {
	if m != nil {
		return m.GasRefund
	}
	return 0
}

func (m *ExecutionTraceStep) GetError() Error {
	if m != nil {
		return m.Error
	}
	return Error_ERROR_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("executor.v1.Error", Error_name, Error_value)
	proto.RegisterType((*ProcessBatchRequest)(nil), "executor.v1.ProcessBatchRequest")
	proto.RegisterMapType((map[string]string)(nil), "executor.v1.ProcessBatchRequest.ContractsBytecodeEntry")
	proto.RegisterMapType((map[string]string)(nil), "executor.v1.ProcessBatchRequest.DbEntry")
	proto.RegisterType((*ProcessBatchResponse)(nil), "executor.v1.ProcessBatchResponse")
	proto.RegisterType((*CallTrace)(nil), "executor.v1.CallTrace")
	proto.RegisterType((*TransactionContext)(nil), "executor.v1.TransactionContext")
	proto.RegisterType((*TransactionStep)(nil), "executor.v1.TransactionStep")
	proto.RegisterType((*Contract)(nil), "executor.v1.Contract")
	proto.RegisterType((*ProcessTransactionResponse)(nil), "executor.v1.ProcessTransactionResponse")
	proto.RegisterType((*Log)(nil), "executor.v1.Log")
	proto.RegisterType((*ExecutionTraceStep)(nil), "executor.v1.ExecutionTraceStep")
	proto.RegisterMapType((map[string]string)(nil), "executor.v1.ExecutionTraceStep.StorageEntry")
}

func init() { proto.RegisterFile("executor.proto", fileDescriptor_12d1cdcda51e000f) }

var fileDescriptor_12d1cdcda51e000f = []byte{
	// 1793 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xdd, 0x72, 0xdb, 0xc6,
	0x15, 0x0e, 0xff, 0xc9, 0x43, 0x52, 0x82, 0xd7, 0x92, 0x4b, 0xcb, 0x6e, 0x4c, 0x31, 0xee, 0x44,
	0x93, 0x89, 0xa5, 0x86, 0x9d, 0x4c, 0xd3, 0xdc, 0x74, 0x28, 0x12, 0x92, 0x38, 0xa1, 0x49, 0xcd,
	0x12, 0x74, 0x3d, 0xb9, 0xc1, 0x80, 0xc0, 0x8a, 0xc4, 0x08, 0xc4, 0xa2, 0x8b, 0xa5, 0x4c, 0xe9,
	0xae, 0xd3, 0xc7, 0x6a, 0xef, 0xfb, 0x08, 0xbd, 0xeb, 0x4b, 0xf4, 0x05, 0x32, 0xfb, 0x03, 0x12,
	0xa4, 0x95, 0x38, 0xb9, 0xdb, 0xf3, 0xbb, 0x8b, 0x73, 0xbe, 0xf3, 0xed, 0x02, 0xf6, 0xc8, 0x8a,
	0xb8, 0x4b, 0x4e, 0xd9, 0x69, 0xc4, 0x28, 0xa7, 0xa8, 0xba, 0x96, 0xef, 0xbe, 0x69, 0xfd, 0xb3,
	0x08, 0x4f, 0xaf, 0x19, 0x75, 0x49, 0x1c, 0x9f, 0x3b, 0xdc, 0x9d, 0x63, 0xf2, 0xf7, 0x25, 0x89,
	0x39, 0x7a, 0x01, 0x95, 0xa9, 0x90, 0xed, 0x70, 0xb9, 0x68, 0x64, 0x9a, 0x99, 0x93, 0x3c, 0x2e,
	0x4b, 0xc5, 0x70, 0xb9, 0x40, 0x47, 0x50, 0x76, 0xa9, 0x1f, 0x4e, 0x9d, 0x98, 0x34, 0xb2, 0xcd,
	0xcc, 0x49, 0x05, 0xaf, 0x65, 0xd4, 0x82, 0xba, 0x0a, 0x0c, 0xda, 0xb6, 0xe7, 0x70, 0xa7, 0x91,
	0x6b, 0x66, 0x4e, 0x6a, 0xb8, 0x2a, 0x95, 0x83, 0x76, 0xcf, 0xe1, 0x0e, 0x42, 0x90, 0xbf, 0x61,
	0x74, 0xd1, 0xc8, 0xcb, 0x58, 0xb9, 0x46, 0xaf, 0x61, 0x8f, 0x06, 0x9e, 0x1d, 0x73, 0x87, 0x13,
	0x9b, 0x51, 0xca, 0x1b, 0x05, 0x19, 0x58, 0xa3, 0x81, 0x37, 0x16, 0x4a, 0x4c, 0x29, 0x47, 0x27,
	0x60, 0xcc, 0x02, 0x3a, 0x75, 0x02, 0x9b, 0xac, 0x7c, 0xae, 0xfc, 0x8a, 0xd2, 0x6f, 0x4f, 0xe9,
	0xcd, 0x95, 0xcf, 0xa5, 0xe7, 0x1b, 0x78, 0x2a, 0xf2, 0x05, 0xd4, 0xdd, 0x72, 0x2e, 0x49, 0x67,
	0x83, 0x06, 0xde, 0x40, 0x58, 0xd6, 0xee, 0x5f, 0x40, 0x9d, 0xf0, 0xb9, 0xcd, 0xfd, 0x05, 0x89,
	0xb9, 0xb3, 0x88, 0x1a, 0x65, 0xf9, 0xcd, 0x35, 0xc2, 0xe7, 0x56, 0xa2, 0x43, 0x5f, 0x03, 0x5a,
	0x46, 0x9e, 0x38, 0xe0, 0x82, 0xb0, 0xdb, 0x80, 0xd8, 0x9c, 0x11, 0xd2, 0xa8, 0x34, 0x33, 0x27,
	0x75, 0x6c, 0x28, 0xcb, 0x5b, 0x69, 0xb0, 0x18, 0x21, 0xe8, 0x12, 0x8e, 0xf9, 0xca, 0x9e, 0x3b,
	0xf1, 0xdc, 0xe6, 0xd4, 0x9e, 0x91, 0x90, 0x30, 0x11, 0xaa, 0xaa, 0x2f, 0x62, 0x1d, 0x97, 0x34,
	0x40, 0x9e, 0xe7, 0x25, 0x5f, 0x5d, 0x39, 0xf1, 0xdc, 0xa2, 0x97, 0xda, 0xcb, 0x54, 0x4e, 0x96,
	0xf0, 0x41, 0x1d, 0xf8, 0xfc, 0xb1, 0x44, 0xae, 0x13, 0x04, 0x3a, 0x4b, 0x55, 0x66, 0x79, 0xbe,
	0x9b, 0xa5, 0xeb, 0x04, 0x81, 0x4a, 0xf1, 0x1d, 0x64, 0xbd, 0x69, 0xa3, 0xd6, 0xcc, 0x9d, 0x54,
	0xdb, 0x27, 0xa7, 0x29, 0x00, 0x9c, 0x3e, 0xd2, 0xfc, 0xd3, 0xde, 0xd4, 0x0c, 0x39, 0xbb, 0xc7,
	0x59, 0x6f, 0x8a, 0x6e, 0x00, 0xb9, 0x34, 0x14, 0xdb, 0xf0, 0xd8, 0x9e, 0xde, 0x73, 0xe2, 0x52,
	0x8f, 0x34, 0xea, 0x32, 0xd3, 0x9f, 0x3f, 0x99, 0xa9, 0x9b, 0x84, 0x9e, 0xeb, 0x48, 0x95, 0xf8,
	0x89, 0xbb, 0xab, 0x3f, 0xfa, 0x16, 0x4a, 0x7a, 0x5b, 0x64, 0x40, 0xee, 0x96, 0xdc, 0x4b, 0xd4,
	0x55, 0xb0, 0x58, 0xa2, 0x03, 0x28, 0xdc, 0x39, 0xc1, 0x32, 0x41, 0x9b, 0x12, 0xbe, 0xcf, 0x7e,
	0x97, 0x39, 0xea, 0xc1, 0xb3, 0xc7, 0xf7, 0xf8, 0x2d, 0x59, 0x5a, 0xff, 0xc8, 0xc3, 0xc1, 0xf6,
	0xf1, 0xe3, 0x88, 0x86, 0x31, 0x41, 0xa7, 0xf0, 0xd4, 0x5d, 0x2e, 0x96, 0x81, 0xc3, 0xfd, 0x3b,
	0x62, 0xcf, 0x9c, 0xd8, 0x5e, 0xc6, 0xc4, 0xd3, 0x03, 0xf1, 0x64, 0x63, 0xba, 0x74, 0xe2, 0x49,
	0x4c, 0x3c, 0x64, 0x42, 0x85, 0xe9, 0xd8, 0xb8, 0x91, 0x95, 0x45, 0xfa, 0xf2, 0xb1, 0x22, 0x59,
	0xcc, 0x09, 0x63, 0xc7, 0xe5, 0x3e, 0x0d, 0x93, 0xbd, 0xf0, 0x26, 0x52, 0x0c, 0x43, 0x48, 0x3e,
	0xa4, 0x87, 0x41, 0x4d, 0x51, 0x2d, 0x24, 0x1f, 0x36, 0xc3, 0xf0, 0x06, 0x9e, 0x0a, 0xaf, 0x5d,
	0x88, 0xe7, 0x15, 0xc4, 0x43, 0xf2, 0x61, 0x1b, 0xe2, 0x5f, 0xc1, 0x13, 0x37, 0xe4, 0xf6, 0x2d,
	0x71, 0x5d, 0xe7, 0x56, 0xc2, 0x89, 0xc4, 0x72, 0xc8, 0xea, 0x78, 0xdf, 0x0d, 0xf9, 0x0f, 0x52,
	0x7f, 0x25, 0xd5, 0xf2, 0xbb, 0x43, 0x6e, 0x47, 0x34, 0x26, 0xbe, 0x47, 0xc3, 0xc4, 0xbb, 0x28,
	0xbd, 0x45, 0x9a, 0x6b, 0x6d, 0xd1, 0xfe, 0x6d, 0x38, 0xdc, 0xf2, 0x8f, 0x1c, 0xcf, 0xf3, 0xc3,
	0x59, 0x2c, 0xe7, 0xad, 0x8e, 0x9f, 0xa6, 0x22, 0xae, 0xb5, 0x49, 0x7c, 0xa4, 0x88, 0x59, 0x90,
	0x85, 0xed, 0x04, 0xfe, 0x2c, 0x8c, 0xe5, 0xcc, 0xd5, 0x71, 0xcd, 0x0d, 0xf9, 0x5b, 0xb2, 0xe8,
	0x48, 0x1d, 0xfa, 0x12, 0xc4, 0xe1, 0x6c, 0x87, 0xf9, 0x7c, 0xbe, 0x20, 0xdc, 0x77, 0x63, 0x3d,
	0x70, 0x22, 0xb8, 0xb3, 0xd1, 0xa2, 0x63, 0x10, 0x81, 0xf6, 0xd4, 0x0f, 0x1d, 0xe6, 0x93, 0x58,
	0x4e, 0x56, 0x1d, 0x57, 0xdd, 0x90, 0x9f, 0x6b, 0x95, 0x20, 0x35, 0xe1, 0x12, 0x73, 0x12, 0xc5,
	0x72, 0x66, 0xea, 0xb8, 0xec, 0x86, 0x7c, 0x2c, 0xe4, 0xd6, 0x03, 0x54, 0x36, 0xf3, 0xf2, 0x17,
	0x28, 0x09, 0x88, 0x92, 0x15, 0x97, 0xbd, 0xae, 0xb6, 0x5f, 0x6d, 0x75, 0x31, 0xd5, 0xbe, 0xae,
	0x72, 0xc3, 0x89, 0x3f, 0x6a, 0x43, 0x41, 0x6d, 0xa0, 0xda, 0xff, 0xf2, 0xe7, 0x02, 0xc5, 0xae,
	0x58, 0xb9, 0xb6, 0xfe, 0x95, 0x05, 0xf4, 0x71, 0x4e, 0xc1, 0x93, 0xfc, 0x3e, 0x22, 0x1a, 0xc3,
	0x72, 0xbd, 0xe6, 0xce, 0x6c, 0x8a, 0x3b, 0xf7, 0x20, 0xcb, 0xa9, 0x84, 0x48, 0x05, 0x67, 0x39,
	0x15, 0x3e, 0x92, 0x7a, 0x15, 0x12, 0xe4, 0x5a, 0x8c, 0xc3, 0xcc, 0x51, 0xfd, 0xce, 0x63, 0xb1,
	0xdc, 0x8c, 0x43, 0x51, 0xea, 0x94, 0x20, 0xb4, 0x92, 0xaa, 0x35, 0x53, 0x2a, 0x01, 0x3d, 0x83,
	0x22, 0x5d, 0xf2, 0x68, 0xc9, 0x65, 0x8f, 0x6a, 0x58, 0x4b, 0xe8, 0x39, 0x94, 0xd7, 0x43, 0x51,
	0x91, 0x69, 0x4a, 0x33, 0x3d, 0x0a, 0x2f, 0xa0, 0x22, 0x4c, 0x11, 0xf3, 0x35, 0xcd, 0xe5, 0xb1,
	0xf0, 0xbd, 0x16, 0x32, 0xfa, 0x43, 0x72, 0x2b, 0xf9, 0x34, 0x94, 0xa4, 0xab, 0xdb, 0x51, 0x5f,
	0x6b, 0x05, 0xeb, 0x3e, 0x72, 0x29, 0xd4, 0x3e, 0xbe, 0x14, 0x5a, 0xff, 0xcb, 0xc2, 0xfe, 0x4e,
	0x61, 0xd1, 0xef, 0x01, 0x52, 0x51, 0x19, 0x19, 0x55, 0x89, 0xd7, 0xa3, 0x73, 0x00, 0x05, 0x8f,
	0x44, 0x7c, 0x2e, 0xcb, 0x58, 0xc7, 0x4a, 0x10, 0x75, 0x8c, 0x5c, 0x59, 0xc7, 0x3c, 0xce, 0x46,
	0x6e, 0x52, 0xb3, 0xfc, 0xa6, 0x66, 0xfa, 0x7b, 0x5d, 0x1a, 0x73, 0x5d, 0x4a, 0xf1, 0xbd, 0x5d,
	0x1a, 0x73, 0xb1, 0xa3, 0x30, 0x31, 0x72, 0xb3, 0x0c, 0x3d, 0x5d, 0x53, 0x51, 0x01, 0x2c, 0x15,
	0x22, 0x37, 0x8d, 0xf4, 0x38, 0x64, 0x69, 0x24, 0x4e, 0x10, 0x73, 0xc7, 0xbd, 0x6d, 0x94, 0x9b,
	0x39, 0x41, 0x46, 0x52, 0x10, 0x75, 0x5e, 0x90, 0x05, 0x65, 0xf7, 0xb2, 0x9a, 0x35, 0xac, 0x25,
	0xf4, 0x0a, 0xaa, 0x8c, 0xf0, 0x25, 0x0b, 0xd5, 0x9d, 0xaa, 0x6e, 0x0d, 0x50, 0x2a, 0x79, 0xa5,
	0x7e, 0x23, 0xae, 0x64, 0xc5, 0x83, 0xb2, 0x94, 0xd5, 0xf6, 0xe1, 0x16, 0xf0, 0x12, 0x92, 0xc4,
	0x6b, 0x37, 0x74, 0x02, 0x05, 0xc2, 0x18, 0x65, 0xb2, 0xa6, 0x7b, 0x6d, 0xb4, 0xe5, 0x6f, 0x0a,
	0x0b, 0x56, 0x0e, 0xad, 0x15, 0x94, 0x93, 0x78, 0xd4, 0x80, 0x92, 0xe3, 0x79, 0x8c, 0xc4, 0xb1,
	0x86, 0x65, 0x22, 0x8a, 0xb3, 0x8b, 0x2b, 0x89, 0x30, 0x8d, 0x4d, 0x2d, 0x6d, 0x70, 0x96, 0x4b,
	0xe3, 0xec, 0x57, 0x61, 0xb4, 0xf5, 0xff, 0x1c, 0x1c, 0xfd, 0x3c, 0x65, 0xa2, 0xdf, 0x41, 0x49,
	0xdf, 0x8c, 0xba, 0xc5, 0x45, 0x75, 0x05, 0xa2, 0x43, 0x28, 0xb2, 0x20, 0xb2, 0xf9, 0x4a, 0x9e,
	0xa5, 0x86, 0x0b, 0x2c, 0x88, 0xac, 0xd5, 0x7a, 0xa0, 0x72, 0xb2, 0x0d, 0x6a, 0xa0, 0x8e, 0xa1,
	0xa6, 0x4b, 0xab, 0x4e, 0xa9, 0x0e, 0xa4, 0xcb, 0xfd, 0x4e, 0x9e, 0x55, 0x77, 0x3d, 0x20, 0x37,
	0xe9, 0xae, 0x0f, 0xc8, 0xcd, 0xf6, 0x00, 0x14, 0xb7, 0x07, 0xe0, 0x18, 0x6a, 0x1b, 0x40, 0x10,
	0x4f, 0xf6, 0x3e, 0x8f, 0xab, 0x6b, 0x48, 0x10, 0x6f, 0xd3, 0x82, 0xf2, 0x27, 0x5a, 0x20, 0x06,
	0xc6, 0x65, 0x44, 0x00, 0x3a, 0xa9, 0x7e, 0x45, 0x16, 0xb9, 0xae, 0xb4, 0x1d, 0xdd, 0x83, 0x6d,
	0xd8, 0xc3, 0x2e, 0xec, 0x5f, 0x43, 0x3e, 0xa0, 0x33, 0xc1, 0x7d, 0x82, 0x9a, 0x8c, 0xad, 0xed,
	0x06, 0x74, 0x86, 0xa5, 0x15, 0x5d, 0xc1, 0x7e, 0x6a, 0x38, 0xe5, 0x03, 0x43, 0xdd, 0xf7, 0xdb,
	0x24, 0x68, 0xae, 0x47, 0x55, 0xb8, 0x48, 0x3a, 0xdb, 0x0c, 0xb5, 0xa2, 0xd1, 0x6f, 0x01, 0x52,
	0xaf, 0x94, 0x3d, 0x89, 0xcb, 0x67, 0xdb, 0xb8, 0x4c, 0x28, 0x17, 0x57, 0xdc, 0x64, 0xd9, 0xfa,
	0x6f, 0x06, 0x72, 0x03, 0x3a, 0xfb, 0x65, 0xac, 0x71, 0x1a, 0x89, 0xcb, 0x40, 0xb0, 0xac, 0xe8,
	0xbb, 0x94, 0xd6, 0xa8, 0xca, 0xa5, 0x50, 0x75, 0x0c, 0xb5, 0xf5, 0x53, 0x76, 0x4a, 0x98, 0x1e,
	0xe7, 0x6a, 0xf2, 0x9a, 0x9d, 0x12, 0x96, 0xc6, 0x51, 0x61, 0x0b, 0x47, 0xcf, 0xa1, 0xcc, 0x57,
	0xb6, 0x1f, 0x7a, 0x64, 0xa5, 0x2f, 0xbf, 0x12, 0x5f, 0xf5, 0x85, 0x28, 0x4a, 0xad, 0xd2, 0xca,
	0x30, 0xc5, 0x96, 0xea, 0xcd, 0x2c, 0x23, 0x0f, 0xa0, 0xa0, 0xc2, 0xd4, 0xa5, 0xa6, 0x84, 0xd6,
	0x7f, 0x72, 0x80, 0x3e, 0xae, 0x9b, 0x26, 0x9e, 0xcc, 0x9a, 0x78, 0x14, 0x59, 0xa8, 0x31, 0x12,
	0x64, 0xf1, 0x05, 0xd4, 0x19, 0x59, 0x38, 0x7e, 0xe8, 0x87, 0x33, 0xf1, 0x0a, 0xd1, 0xa3, 0x54,
	0x5b, 0x2b, 0x2f, 0x77, 0xb8, 0x29, 0xbf, 0xcd, 0x4d, 0x1b, 0x5a, 0x29, 0xec, 0xd2, 0x8a, 0x5a,
	0xd9, 0xb1, 0xff, 0x40, 0xf4, 0x17, 0x82, 0x52, 0x8d, 0xfd, 0x07, 0xb2, 0x61, 0xa9, 0x52, 0x9a,
	0xa5, 0x76, 0xd8, 0xa8, 0xfc, 0x11, 0x1b, 0x5d, 0x40, 0x29, 0xe6, 0x94, 0x39, 0x33, 0xf1, 0x3a,
	0x16, 0xc8, 0xf9, 0xfa, 0x13, 0xc8, 0x39, 0x1d, 0x2b, 0x77, 0xf5, 0x3c, 0x4c, 0x82, 0x37, 0x34,
	0x0d, 0x69, 0x9a, 0xde, 0x66, 0xda, 0xea, 0x2e, 0xd3, 0xfe, 0x6a, 0x5e, 0x3b, 0xfa, 0x1e, 0x6a,
	0xe9, 0x7d, 0x7f, 0xcb, 0x93, 0xf1, 0xab, 0x7f, 0xe7, 0xa0, 0x20, 0x93, 0xa1, 0x43, 0x78, 0x62,
	0x62, 0x3c, 0xc2, 0xf6, 0x64, 0x38, 0xbe, 0x36, 0xbb, 0xfd, 0x8b, 0xbe, 0xd9, 0x33, 0x3e, 0x43,
	0x08, 0xf6, 0x94, 0x7a, 0x38, 0xb2, 0xe5, 0xc2, 0xc8, 0xa0, 0x03, 0x30, 0x94, 0x6e, 0x34, 0xb1,
	0xec, 0xd1, 0x85, 0x7d, 0xd9, 0x19, 0x1b, 0x59, 0xd4, 0x80, 0x03, 0xa5, 0x1d, 0x5b, 0x9d, 0xee,
	0x0f, 0xf6, 0xe8, 0x9d, 0x89, 0x2f, 0x06, 0xa3, 0xbf, 0x19, 0x39, 0xf4, 0x1c, 0x0e, 0xd3, 0x96,
	0xc9, 0xb0, 0xa7, 0x4d, 0x79, 0x74, 0x04, 0xcf, 0x92, 0xf4, 0x96, 0x6d, 0x0e, 0x47, 0x93, 0xcb,
	0x2b, 0xfb, 0x62, 0x32, 0xec, 0x8d, 0x8d, 0x02, 0xfa, 0x1c, 0x8e, 0x94, 0xad, 0x3f, 0x1c, 0x4f,
	0x2e, 0x2e, 0xfa, 0xdd, 0xbe, 0x39, 0xb4, 0xec, 0xf3, 0xce, 0xa0, 0x33, 0xec, 0x9a, 0x46, 0x71,
	0xb3, 0x61, 0x77, 0xd4, 0x33, 0x65, 0x82, 0x8b, 0xd1, 0x64, 0xd8, 0x33, 0x4a, 0xa8, 0x09, 0x2f,
	0x95, 0xe5, 0x6d, 0xe7, 0xbd, 0xb2, 0x8e, 0xfb, 0x3f, 0x9a, 0xb6, 0xf9, 0xbe, 0x6b, 0x9a, 0x3d,
	0xb3, 0x67, 0x94, 0xd1, 0x6b, 0x68, 0x26, 0xb1, 0x43, 0x0b, 0x77, 0xba, 0x96, 0xdd, 0xe9, 0xf5,
	0xb0, 0x39, 0x1e, 0xdb, 0xdd, 0xd1, 0x60, 0xd0, 0x1f, 0xf7, 0x47, 0x43, 0xa3, 0x82, 0xf6, 0xa1,
	0xaa, 0xbc, 0x7a, 0xe6, 0xb5, 0x75, 0x65, 0x00, 0x7a, 0x09, 0x0d, 0xa5, 0x30, 0xdf, 0x9b, 0xdd,
	0x89, 0xd5, 0x1f, 0x0d, 0x6d, 0x6c, 0xbe, 0x33, 0xb1, 0x65, 0xf6, 0x8c, 0x2a, 0x7a, 0x05, 0x2f,
	0x52, 0x07, 0x1a, 0x5b, 0x23, 0x6c, 0xa6, 0x4b, 0x54, 0xdb, 0x14, 0x42, 0x6b, 0xbb, 0xa3, 0xc9,
	0xd0, 0x32, 0xf1, 0xd8, 0xa8, 0x6f, 0x6a, 0xda, 0x1f, 0xbe, 0xeb, 0x0c, 0xfa, 0x3d, 0xdb, 0x7a,
	0x6f, 0xec, 0xa5, 0x4b, 0x60, 0xe1, 0xfe, 0x70, 0xdc, 0xef, 0xa6, 0xed, 0xfb, 0xed, 0x39, 0xec,
	0x9b, 0x1a, 0x16, 0x63, 0xc2, 0xee, 0xc4, 0x9b, 0x64, 0x02, 0xb5, 0xf4, 0x3f, 0x00, 0x6a, 0x7e,
	0xea, 0xef, 0xe6, 0xe8, 0xf8, 0x17, 0x3c, 0xd4, 0x0d, 0xd5, 0xfa, 0xec, 0xbc, 0xf3, 0xe3, 0x5f,
	0x67, 0x3e, 0x9f, 0x2f, 0xa7, 0xa7, 0x2e, 0x5d, 0x9c, 0xfd, 0x71, 0x75, 0x4d, 0x83, 0xfb, 0x19,
	0x0d, 0xaf, 0x08, 0x5b, 0x90, 0x87, 0xb3, 0x87, 0x5b, 0x72, 0xb7, 0x78, 0x13, 0x52, 0x8f, 0x9c,
	0x49, 0x9a, 0x3e, 0x63, 0xcb, 0x50, 0xbc, 0x87, 0xce, 0x92, 0xcc, 0x67, 0xd1, 0x74, 0x5a, 0x94,
	0x3f, 0xee, 0x7f, 0xfa, 0x29, 0x00, 0x00, 0xff, 0xff, 0x26, 0xaa, 0x54, 0xdf, 0xca, 0x0f, 0x00,
	0x00,
}
