// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	mock "github.com/stretchr/testify/mock"
)

// EthermanMock is an autogenerated mock type for the etherman type
type EthermanMock struct {
	mock.Mock
}

// GetSendSequenceFee provides a mock function with given fields: numBatches
func (_m *EthermanMock) GetSendSequenceFee(numBatches uint64) (*big.Int, error) {
	ret := _m.Called(numBatches)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(uint64) *big.Int); ok {
		r0 = rf(numBatches)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(numBatches)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEthermanMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewEthermanMock creates a new instance of EthermanMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEthermanMock(t mockConstructorTestingTNewEthermanMock) *EthermanMock {
	mock := &EthermanMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
