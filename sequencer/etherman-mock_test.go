// Code generated by mockery v2.12.3. DO NOT EDIT.

package sequencer

import (
	context "context"
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// ethermanMock is an autogenerated mock type for the etherman type
type ethermanMock struct {
	mock.Mock
}

// EstimateSendBatchCost provides a mock function with given fields: ctx, txs, maticAmount
func (_m *ethermanMock) EstimateSendBatchCost(ctx context.Context, txs []*types.Transaction, maticAmount *big.Int) (*big.Int, error) {
	ret := _m.Called(ctx, txs, maticAmount)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(context.Context, []*types.Transaction, *big.Int) *big.Int); ok {
		r0 = rf(ctx, txs, maticAmount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []*types.Transaction, *big.Int) error); ok {
		r1 = rf(ctx, txs, maticAmount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddress provides a mock function with given fields:
func (_m *ethermanMock) GetAddress() common.Address {
	ret := _m.Called()

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// GetCurrentSequencerCollateral provides a mock function with given fields:
func (_m *ethermanMock) GetCurrentSequencerCollateral() (*big.Int, error) {
	ret := _m.Called()

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomChainID provides a mock function with given fields:
func (_m *ethermanMock) GetCustomChainID() (*big.Int, error) {
	ret := _m.Called()

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendBatch provides a mock function with given fields: ctx, txs, maticAmount
func (_m *ethermanMock) SendBatch(ctx context.Context, txs []*types.Transaction, maticAmount *big.Int) (*types.Transaction, error) {
	ret := _m.Called(ctx, txs, maticAmount)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, []*types.Transaction, *big.Int) *types.Transaction); ok {
		r0 = rf(ctx, txs, maticAmount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []*types.Transaction, *big.Int) error); ok {
		r1 = rf(ctx, txs, maticAmount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type newEthermanMockT interface {
	mock.TestingT
	Cleanup(func())
}

// newEthermanMock creates a new instance of ethermanMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newEthermanMock(t newEthermanMockT) *ethermanMock {
	mock := &ethermanMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
