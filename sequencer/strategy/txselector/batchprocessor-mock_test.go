// Code generated by mockery v2.13.1. DO NOT EDIT.

package txselector_test

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	runtime "github.com/0xPolygonHermez/zkevm-node/state/runtime"

	types "github.com/ethereum/go-ethereum/core/types"
)

// batchProcessor is an autogenerated mock type for the batchProcessor type
type batchProcessor struct {
	mock.Mock
}

// ProcessTransaction provides a mock function with given fields: ctx, tx, sequencerAddress
func (_m *batchProcessor) ProcessTransaction(ctx context.Context, tx *types.Transaction, sequencerAddress common.Address) *runtime.ExecutionResult {
	ret := _m.Called(ctx, tx, sequencerAddress)

	var r0 *runtime.ExecutionResult
	if rf, ok := ret.Get(0).(func(context.Context, *types.Transaction, common.Address) *runtime.ExecutionResult); ok {
		r0 = rf(ctx, tx, sequencerAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.ExecutionResult)
		}
	}

	return r0
}

type mockConstructorTestingTnewBatchProcessor interface {
	mock.TestingT
	Cleanup(func())
}

// newBatchProcessor creates a new instance of batchProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newBatchProcessor(t mockConstructorTestingTnewBatchProcessor) *batchProcessor {
	mock := &batchProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
