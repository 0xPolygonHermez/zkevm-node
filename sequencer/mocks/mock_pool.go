// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	pool "github.com/0xPolygonHermez/zkevm-node/pool"
)

// PoolMock is an autogenerated mock type for the txPool type
type PoolMock struct {
	mock.Mock
}

// DeleteTxsByHashes provides a mock function with given fields: ctx, hashes
func (_m *PoolMock) DeleteTxsByHashes(ctx context.Context, hashes []common.Hash) error {
	ret := _m.Called(ctx, hashes)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []common.Hash) error); ok {
		r0 = rf(ctx, hashes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGasPrice provides a mock function with given fields: ctx
func (_m *PoolMock) GetGasPrice(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPendingTxs provides a mock function with given fields: ctx, isClaims, limit
func (_m *PoolMock) GetPendingTxs(ctx context.Context, isClaims bool, limit uint64) ([]pool.Transaction, error) {
	ret := _m.Called(ctx, isClaims, limit)

	var r0 []pool.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, bool, uint64) []pool.Transaction); ok {
		r0 = rf(ctx, isClaims, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pool.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, bool, uint64) error); ok {
		r1 = rf(ctx, isClaims, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTxFromAddressFromByHash provides a mock function with given fields: ctx, hash
func (_m *PoolMock) GetTxFromAddressFromByHash(ctx context.Context, hash common.Hash) (common.Address, uint64, error) {
	ret := _m.Called(ctx, hash)

	var r0 common.Address
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) common.Address); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) uint64); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, common.Hash) error); ok {
		r2 = rf(ctx, hash)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTxs provides a mock function with given fields: ctx, filterStatus, isClaims, minGasPrice, limit
func (_m *PoolMock) GetTxs(ctx context.Context, filterStatus pool.TxStatus, isClaims bool, minGasPrice uint64, limit uint64) ([]*pool.Transaction, error) {
	ret := _m.Called(ctx, filterStatus, isClaims, minGasPrice, limit)

	var r0 []*pool.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, pool.TxStatus, bool, uint64, uint64) []*pool.Transaction); ok {
		r0 = rf(ctx, filterStatus, isClaims, minGasPrice, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pool.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, pool.TxStatus, bool, uint64, uint64) error); ok {
		r1 = rf(ctx, filterStatus, isClaims, minGasPrice, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementFailedCounter provides a mock function with given fields: ctx, hashes
func (_m *PoolMock) IncrementFailedCounter(ctx context.Context, hashes []string) error {
	ret := _m.Called(ctx, hashes)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, hashes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsTxPending provides a mock function with given fields: ctx, hash
func (_m *PoolMock) IsTxPending(ctx context.Context, hash common.Hash) (bool, error) {
	ret := _m.Called(ctx, hash)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) bool); ok {
		r0 = rf(ctx, hash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkReorgedTxsAsPending provides a mock function with given fields: ctx
func (_m *PoolMock) MarkReorgedTxsAsPending(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTxStatus provides a mock function with given fields: ctx, hash, newStatus
func (_m *PoolMock) UpdateTxStatus(ctx context.Context, hash common.Hash, newStatus pool.TxStatus) error {
	ret := _m.Called(ctx, hash, newStatus)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash, pool.TxStatus) error); ok {
		r0 = rf(ctx, hash, newStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTxsStatus provides a mock function with given fields: ctx, hashes, newStatus
func (_m *PoolMock) UpdateTxsStatus(ctx context.Context, hashes []string, newStatus pool.TxStatus) error {
	ret := _m.Called(ctx, hashes, newStatus)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, pool.TxStatus) error); ok {
		r0 = rf(ctx, hashes, newStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPoolMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewPoolMock creates a new instance of PoolMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPoolMock(t mockConstructorTestingTNewPoolMock) *PoolMock {
	mock := &PoolMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
